{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CARET analyze # API for user # architecture infra plot runtime exceptions API for developer # common record value_objects","title":"HOME"},{"location":"#caret-analyze","text":"","title":"CARET analyze"},{"location":"#api-for-user","text":"architecture infra plot runtime exceptions","title":"API for user"},{"location":"#api-for-developer","text":"common record value_objects","title":"API for developer"},{"location":"architecture/","text":"","title":"architecture"},{"location":"common/","text":"Summarizable # Abstract base class that have summary property. summary () # Get summary. Returns: Type Description Summary summary info. Summary # Bases: UserDict Summary info about for value objects and runtime data objects. __eq__ ( other ) # Return True to ignore [override]. __hash__ () # Return zero to ignore [override]. __str__ () # Return yaml-format string. Util # find_one ( condition , items ) staticmethod # Get a single item that matches the condition. Parameters: Name Type Description Default condition Callable [[ Any ], bool ] required items Optional [ Iterable [ Any ]] required Returns: Type Description Any condition matched single item. Raises: Type Description ItemNotFoundError Failed to find an item that matches the condition. MultipleItemFoundError Failed to identify an item that matches the condition. find_similar_one ( target_name , items , key = lambda x : x , th = 0.6 ) staticmethod # Get a single item that matches the condition. Parameters: Name Type Description Default condition Callable [[ Any ], str ] required items Collection [ Any ] required Returns: Type Description Any condition matched single item. Raises: Type Description ItemNotFoundError Failed to find an item that matches the condition. MultipleItemFoundError Failed to identify an item that matches the condition. find_similar_one_multi_keys ( target_names , items , keys = lambda x : x , th = 0.6 ) staticmethod # Get a single item that matches the multi conditions. Parameters: Name Type Description Default conditions Callable [[ Any ], Dict [ str , str ]] required items Collection [ Any ] required Returns: Type Description Any conditions matched single item. Raises: Type Description ItemNotFoundError Failed to find an item that matches the conditions. MultipleItemFoundError Failed to identify an item that matches the conditions.","title":"common"},{"location":"common/#caret_analyze.common.Summarizable","text":"Abstract base class that have summary property.","title":"Summarizable"},{"location":"common/#caret_analyze.common.summary.Summarizable.summary","text":"Get summary. Returns: Type Description Summary summary info.","title":"summary()"},{"location":"common/#caret_analyze.common.Summary","text":"Bases: UserDict Summary info about for value objects and runtime data objects.","title":"Summary"},{"location":"common/#caret_analyze.common.summary.Summary.__eq__","text":"Return True to ignore [override].","title":"__eq__()"},{"location":"common/#caret_analyze.common.summary.Summary.__hash__","text":"Return zero to ignore [override].","title":"__hash__()"},{"location":"common/#caret_analyze.common.summary.Summary.__str__","text":"Return yaml-format string.","title":"__str__()"},{"location":"common/#caret_analyze.common.Util","text":"","title":"Util"},{"location":"common/#caret_analyze.common.util.Util.find_one","text":"Get a single item that matches the condition. Parameters: Name Type Description Default condition Callable [[ Any ], bool ] required items Optional [ Iterable [ Any ]] required Returns: Type Description Any condition matched single item. Raises: Type Description ItemNotFoundError Failed to find an item that matches the condition. MultipleItemFoundError Failed to identify an item that matches the condition.","title":"find_one()"},{"location":"common/#caret_analyze.common.util.Util.find_similar_one","text":"Get a single item that matches the condition. Parameters: Name Type Description Default condition Callable [[ Any ], str ] required items Collection [ Any ] required Returns: Type Description Any condition matched single item. Raises: Type Description ItemNotFoundError Failed to find an item that matches the condition. MultipleItemFoundError Failed to identify an item that matches the condition.","title":"find_similar_one()"},{"location":"common/#caret_analyze.common.util.Util.find_similar_one_multi_keys","text":"Get a single item that matches the multi conditions. Parameters: Name Type Description Default conditions Callable [[ Any ], Dict [ str , str ]] required items Collection [ Any ] required Returns: Type Description Any conditions matched single item. Raises: Type Description ItemNotFoundError Failed to find an item that matches the conditions. MultipleItemFoundError Failed to identify an item that matches the conditions.","title":"find_similar_one_multi_keys()"},{"location":"exceptions/","text":"Error # Bases: Exception Base class for exception in this module. InvalidArgumentError # Bases: Error Failed to process function. InvalidReaderError # Bases: Error Failed to load architecture. InvalidRecordsError # Bases: Error Given Records does not have the necessary columns. InvalidTraceFormatError # Bases: Error Failed to load trace data. InvalidYamlFormatError # Bases: Error Failed to load yaml. ItemNotFoundError # Bases: Error Failed to identify an item that matches the condition. MultipleItemFoundError # Bases: Error Failed to identify an item that matches the condition. TraceResultAnalyzeError # Bases: Error Failed to parse trace results. __init__ ( * args ) # Construct exception instance. UnsupportedNodeRecordsError # Bases: Error Failed to calculate node path records. UnsupportedTypeError # Bases: Error Given type is unsupported.","title":"exceptions"},{"location":"exceptions/#caret_analyze.exceptions.Error","text":"Bases: Exception Base class for exception in this module.","title":"Error"},{"location":"exceptions/#caret_analyze.exceptions.InvalidArgumentError","text":"Bases: Error Failed to process function.","title":"InvalidArgumentError"},{"location":"exceptions/#caret_analyze.exceptions.InvalidReaderError","text":"Bases: Error Failed to load architecture.","title":"InvalidReaderError"},{"location":"exceptions/#caret_analyze.exceptions.InvalidRecordsError","text":"Bases: Error Given Records does not have the necessary columns.","title":"InvalidRecordsError"},{"location":"exceptions/#caret_analyze.exceptions.InvalidTraceFormatError","text":"Bases: Error Failed to load trace data.","title":"InvalidTraceFormatError"},{"location":"exceptions/#caret_analyze.exceptions.InvalidYamlFormatError","text":"Bases: Error Failed to load yaml.","title":"InvalidYamlFormatError"},{"location":"exceptions/#caret_analyze.exceptions.ItemNotFoundError","text":"Bases: Error Failed to identify an item that matches the condition.","title":"ItemNotFoundError"},{"location":"exceptions/#caret_analyze.exceptions.MultipleItemFoundError","text":"Bases: Error Failed to identify an item that matches the condition.","title":"MultipleItemFoundError"},{"location":"exceptions/#caret_analyze.exceptions.TraceResultAnalyzeError","text":"Bases: Error Failed to parse trace results.","title":"TraceResultAnalyzeError"},{"location":"exceptions/#caret_analyze.exceptions.TraceResultAnalyzeError.__init__","text":"Construct exception instance.","title":"__init__()"},{"location":"exceptions/#caret_analyze.exceptions.UnsupportedNodeRecordsError","text":"Bases: Error Failed to calculate node path records.","title":"UnsupportedNodeRecordsError"},{"location":"exceptions/#caret_analyze.exceptions.UnsupportedTypeError","text":"Bases: Error Given type is unsupported.","title":"UnsupportedTypeError"},{"location":"infra/","text":"InfraBase # infrastructure base class. Lttng # Bases: InfraBase Lttng data container class. This class is a singleton in order to retain information. The main processing is done by LttngInfo and RecordsSource. compose_callback_records () # Compose callback records of all communications in one records. Returns: Type Description RecordsInterface Columns callback_start_timestamp callback_end_timestamp is_intra_process callback_object compose_inter_proc_comm_records () # Compose inter process communication records of all communications in one records. Returns: Type Description RecordsInterface Columns callback_object callback_start_timestamp publisher_handle rclcpp_publish_timestamp rcl_publish_timestamp (Optional) dds_write_timestamp (Optional) compose_intra_proc_comm_records () # Compose intra process communication records of all communications in one records. Returns: Type Description RecordsInterface Columns callback_object callback_start_timestamp publisher_handle rclcpp_publish_timestamp message_timestamp get_callback_groups ( node ) # Get callback group information. Returns: Type Description Sequence [ CallbackGroupValue ] get_executors () # Get executors information. Returns: Type Description Sequence [ ExecutorInfo ] get_node_names ( callback_group_id ) # Get node names from callback group id. Returns: Type Description Sequence [ str ] node names. get_nodes () # Get nodes. Returns: Type Description Sequence [ NodeValueWithId ] nodes info. get_publisher_qos ( pub ) # Get publisher qos. Parameters: Name Type Description Default pub PublisherValueLttng target publisher required Returns: Type Description Qos get_publishers ( node ) # Get publishers information. Parameters: Name Type Description Default node NodeValue target node. required Returns: Type Description Sequence [ PublisherInfoLttng ] get_rmw_impl () # Get rmw implementation. Returns: Type Description str rmw_implementation get_subscription_callbacks ( node ) # Get subscription callbacks information. Parameters: Name Type Description Default node NodeValue target node name. required Returns: Type Description Sequence [ SubscriptionCallbackInfoLttng ] get_subscription_qos ( sub ) # Get subscription qos. Parameters: Name Type Description Default sub SubscriptionCallbackValueLttng target subscription required Returns: Type Description Qos get_timer_callbacks ( node ) # Get timer callback values. Parameters: Name Type Description Default node NodeValue target node name. required Returns: Type Description Sequence [ TimerCallbackInfoLttng ] get_timers ( node ) # Get timers information. Returns: Type Description Sequence [ TimerValue ] get_trace_creation_datetime () # Get trace creation datetime. Returns: Name Type Description trace_creation_datetime datetime Date and time the trace data was created. get_trace_range () # Get trace range. Returns: Name Type Description trace_range Tuple [ datetime , datetime ] Trace begin time and trace end time. RecordsProvider # callback_records ( callback_info ) abstractmethod # Compose callback records. Parameters: Name Type Description Default callback_info CallbackStructValue [description] required Returns: Type Description RecordsInterface [description] variable_passing_records ( variable_passing_info ) abstractmethod # Compose variable passing records. Parameters: Name Type Description Default variable_passing_info VariablePassingStructValue required Returns: Type Description RecordsInterface RecordsProviderLttng # Bases: RuntimeDataProvider Records are processed and measurement results are calculated. In addition to merging, filtering and other operations are performed here. callback_records ( callback ) # Return callback duration records. Parameters: Name Type Description Default callback_val CallbackStructValue target callback value. required Returns: Type Description RecordsInterface Columns [callback_name]/callback_start_timestamp [callback_name]/callback_end_timestamp communication_records ( comm_val ) # Provide communication records. Parameters: Name Type Description Default comm_info CommunicationStructValue communication info. required Returns: Type Description RecordsInterface Columns [topic_name]/rclcpp_publish_timestamp [topic_name]/rcl_publish_timestamp (Optional) [topic_name]/dds_publish_timestamp (Optional) [callback_name]/callback_start_timestamp publish_records ( publisher ) # Return publish records. Parameters: Name Type Description Default publish PublisherStructValue target publisher required Returns: Type Description RecordsInterface Columns [topic_name]/rclcpp_publish_timestamp [topic_name]/rclcpp_intra_publish_timestamp (Optional) [topic_name]/rclcpp_inter_publish_timestamp (Optional) [topic_name]/rcl_publish_timestamp (Optional) [topic_name]/dds_write_timestamp (Optional) [topic_name]/message_timestamp [topic_name]/source_timestamp (Optional) [topic_name]/tilde_publish_timestamp (Optional) [topic_name]/tilde_message_id (Optional) subscribe_records ( subscription ) # Provide subscription records. Parameters: Name Type Description Default subscription_value SubscriptionStructValue Target subscription value. required Returns: Type Description RecordsInterface Columns [callback_name]/callback_start_timestamp [topic_name]/message_timestamp [topic_name]/source_timestamp Raises: Type Description InvalidArgumentError timer_records ( timer ) # Return timer records. Parameters: Name Type Description Default timer TimerStructValue [description] required Returns: Type Description RecordsInterface Columns [callback_name]/timer_event [callback_name]/callback_start [callback_name]/callback_end variable_passing_records ( variable_passing_info ) # Return variable passing records. Parameters: Name Type Description Default variable_passing_info VariablePassingStructValue target variable passing info. required Returns: Type Description RecordsInterface Columns [callback_name]/callback_end_timestamp [callback_name]/callback_start_timestamp","title":"infra"},{"location":"infra/#caret_analyze.infra.InfraBase","text":"infrastructure base class.","title":"InfraBase"},{"location":"infra/#caret_analyze.infra.Lttng","text":"Bases: InfraBase Lttng data container class. This class is a singleton in order to retain information. The main processing is done by LttngInfo and RecordsSource.","title":"Lttng"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.compose_callback_records","text":"Compose callback records of all communications in one records. Returns: Type Description RecordsInterface Columns callback_start_timestamp callback_end_timestamp is_intra_process callback_object","title":"compose_callback_records()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.compose_inter_proc_comm_records","text":"Compose inter process communication records of all communications in one records. Returns: Type Description RecordsInterface Columns callback_object callback_start_timestamp publisher_handle rclcpp_publish_timestamp rcl_publish_timestamp (Optional) dds_write_timestamp (Optional)","title":"compose_inter_proc_comm_records()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.compose_intra_proc_comm_records","text":"Compose intra process communication records of all communications in one records. Returns: Type Description RecordsInterface Columns callback_object callback_start_timestamp publisher_handle rclcpp_publish_timestamp message_timestamp","title":"compose_intra_proc_comm_records()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_callback_groups","text":"Get callback group information. Returns: Type Description Sequence [ CallbackGroupValue ]","title":"get_callback_groups()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_executors","text":"Get executors information. Returns: Type Description Sequence [ ExecutorInfo ]","title":"get_executors()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_node_names","text":"Get node names from callback group id. Returns: Type Description Sequence [ str ] node names.","title":"get_node_names()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_nodes","text":"Get nodes. Returns: Type Description Sequence [ NodeValueWithId ] nodes info.","title":"get_nodes()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_publisher_qos","text":"Get publisher qos. Parameters: Name Type Description Default pub PublisherValueLttng target publisher required Returns: Type Description Qos","title":"get_publisher_qos()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_publishers","text":"Get publishers information. Parameters: Name Type Description Default node NodeValue target node. required Returns: Type Description Sequence [ PublisherInfoLttng ]","title":"get_publishers()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_rmw_impl","text":"Get rmw implementation. Returns: Type Description str rmw_implementation","title":"get_rmw_impl()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_subscription_callbacks","text":"Get subscription callbacks information. Parameters: Name Type Description Default node NodeValue target node name. required Returns: Type Description Sequence [ SubscriptionCallbackInfoLttng ]","title":"get_subscription_callbacks()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_subscription_qos","text":"Get subscription qos. Parameters: Name Type Description Default sub SubscriptionCallbackValueLttng target subscription required Returns: Type Description Qos","title":"get_subscription_qos()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_timer_callbacks","text":"Get timer callback values. Parameters: Name Type Description Default node NodeValue target node name. required Returns: Type Description Sequence [ TimerCallbackInfoLttng ]","title":"get_timer_callbacks()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_timers","text":"Get timers information. Returns: Type Description Sequence [ TimerValue ]","title":"get_timers()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_trace_creation_datetime","text":"Get trace creation datetime. Returns: Name Type Description trace_creation_datetime datetime Date and time the trace data was created.","title":"get_trace_creation_datetime()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_trace_range","text":"Get trace range. Returns: Name Type Description trace_range Tuple [ datetime , datetime ] Trace begin time and trace end time.","title":"get_trace_range()"},{"location":"infra/#caret_analyze.infra.RecordsProvider","text":"","title":"RecordsProvider"},{"location":"infra/#caret_analyze.infra.interface.RecordsProvider.callback_records","text":"Compose callback records. Parameters: Name Type Description Default callback_info CallbackStructValue [description] required Returns: Type Description RecordsInterface [description]","title":"callback_records()"},{"location":"infra/#caret_analyze.infra.interface.RecordsProvider.variable_passing_records","text":"Compose variable passing records. Parameters: Name Type Description Default variable_passing_info VariablePassingStructValue required Returns: Type Description RecordsInterface","title":"variable_passing_records()"},{"location":"infra/#caret_analyze.infra.RecordsProviderLttng","text":"Bases: RuntimeDataProvider Records are processed and measurement results are calculated. In addition to merging, filtering and other operations are performed here.","title":"RecordsProviderLttng"},{"location":"infra/#caret_analyze.infra.lttng.records_provider_lttng.RecordsProviderLttng.callback_records","text":"Return callback duration records. Parameters: Name Type Description Default callback_val CallbackStructValue target callback value. required Returns: Type Description RecordsInterface Columns [callback_name]/callback_start_timestamp [callback_name]/callback_end_timestamp","title":"callback_records()"},{"location":"infra/#caret_analyze.infra.lttng.records_provider_lttng.RecordsProviderLttng.communication_records","text":"Provide communication records. Parameters: Name Type Description Default comm_info CommunicationStructValue communication info. required Returns: Type Description RecordsInterface Columns [topic_name]/rclcpp_publish_timestamp [topic_name]/rcl_publish_timestamp (Optional) [topic_name]/dds_publish_timestamp (Optional) [callback_name]/callback_start_timestamp","title":"communication_records()"},{"location":"infra/#caret_analyze.infra.lttng.records_provider_lttng.RecordsProviderLttng.publish_records","text":"Return publish records. Parameters: Name Type Description Default publish PublisherStructValue target publisher required Returns: Type Description RecordsInterface Columns [topic_name]/rclcpp_publish_timestamp [topic_name]/rclcpp_intra_publish_timestamp (Optional) [topic_name]/rclcpp_inter_publish_timestamp (Optional) [topic_name]/rcl_publish_timestamp (Optional) [topic_name]/dds_write_timestamp (Optional) [topic_name]/message_timestamp [topic_name]/source_timestamp (Optional) [topic_name]/tilde_publish_timestamp (Optional) [topic_name]/tilde_message_id (Optional)","title":"publish_records()"},{"location":"infra/#caret_analyze.infra.lttng.records_provider_lttng.RecordsProviderLttng.subscribe_records","text":"Provide subscription records. Parameters: Name Type Description Default subscription_value SubscriptionStructValue Target subscription value. required Returns: Type Description RecordsInterface Columns [callback_name]/callback_start_timestamp [topic_name]/message_timestamp [topic_name]/source_timestamp Raises: Type Description InvalidArgumentError","title":"subscribe_records()"},{"location":"infra/#caret_analyze.infra.lttng.records_provider_lttng.RecordsProviderLttng.timer_records","text":"Return timer records. Parameters: Name Type Description Default timer TimerStructValue [description] required Returns: Type Description RecordsInterface Columns [callback_name]/timer_event [callback_name]/callback_start [callback_name]/callback_end","title":"timer_records()"},{"location":"infra/#caret_analyze.infra.lttng.records_provider_lttng.RecordsProviderLttng.variable_passing_records","text":"Return variable passing records. Parameters: Name Type Description Default variable_passing_info VariablePassingStructValue target variable passing info. required Returns: Type Description RecordsInterface Columns [callback_name]/callback_end_timestamp [callback_name]/callback_start_timestamp","title":"variable_passing_records()"},{"location":"plot/","text":"CallbackFrequencyPlot # Bases: TimeSeriesPlot Class that provides API for callback execution frequency. This class provides the API to visualize the execution frequency per unit of time for each callback and to obtain it in the pandas DataFrame format. CallbackLatencyPlot # Bases: TimeSeriesPlot Class that provides API for callback latency. This class provides the API to visualize the latency per unit of time for each callback and to obtain it in the pandas DataFrame format. CallbackPeriodPlot # Bases: TimeSeriesPlot Class that provides API for callback period. This class provides the API to visualize the period per unit of time for each callback and to obtain it in the pandas DataFrame format. Plot # create_callback_frequency_plot ( arg ) # Get CallbackFrequencyPlot instance. Parameters: Name Type Description Default callbacks Collection [ CallbackBase ] Target callbacks. This also accepts multiple CallbackBase inputs by unpacking. required Returns: Type Description CallbackFrequencyPlot create_callback_latency_plot ( arg ) # Get CallbackLatencyPlot instance. Parameters: Name Type Description Default callbacks Collection [ CallbackBase ] Target callbacks. This also accepts multiple CallbackBase inputs by unpacking. required Returns: Type Description CallbackLatencyPlot create_callback_period_plot ( arg ) # Get CallbackPeriodPlot instance. Parameters: Name Type Description Default callbacks Collection [ CallbackBase ] Target callbacks. This also accepts multiple CallbackBase inputs by unpacking. required Returns: Type Description CallbackPeriodPlot TimeSeriesPlot # show ( xaxis_type = 'system_time' , ywheel_zoom = True , full_legends = False , export_path = None ) # Draw a line graph for each callback using the bokeh library. Parameters: Name Type Description Default xaxis_type str Type of x-axis of the line graph to be plotted. \"system_time\", \"index\", or \"sim_time\" can be specified. The default is \"system_time\". 'system_time' ywheel_zoom bool If True, the drawn graph can be expanded in the y-axis direction by the mouse wheel. True full_legends bool If True, all legends are drawn even if the number of legends exceeds the threshold. False export_path Optional [ str ] If you give path, the drawn graph will be saved as a file. None Returns: Type Description bokeh . plotting . Figure Raises: Type Description UnsupportedTypeError Argument xaxis_type is not \"system_time\", \"index\", or \"sim_time\". to_dataframe ( xaxis_type = 'system_time' ) # Get time series data for each callback in pandas DataFrame format. Parameters: Name Type Description Default xaxis_type str Type of time for timestamp. \"system_time\", \"index\", or \"sim_time\" can be specified. The default is \"system_time\". 'system_time' Raises: Type Description UnsupportedTypeError Argument xaxis_type is not \"system_time\", \"index\", or \"sim_time\". Notes # xaxis_type \"system_time\" and \"index\" return the same DataFrame. callback_sched ( target , lstrip_s = 0 , rstrip_s = 0 , coloring_rule = 'callback' , use_sim_time = False , export_path = None ) # Visualize callback scheduling behavior. Parameters: Name Type Description Default target CallbackGroupTypes CallbackGroupTypes = Union[Application, Executor, Path, Node, CallbackGroup, List[CallbackGroup]]. The target which you want to visualize. required lstrip_s float Left strip. The default value is 0. 0 rstrip_s float Right strip. The default value is 0. 0 coloring_rule str The unit of color change. There are three rules which are callback, callback_group and node. The default value is \"callback\". 'callback' use_sim_time bool If you want to use the simulation time, you can set this Parameter to True. False export_path Optional [ str ] If you give path, the drawn graph will be saved as a file. None Returns: Type Description bokeh . plotting . Figure","title":"plot"},{"location":"plot/#caret_analyze.plot.CallbackFrequencyPlot","text":"Bases: TimeSeriesPlot Class that provides API for callback execution frequency. This class provides the API to visualize the execution frequency per unit of time for each callback and to obtain it in the pandas DataFrame format.","title":"CallbackFrequencyPlot"},{"location":"plot/#caret_analyze.plot.CallbackLatencyPlot","text":"Bases: TimeSeriesPlot Class that provides API for callback latency. This class provides the API to visualize the latency per unit of time for each callback and to obtain it in the pandas DataFrame format.","title":"CallbackLatencyPlot"},{"location":"plot/#caret_analyze.plot.CallbackPeriodPlot","text":"Bases: TimeSeriesPlot Class that provides API for callback period. This class provides the API to visualize the period per unit of time for each callback and to obtain it in the pandas DataFrame format.","title":"CallbackPeriodPlot"},{"location":"plot/#caret_analyze.plot.Plot","text":"","title":"Plot"},{"location":"plot/#caret_analyze.plot.bokeh.plot_factory.Plot.create_callback_frequency_plot","text":"Get CallbackFrequencyPlot instance. Parameters: Name Type Description Default callbacks Collection [ CallbackBase ] Target callbacks. This also accepts multiple CallbackBase inputs by unpacking. required Returns: Type Description CallbackFrequencyPlot","title":"create_callback_frequency_plot()"},{"location":"plot/#caret_analyze.plot.bokeh.plot_factory.Plot.create_callback_latency_plot","text":"Get CallbackLatencyPlot instance. Parameters: Name Type Description Default callbacks Collection [ CallbackBase ] Target callbacks. This also accepts multiple CallbackBase inputs by unpacking. required Returns: Type Description CallbackLatencyPlot","title":"create_callback_latency_plot()"},{"location":"plot/#caret_analyze.plot.bokeh.plot_factory.Plot.create_callback_period_plot","text":"Get CallbackPeriodPlot instance. Parameters: Name Type Description Default callbacks Collection [ CallbackBase ] Target callbacks. This also accepts multiple CallbackBase inputs by unpacking. required Returns: Type Description CallbackPeriodPlot","title":"create_callback_period_plot()"},{"location":"plot/#caret_analyze.plot.TimeSeriesPlot","text":"","title":"TimeSeriesPlot"},{"location":"plot/#caret_analyze.plot.bokeh.callback_info_interface.TimeSeriesPlot.show","text":"Draw a line graph for each callback using the bokeh library. Parameters: Name Type Description Default xaxis_type str Type of x-axis of the line graph to be plotted. \"system_time\", \"index\", or \"sim_time\" can be specified. The default is \"system_time\". 'system_time' ywheel_zoom bool If True, the drawn graph can be expanded in the y-axis direction by the mouse wheel. True full_legends bool If True, all legends are drawn even if the number of legends exceeds the threshold. False export_path Optional [ str ] If you give path, the drawn graph will be saved as a file. None Returns: Type Description bokeh . plotting . Figure Raises: Type Description UnsupportedTypeError Argument xaxis_type is not \"system_time\", \"index\", or \"sim_time\".","title":"show()"},{"location":"plot/#caret_analyze.plot.bokeh.callback_info_interface.TimeSeriesPlot.to_dataframe","text":"Get time series data for each callback in pandas DataFrame format. Parameters: Name Type Description Default xaxis_type str Type of time for timestamp. \"system_time\", \"index\", or \"sim_time\" can be specified. The default is \"system_time\". 'system_time' Raises: Type Description UnsupportedTypeError Argument xaxis_type is not \"system_time\", \"index\", or \"sim_time\".","title":"to_dataframe()"},{"location":"plot/#caret_analyze.plot.bokeh.callback_info_interface.TimeSeriesPlot.to_dataframe--notes","text":"xaxis_type \"system_time\" and \"index\" return the same DataFrame.","title":"Notes"},{"location":"plot/#caret_analyze.plot.callback_sched","text":"Visualize callback scheduling behavior. Parameters: Name Type Description Default target CallbackGroupTypes CallbackGroupTypes = Union[Application, Executor, Path, Node, CallbackGroup, List[CallbackGroup]]. The target which you want to visualize. required lstrip_s float Left strip. The default value is 0. 0 rstrip_s float Right strip. The default value is 0. 0 coloring_rule str The unit of color change. There are three rules which are callback, callback_group and node. The default value is \"callback\". 'callback' use_sim_time bool If you want to use the simulation time, you can set this Parameter to True. False export_path Optional [ str ] If you give path, the drawn graph will be saved as a file. None Returns: Type Description bokeh . plotting . Figure","title":"callback_sched()"},{"location":"record/","text":"Frequency # __init__ ( records , target_column = None ) # Construct an instance. Parameters: Name Type Description Default records RecordsInterface records to calculate frequency. required target_column Optional [ str ], optional Column name of timestamps used in the calculation, by default None If None, the first column of records is selected. None to_records ( interval_ns = 1000000000 , base_timestamp = None ) # Calculate frequency records. Parameters: Name Type Description Default interval_ns int Interval used for frequency calculation, by default 1000000000 [ns]. The number of timestamps that exist in this time interval is counted. 1000000000 base_timestamp Optional [ int ], optional Initial timestamp used for frequency calculation, by default None. If None, earliest timestamp is used. None Returns: Type Description RecordsInterface frequency records. Columns - {timestamp_column} - {frequency_column} Latency # __init__ ( records , start_column = None , end_column = None ) # Construct an instance. Parameters: Name Type Description Default records RecordsInterface records to calculate latency. required start_column Optional [ str ], optional Column name of start timestamps used in the calculation, by default None If None, the first column of records is selected. None end_column Optional [ str ], optional Column name of end timestamps used in the calculation, by default None If None, the last column of records is selected. None to_records () # Calculate latency records. Returns: Type Description RecordsInterface latency records. Columns - {start_timestamp_column} - {latency_column} Period # __init__ ( records , target_column = None ) # Constructor. Parameters: Name Type Description Default records RecordsInterface records to calculate period. required target_column Optional [ str ], optional Column name of timestamps used in the calculation, by default None If None, the first column of records is selected. None to_records () # Calculate period records. Returns: Type Description RecordsInterface period records. Columns - {timestamp_column} - {period_column} RecordInterface # Interface for Record class. This behavior is similar to the dictionary type. To avoid conflicts with the pybind metaclass, ABC is not used. add ( key , stamp ) abstractmethod # Add(Update) column value. Parameters: Name Type Description Default key str key name to set. required stamp int key value to set. required change_dict_key ( old_key , new_key ) abstractmethod # Change columns name. Parameters: Name Type Description Default old_key str column name to be changed. required new_key str new column name. required columns () abstractmethod property # Get column names. Returns: Type Description Set [ str ] Column names. data () abstractmethod property # Convert to dictionary. Returns: Name Type Description data Dict [ str , int ] dictionary data. drop_columns ( columns ) abstractmethod # Drop columns method. Parameters: Name Type Description Default columns List [ str ] columns to be dropped. required equals ( other ) abstractmethod # Compare record. Parameters: Name Type Description Default other RecordInterface comparison target. required Returns: Type Description bool True if record data is same, otherwise false. get ( key ) abstractmethod # Get value for specific column. Parameters: Name Type Description Default key str key name to get. required Returns: Type Description int Value for selected key. get_with_default ( key , v ) abstractmethod # Get value for specific column. Parameters: Name Type Description Default key str key name to get. required v int default value. required Returns: Type Description int Value for selected key. merge ( other ) abstractmethod # Merge record. Parameters: Name Type Description Default other RecordInterface merge target. required inplace bool inplace record if true, otherwise false. required Returns: Type Description Record Merged record class if inplace = false, otherwise None. RecordsInterface # Interface for Record class. To avoid conflicts with the pybind metaclass, ABC is not used. append_column ( column , values ) abstractmethod # Append column to records. Parameters: Name Type Description Default column ColumnValue required values List [ int ] required bind_drop_as_delay () abstractmethod # Convert the dropped points to records converted as delay. clone () abstractmethod # Get duplicated records. Returns: Type Description RecordsInterface deep-copied records. columns () abstractmethod property # Get column names. Returns: Type Description List [ str ] Columns. concat ( other ) abstractmethod # Concat records. Parameters: Name Type Description Default other RecordsInterface records to be concatenated. required Returns: Type Description RecordsInterface concatenated records if inplace=False, otherwise None. data () abstractmethod property # Get records list. Returns: Type Description Sequence [ RecordInterface ] Records list. drop_columns ( columns ) abstractmethod # Drop columns. Parameters: Name Type Description Default columns List [ str ] columns to be dropped. required equals ( other ) abstractmethod # Equals method. Parameters: Name Type Description Default other RecordsInterface comparison target. required Returns: Type Description bool true if record data is same, otherwise false. filter_if ( f ) abstractmethod # Get filtered records. Parameters: Name Type Description Default f Callable [[ RecordInterface ], bool ] condition function. required inplace bool inplace original instance if true. required groupby ( columns ) abstractmethod # Split based on the value of the given column name. merge ( right_records , join_left_key , join_right_key , columns , how , * , progress_label = None ) abstractmethod # Merge records by key match. Parameters: Name Type Description Default right_records RecordInterface merge target. required join_left_key str Key to use for matching. required join_right_key str Key to use for matching. required how str merge type. [inner/right/left/outer] required progress_label str label for progress bar. cpp impl only. None Returns: Type Description RecordsInterface Examples: >>> left_records = Records ([ Record({'join_key': 1, 'left_other': 1}), Record({'join_key': 2, 'left_other': 2}), ]) >>> right_records = Records ([ Record({'join_key': 2, 'right_other': 3}), Record({'join_key': 1, 'right_other': 4}), ]) >>> expected = Records ([ Record({'join_key': 1, 'left_other': 1, 'right_other': 4}), Record({'join_key': 2, 'left_other': 2, 'right_other': 3}), ]) >>> left_records . merge ( right_records , 'join_key' ) . equals ( expected ) True merge_sequential ( right_records , left_stamp_key , right_stamp_key , join_left_key , join_right_key , columns , how , * , progress_label = None ) abstractmethod # Merge chronologically contiguous records. Merge left_records[left_key] and the right_records[right_key] that occurred immediately after it. If join_key is set, left_records[join_key]==right_records[join_key] is added as condition. Parameters: Name Type Description Default right_records RecordsInterface merge target. required left_stamp_key str left records key name to use for comparison in time series merge. required right_stamp_key str right records key name to use for comparison in time series merge. required join_key str join key name to use equal condition. required how str merge type. [inner/right/left/outer] required progress_label str label for progress bar. cpp impl only. None Records # RecordsInterface Merged records. Examples: >>> left_records = Records ([ Record({'join_key': 1, 'left_stamp_key': 0}), Record({'join_key': 2, 'left_stamp_key': 3}) ]) >>> right_records = Records ([ Record({'join_key': 2, 'right_stamp_key': 5}), Record({'join_key': 1, 'right_stamp_key': 6}) ]) >>> expected = Records ([ Record({'join_key': 1, 'left_stamp_key': 0, 'right_stamp_key': 6}), Record({'join_key': 2, 'left_stamp_key': 3, 'right_stamp_key': 5}), ]) >>> left_records . merge_sequential ( right_records, 'left_stamp_key', 'right_stamp_key', 'join_key', 'inner' ).equals(expected) True merge_sequential_for_addr_track ( source_stamp_key , source_key , copy_records , copy_stamp_key , copy_from_key , copy_to_key , sink_records , sink_stamp_key , sink_from_key , columns , * , progress_label = None ) abstractmethod # Merge for tracking addresses when copying occurs. Parameters: Name Type Description Default source_stamp_key str key name indicating time stamp for source records required source_key str Key name indicating the address of the copy source for source records. required copy_records Recordsinterface copy records required copy_stamp_key str key name indicating time stamp for copy records required copy_from_key str Key name indicating the address of the copy source for source records. required copy_to_key str Key name indicating the address of the copy destination required sink_records RecordsInterface sink-side records required sink_stamp_key str key_name indicating time stamp for copy records required sink_from_key str Key name indicating the address of the copy destination required progress_label str label for progress bar. cpp impl only. None Returns: Type Description RecordsInterface Merged records. Examples: >>> source_records = Records ([ Record({'source_key': 1, 'source_stamp': 0}), ]) >>> copy_records = Records ([ Record({'copy_from_key': 1, 'copy_to_key': 11, 'copy_stamp_key': 1}) ]) >>> sink_records = Records ([ Record({'sink_from_key': 11, 'sink_stamp': 2}), Record({'sink_from_key': 1, 'sink_stamp': 3}), ]) >>> expected = Records ([ Record({'source_stamp':0, 'sink_stamp':3, 'source_key':1}), Record({'source_stamp':0, 'sink_stamp':2, 'source_key':1}), ]) >>> source_records . merge_sequential_for_addr_track ( 'source_stamp', 'source_key', copy_records, 'copy_stamp_key', 'copy_from_key', 'copy_to_key', sink_records, 'sink_stamp', 'sink_from_key' ).equals(expected) True reindex ( columns ) # Reindex columns. Parameters: Name Type Description Default columns List [ str ] required rename_columns ( columns ) abstractmethod # Rename columns. Parameters: Name Type Description Default columns Dict [ str , str ] rename params. same as dataframe rename. required sort ( key , sub_key = None , ascending = True ) abstractmethod # Sort records. Parameters: Name Type Description Default key str key name to used for sort. required sub_key str second key name to used for sort. None ascending bool ascending if True, descending if false. True sort_column_order ( ascending = True , put_none_at_top = True ) abstractmethod # Sort records by ordered columns. Parameters: Name Type Description Default ascending bool ascending if True, descending if false. True put_none_at_top bool True to_dataframe () abstractmethod # Convert to pandas dataframe. Returns: Type Description pandas . DataFrame Records data. ResponseTime # Class which calculates response time. Parameters: Name Type Description Default records RecordsInterface records to calculate response time. required input_column str column name for input time. None output_column str column name for output time. None Examples: >>> from caret_analyze import Application , Architecture , Lttng >>> from caret_analyze.experiment import ResponseTime >>> # Load results >>> arch = Architecture ( 'yaml' , '/path/to/yaml' ) >>> lttng = Lttng ( '/path/to/ctf' ) >>> app = Application ( arch , lttng ) >>> # Select target instance >>> node = app . get_node ( 'node_name' ) >>> callback = node . callbacks [ 0 ] >>> callback . summary . pprint () >>> # Calculate response time >>> records = callback . to_records () >>> response = ResponseTime ( records ) >>> response_records = response . to_response_records () >>> response_df = response_records . to_dataframe () >>> path = app . get_path ( 'path_name' ) >>> records = path . to_records () >>> response = ResponseTime ( records ) >>> response_records = response . to_response_records () >>> response_df = response_records . to_dataframe () __init__ ( records , * , input_column = None , output_column = None ) # Construct an instance. Parameters: Name Type Description Default records RecordsInterface records to calculate response time. required input_column Optional [ str ], optional column name which is input, by default None If None, the first column of records is selected. None output_column Optional [ str ], optional column name which is output, by default None If None, the last column of records is selected. None to_best_case_histogram ( binsize_ns = 1000000 , density = False ) # Calculate the best-case histogram for response time. The best case for response time are included message flow latency. Returns: Type Description Tuple [ np . ndarray , np . ndarray ] frequency, latencies[ns]. ref. https://numpy.org/doc/stable/reference/generated/numpy.histogram.html to_best_case_timeseries () # Calculate the best-case time series data for response time. The best case for response time are included message flow latency. Returns: Type Description Tuple [ np . ndarray , np . ndarray ] input time[ns], latency[ns] to_histogram ( binsize_ns = 1000000 , density = False ) # Calculate response time histogram. Parameters: Name Type Description Default binsize_ns int , optional binsize [ns], by default 1000000 1000000 density bool , optional If False, the result will contain the number of samples in each bin. If True, the result is the value of the probability density function at the bin, normalized such that the integral over the range is 1. Note that the sum of the histogram values will not be equal to 1 unless bins of unity width are chosen; it is not a probability mass function. False Returns: Type Description Tuple [ np . ndarray , np . ndarray ] frequency, latencies[ns]. ref. https://numpy.org/doc/stable/reference/generated/numpy.histogram.html to_records ( * , all_pattern = False ) # Calculate response time records. Parameters: Name Type Description Default all_pattern bool , optional If True, get response times with time overlap, by default False. [for debug] False Returns: Type Description RecordsInterface response time records. The best and worst cases alternate line by line. Columns - {input_column} - {output_column} to_response_records () # Calculate response records. Returns: Type Description RecordsInterface The best and worst cases are separated into separate columns. Columns - {input_column}_min - {input_column}_max - {output_column} to_worst_case_histogram ( binsize_ns = 1000000 , density = False ) # Calculate the worst-case histogram for response time. The worst case in response time includes message flow latencies as well as delays caused by various factors such as lost messages. Returns: Type Description Tuple [ np . ndarray , np . ndarray ] frequency, latencies[ns]. ref. https://numpy.org/doc/stable/reference/generated/numpy.histogram.html to_worst_case_timeseries () # Calculate the worst-case time series data for response time. The worst case in response time includes message flow latencies as well as delays caused by various factors such as lost messages. Returns: Type Description Tuple [ np . ndarray , np . ndarray ] input time[ns], latency[ns]","title":"record"},{"location":"record/#caret_analyze.record.Frequency","text":"","title":"Frequency"},{"location":"record/#caret_analyze.record.frequency.Frequency.__init__","text":"Construct an instance. Parameters: Name Type Description Default records RecordsInterface records to calculate frequency. required target_column Optional [ str ], optional Column name of timestamps used in the calculation, by default None If None, the first column of records is selected. None","title":"__init__()"},{"location":"record/#caret_analyze.record.frequency.Frequency.to_records","text":"Calculate frequency records. Parameters: Name Type Description Default interval_ns int Interval used for frequency calculation, by default 1000000000 [ns]. The number of timestamps that exist in this time interval is counted. 1000000000 base_timestamp Optional [ int ], optional Initial timestamp used for frequency calculation, by default None. If None, earliest timestamp is used. None Returns: Type Description RecordsInterface frequency records. Columns - {timestamp_column} - {frequency_column}","title":"to_records()"},{"location":"record/#caret_analyze.record.Latency","text":"","title":"Latency"},{"location":"record/#caret_analyze.record.latency.Latency.__init__","text":"Construct an instance. Parameters: Name Type Description Default records RecordsInterface records to calculate latency. required start_column Optional [ str ], optional Column name of start timestamps used in the calculation, by default None If None, the first column of records is selected. None end_column Optional [ str ], optional Column name of end timestamps used in the calculation, by default None If None, the last column of records is selected. None","title":"__init__()"},{"location":"record/#caret_analyze.record.latency.Latency.to_records","text":"Calculate latency records. Returns: Type Description RecordsInterface latency records. Columns - {start_timestamp_column} - {latency_column}","title":"to_records()"},{"location":"record/#caret_analyze.record.Period","text":"","title":"Period"},{"location":"record/#caret_analyze.record.period.Period.__init__","text":"Constructor. Parameters: Name Type Description Default records RecordsInterface records to calculate period. required target_column Optional [ str ], optional Column name of timestamps used in the calculation, by default None If None, the first column of records is selected. None","title":"__init__()"},{"location":"record/#caret_analyze.record.period.Period.to_records","text":"Calculate period records. Returns: Type Description RecordsInterface period records. Columns - {timestamp_column} - {period_column}","title":"to_records()"},{"location":"record/#caret_analyze.record.RecordInterface","text":"Interface for Record class. This behavior is similar to the dictionary type. To avoid conflicts with the pybind metaclass, ABC is not used.","title":"RecordInterface"},{"location":"record/#caret_analyze.record.interface.RecordInterface.add","text":"Add(Update) column value. Parameters: Name Type Description Default key str key name to set. required stamp int key value to set. required","title":"add()"},{"location":"record/#caret_analyze.record.interface.RecordInterface.change_dict_key","text":"Change columns name. Parameters: Name Type Description Default old_key str column name to be changed. required new_key str new column name. required","title":"change_dict_key()"},{"location":"record/#caret_analyze.record.interface.RecordInterface.columns","text":"Get column names. Returns: Type Description Set [ str ] Column names.","title":"columns()"},{"location":"record/#caret_analyze.record.interface.RecordInterface.data","text":"Convert to dictionary. Returns: Name Type Description data Dict [ str , int ] dictionary data.","title":"data()"},{"location":"record/#caret_analyze.record.interface.RecordInterface.drop_columns","text":"Drop columns method. Parameters: Name Type Description Default columns List [ str ] columns to be dropped. required","title":"drop_columns()"},{"location":"record/#caret_analyze.record.interface.RecordInterface.equals","text":"Compare record. Parameters: Name Type Description Default other RecordInterface comparison target. required Returns: Type Description bool True if record data is same, otherwise false.","title":"equals()"},{"location":"record/#caret_analyze.record.interface.RecordInterface.get","text":"Get value for specific column. Parameters: Name Type Description Default key str key name to get. required Returns: Type Description int Value for selected key.","title":"get()"},{"location":"record/#caret_analyze.record.interface.RecordInterface.get_with_default","text":"Get value for specific column. Parameters: Name Type Description Default key str key name to get. required v int default value. required Returns: Type Description int Value for selected key.","title":"get_with_default()"},{"location":"record/#caret_analyze.record.interface.RecordInterface.merge","text":"Merge record. Parameters: Name Type Description Default other RecordInterface merge target. required inplace bool inplace record if true, otherwise false. required Returns: Type Description Record Merged record class if inplace = false, otherwise None.","title":"merge()"},{"location":"record/#caret_analyze.record.RecordsInterface","text":"Interface for Record class. To avoid conflicts with the pybind metaclass, ABC is not used.","title":"RecordsInterface"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.append_column","text":"Append column to records. Parameters: Name Type Description Default column ColumnValue required values List [ int ] required","title":"append_column()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.bind_drop_as_delay","text":"Convert the dropped points to records converted as delay.","title":"bind_drop_as_delay()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.clone","text":"Get duplicated records. Returns: Type Description RecordsInterface deep-copied records.","title":"clone()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.columns","text":"Get column names. Returns: Type Description List [ str ] Columns.","title":"columns()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.concat","text":"Concat records. Parameters: Name Type Description Default other RecordsInterface records to be concatenated. required Returns: Type Description RecordsInterface concatenated records if inplace=False, otherwise None.","title":"concat()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.data","text":"Get records list. Returns: Type Description Sequence [ RecordInterface ] Records list.","title":"data()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.drop_columns","text":"Drop columns. Parameters: Name Type Description Default columns List [ str ] columns to be dropped. required","title":"drop_columns()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.equals","text":"Equals method. Parameters: Name Type Description Default other RecordsInterface comparison target. required Returns: Type Description bool true if record data is same, otherwise false.","title":"equals()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.filter_if","text":"Get filtered records. Parameters: Name Type Description Default f Callable [[ RecordInterface ], bool ] condition function. required inplace bool inplace original instance if true. required","title":"filter_if()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.groupby","text":"Split based on the value of the given column name.","title":"groupby()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.merge","text":"Merge records by key match. Parameters: Name Type Description Default right_records RecordInterface merge target. required join_left_key str Key to use for matching. required join_right_key str Key to use for matching. required how str merge type. [inner/right/left/outer] required progress_label str label for progress bar. cpp impl only. None Returns: Type Description RecordsInterface Examples: >>> left_records = Records ([ Record({'join_key': 1, 'left_other': 1}), Record({'join_key': 2, 'left_other': 2}), ]) >>> right_records = Records ([ Record({'join_key': 2, 'right_other': 3}), Record({'join_key': 1, 'right_other': 4}), ]) >>> expected = Records ([ Record({'join_key': 1, 'left_other': 1, 'right_other': 4}), Record({'join_key': 2, 'left_other': 2, 'right_other': 3}), ]) >>> left_records . merge ( right_records , 'join_key' ) . equals ( expected ) True","title":"merge()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.merge_sequential","text":"Merge chronologically contiguous records. Merge left_records[left_key] and the right_records[right_key] that occurred immediately after it. If join_key is set, left_records[join_key]==right_records[join_key] is added as condition. Parameters: Name Type Description Default right_records RecordsInterface merge target. required left_stamp_key str left records key name to use for comparison in time series merge. required right_stamp_key str right records key name to use for comparison in time series merge. required join_key str join key name to use equal condition. required how str merge type. [inner/right/left/outer] required progress_label str label for progress bar. cpp impl only. None","title":"merge_sequential()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.merge_sequential--records","text":"RecordsInterface Merged records. Examples: >>> left_records = Records ([ Record({'join_key': 1, 'left_stamp_key': 0}), Record({'join_key': 2, 'left_stamp_key': 3}) ]) >>> right_records = Records ([ Record({'join_key': 2, 'right_stamp_key': 5}), Record({'join_key': 1, 'right_stamp_key': 6}) ]) >>> expected = Records ([ Record({'join_key': 1, 'left_stamp_key': 0, 'right_stamp_key': 6}), Record({'join_key': 2, 'left_stamp_key': 3, 'right_stamp_key': 5}), ]) >>> left_records . merge_sequential ( right_records, 'left_stamp_key', 'right_stamp_key', 'join_key', 'inner' ).equals(expected) True","title":"Records"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.merge_sequential_for_addr_track","text":"Merge for tracking addresses when copying occurs. Parameters: Name Type Description Default source_stamp_key str key name indicating time stamp for source records required source_key str Key name indicating the address of the copy source for source records. required copy_records Recordsinterface copy records required copy_stamp_key str key name indicating time stamp for copy records required copy_from_key str Key name indicating the address of the copy source for source records. required copy_to_key str Key name indicating the address of the copy destination required sink_records RecordsInterface sink-side records required sink_stamp_key str key_name indicating time stamp for copy records required sink_from_key str Key name indicating the address of the copy destination required progress_label str label for progress bar. cpp impl only. None Returns: Type Description RecordsInterface Merged records. Examples: >>> source_records = Records ([ Record({'source_key': 1, 'source_stamp': 0}), ]) >>> copy_records = Records ([ Record({'copy_from_key': 1, 'copy_to_key': 11, 'copy_stamp_key': 1}) ]) >>> sink_records = Records ([ Record({'sink_from_key': 11, 'sink_stamp': 2}), Record({'sink_from_key': 1, 'sink_stamp': 3}), ]) >>> expected = Records ([ Record({'source_stamp':0, 'sink_stamp':3, 'source_key':1}), Record({'source_stamp':0, 'sink_stamp':2, 'source_key':1}), ]) >>> source_records . merge_sequential_for_addr_track ( 'source_stamp', 'source_key', copy_records, 'copy_stamp_key', 'copy_from_key', 'copy_to_key', sink_records, 'sink_stamp', 'sink_from_key' ).equals(expected) True","title":"merge_sequential_for_addr_track()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.reindex","text":"Reindex columns. Parameters: Name Type Description Default columns List [ str ] required","title":"reindex()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.rename_columns","text":"Rename columns. Parameters: Name Type Description Default columns Dict [ str , str ] rename params. same as dataframe rename. required","title":"rename_columns()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.sort","text":"Sort records. Parameters: Name Type Description Default key str key name to used for sort. required sub_key str second key name to used for sort. None ascending bool ascending if True, descending if false. True","title":"sort()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.sort_column_order","text":"Sort records by ordered columns. Parameters: Name Type Description Default ascending bool ascending if True, descending if false. True put_none_at_top bool True","title":"sort_column_order()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.to_dataframe","text":"Convert to pandas dataframe. Returns: Type Description pandas . DataFrame Records data.","title":"to_dataframe()"},{"location":"record/#caret_analyze.record.ResponseTime","text":"Class which calculates response time. Parameters: Name Type Description Default records RecordsInterface records to calculate response time. required input_column str column name for input time. None output_column str column name for output time. None Examples: >>> from caret_analyze import Application , Architecture , Lttng >>> from caret_analyze.experiment import ResponseTime >>> # Load results >>> arch = Architecture ( 'yaml' , '/path/to/yaml' ) >>> lttng = Lttng ( '/path/to/ctf' ) >>> app = Application ( arch , lttng ) >>> # Select target instance >>> node = app . get_node ( 'node_name' ) >>> callback = node . callbacks [ 0 ] >>> callback . summary . pprint () >>> # Calculate response time >>> records = callback . to_records () >>> response = ResponseTime ( records ) >>> response_records = response . to_response_records () >>> response_df = response_records . to_dataframe () >>> path = app . get_path ( 'path_name' ) >>> records = path . to_records () >>> response = ResponseTime ( records ) >>> response_records = response . to_response_records () >>> response_df = response_records . to_dataframe ()","title":"ResponseTime"},{"location":"record/#caret_analyze.record.response_time.ResponseTime.__init__","text":"Construct an instance. Parameters: Name Type Description Default records RecordsInterface records to calculate response time. required input_column Optional [ str ], optional column name which is input, by default None If None, the first column of records is selected. None output_column Optional [ str ], optional column name which is output, by default None If None, the last column of records is selected. None","title":"__init__()"},{"location":"record/#caret_analyze.record.response_time.ResponseTime.to_best_case_histogram","text":"Calculate the best-case histogram for response time. The best case for response time are included message flow latency. Returns: Type Description Tuple [ np . ndarray , np . ndarray ] frequency, latencies[ns]. ref. https://numpy.org/doc/stable/reference/generated/numpy.histogram.html","title":"to_best_case_histogram()"},{"location":"record/#caret_analyze.record.response_time.ResponseTime.to_best_case_timeseries","text":"Calculate the best-case time series data for response time. The best case for response time are included message flow latency. Returns: Type Description Tuple [ np . ndarray , np . ndarray ] input time[ns], latency[ns]","title":"to_best_case_timeseries()"},{"location":"record/#caret_analyze.record.response_time.ResponseTime.to_histogram","text":"Calculate response time histogram. Parameters: Name Type Description Default binsize_ns int , optional binsize [ns], by default 1000000 1000000 density bool , optional If False, the result will contain the number of samples in each bin. If True, the result is the value of the probability density function at the bin, normalized such that the integral over the range is 1. Note that the sum of the histogram values will not be equal to 1 unless bins of unity width are chosen; it is not a probability mass function. False Returns: Type Description Tuple [ np . ndarray , np . ndarray ] frequency, latencies[ns]. ref. https://numpy.org/doc/stable/reference/generated/numpy.histogram.html","title":"to_histogram()"},{"location":"record/#caret_analyze.record.response_time.ResponseTime.to_records","text":"Calculate response time records. Parameters: Name Type Description Default all_pattern bool , optional If True, get response times with time overlap, by default False. [for debug] False Returns: Type Description RecordsInterface response time records. The best and worst cases alternate line by line. Columns - {input_column} - {output_column}","title":"to_records()"},{"location":"record/#caret_analyze.record.response_time.ResponseTime.to_response_records","text":"Calculate response records. Returns: Type Description RecordsInterface The best and worst cases are separated into separate columns. Columns - {input_column}_min - {input_column}_max - {output_column}","title":"to_response_records()"},{"location":"record/#caret_analyze.record.response_time.ResponseTime.to_worst_case_histogram","text":"Calculate the worst-case histogram for response time. The worst case in response time includes message flow latencies as well as delays caused by various factors such as lost messages. Returns: Type Description Tuple [ np . ndarray , np . ndarray ] frequency, latencies[ns]. ref. https://numpy.org/doc/stable/reference/generated/numpy.histogram.html","title":"to_worst_case_histogram()"},{"location":"record/#caret_analyze.record.response_time.ResponseTime.to_worst_case_timeseries","text":"Calculate the worst-case time series data for response time. The worst case in response time includes message flow latencies as well as delays caused by various factors such as lost messages. Returns: Type Description Tuple [ np . ndarray , np . ndarray ] input time[ns], latency[ns]","title":"to_worst_case_timeseries()"},{"location":"runtime/","text":"CARET runtime package. This package provides a set of classes with static (e.g., node names) and dynamic information (e.g., execution times). It has a ROS-friendly class structure that allows application developers to obtain the information they need for evaluation. Application # Bases: Summarizable A class that represents the entire application to be measured. __init__ ( architecture , infra ) # Construct an instance. Parameters: Name Type Description Default architecture Architecture Application architecture to be evaluated. required infra InfraBase Measurement results. required Raises: Type Description UnsupportedTypeError Occurs when the invalid infra is given. callback_group_names () property # Get callback group names. Returns: Type Description List [ str ] All callback group names defined in the architecture. callback_groups () property # Get callback groups. Returns: Type Description List [ CallbackGroup ] All callback groups defined in the architecture. callback_names () property # Get callback names. Returns: Type Description List [ str ] All callback names defined in the architecture. callbacks () property # Get callbacks. Returns: Type Description List [ CallbackBase ] All callbacks defined in the architecture. communications () property # Get communications. Returns: Type Description List [ Communication ] All communications defined in the architecture. executor_names () property # Get executor names. Returns: Type Description List [ str ] All executor names defined in the architecture. executors () property # Get executors. Returns: Type Description List [ Executor ] All executors defined in the architecture. get_callback ( callback_name ) # Get a callback that matches the condition. Parameters: Name Type Description Default callback_name str callback name to get. required Returns: Type Description CallbackBase callback that matches the condition. Raises: Type Description InvalidArgumentError Occurs when the given argument type is invalid. ItemNotFoundError Occurs when no items were found. MultipleItemFoundError Occurs when several items were found. get_callback_group ( callback_group_name ) # Get a callback group that matches the condition. Parameters: Name Type Description Default callback_group_name str callback group name to get. required Returns: Type Description CallbackBase callback group that matches the condition. Raises: Type Description InvalidArgumentError Given argument type is invalid. ItemNotFoundError Failed to find an item that matches the condition. MultipleItemFoundError Failed to identify an item that matches the condition. get_callbacks ( * callback_names ) # Get callbacks that match the condition. Parameters: Name Type Description Default callback_names Tuple [ str , ...] callback names to get. required Returns: Type Description List [ CallbackBase ] callbacks that match the condition. Raises: Type Description InvalidArgumentError Occurs when the given argument type is invalid. ItemNotFoundError Occurs when no items were found. MultipleItemFoundError Occurs when several items were found. get_communication ( publisher_node_name , subscription_node_name , topic_name ) # Get communication that matches the condition. Parameters: Name Type Description Default publisher_node_name str node name that publishes the topic. required subscription_node_name str node name that subscribes to the topic. required topic_name str topic name. required Returns: Type Description Communication communication that matches the condition. Raises: Type Description InvalidArgumentError Given argument type is invalid. ItemNotFoundError Failed to find an item that matches the condition. MultipleItemFoundError Failed to identify an item that matches the condition. get_communications ( topic_name ) # Get communication that matches the condition. Parameters: Name Type Description Default topic_name str topic name to get. required Returns: Type Description List [ Communication ] communications that match the condition. Raises: Type Description InvalidArgumentError Occurs when the given argument type is invalid. ItemNotFoundError Failed to find an item that matches the condition. get_executor ( executor_name ) # Get an executor that matches the condition. Parameters: Name Type Description Default executor_name str executor name to get. The name is defined in the architecture file (ex: executor_0). required Returns: Type Description Executor executor that matches the condition. Raises: Type Description InvalidArgumentError Given argument type is invalid. ItemNotFoundError Failed to find an item that matches the condition. MultipleItemFoundError Failed to identify an item that matches the condition. get_node ( node_name ) # Get a node that matches the condition. Parameters: Name Type Description Default node_name str node name to get. required Returns: Type Description Node A node that matches the condition. Raises: Type Description InvalidArgumentError Occurs when the given argument type is invalid. ItemNotFoundError Occurs when no items were found. MultipleItemFoundError Occurs when several items were found. get_node_path ( node_name , subscribe_topic_name , publish_topic_name ) # Get a node path that matches the condition. Parameters: Name Type Description Default node_name str node name to get. required subscribe_topic_name Optional [ str ] topic name which the node subscribes. required publish_topic_name Optional [ str ] topic name which the node publishes. required Returns: Type Description NodePathStructValue node path that matches the condition. Raises: Type Description InvalidArgumentError Occurs when the given argument type is invalid. ItemNotFoundError Occurs when no items were found. MultipleItemFoundError Occurs when several items were found. get_node_paths ( node_name ) # Get node paths. Parameters: Name Type Description Default node_name str node name to get. required Returns: Type Description List [ NodePathStructValue ] node paths that match the condition. Raises: Type Description InvalidArgumentError Occurs when the given argument type is invalid. get_path ( path_name ) # Get a path that matches the condition. Parameters: Name Type Description Default path_name str path name to get. paths and their names are defined in the architecture. required Returns: Type Description Path A path that matches the condition. Raises: Type Description InvalidArgumentError Occurs when the given argument type is invalid. ItemNotFoundError Occurs when no items were found. MultipleItemFoundError Occurs when several items were found. get_publishers ( topic_name ) # Get publishers that match the condition. Parameters: Name Type Description Default topic_name str topic name to get. required Returns: Type Description List [ Publisher ] publishers that match the condition. Raises: Type Description InvalidArgumentError Occurs when the given argument type is invalid. ItemNotFoundError Failed to find an item that matches the condition. get_subscriptions ( topic_name ) # Get subscriptions that match the condition. Parameters: Name Type Description Default topic_name str topic name to get. required Returns: Type Description List [ Publisher ] subscriptions that match the condition. Raises: Type Description InvalidArgumentError Occurs when the given argument type is invalid. ItemNotFoundError Failed to find an item that matches the condition. node_names () property # Get node names. Returns: Type Description List [ str ] All node names defined in the architecture. node_paths () property # Get paths. Returns: Type Description List [ NodePathStructValue ] app node paths defined in the entire application. nodes () property # Get nodes. Returns: Type Description List [ Node ] All nodes defined in the architecture. path_names () property # Get path names. Returns: Type Description List [ str ] App path names defined in the architecture. paths () property # Get paths. Returns: Type Description List [ Path ] All paths defined in the architecture. summary () property # Get summary [override]. Returns: Type Description Summary Summary info. topic_names () property # Get topic names. Returns: Type Description List [ str ] All topic names defined in architecture. CallbackBase # Bases: PathBase , Summarizable A base class that represents callback. __init__ ( info , records_provider , subscription , publishers , timer ) # Construct an instance. Parameters: Name Type Description Default info CallbackStructValue static info. required records_provider RecordsProvider provider to be evaluated. required subscription Optional [ Subscription ] None except for subscription callbacks. required publishers Optional [ List [ Publisher ]] publishers to which the callback publishes. required timer Optional [ Timer ] None except for timer callbacks. required callback_name () property # Get callback name defined in the architecture. Returns: Type Description str callback name defined in architecture. callback_type () property # Get callback type. Returns: Type Description CallbackType callback type. node_name () property # Get node name. Returns: Type Description str node name containing this callback. publish_topic_names () property # Get publisher topic names. Returns: Type Description Optional [ List [ str ]] topic name list to be published by the callback. publishers () property # Get publishers. Returns: Type Description Optional [ List [ Publisher ]] publishers to which the callback publishes. subscribe_topic_name () property # Get subscription topic name. Returns: Type Description Optional [ str ] topic name to be subscribed by the callback. None except for subscription callback. subscription () property # Get subscription. Returns: Type Description Optional [ Subscription ] subscription which the callback is attached. None except for subscription callback. summary () property # Get summary [override]. Returns: Type Description Summary summary info. symbol () property # Get callback symbol name. Returns: Type Description str callback function symbol name. timer () property # Get timer. Returns: Type Description Optional [ Timer ] timer which the callback is attached. None except for timer callback. CallbackGroup # Bases: Summarizable A class that represents the callback group. __init__ ( callback_group_info , callbacks ) # Construct an instance. Parameters: Name Type Description Default callback_group_info CallbackGroupStructValue static information. required callbacks List [ CallbackBase ] callbacks to be added to the callback group. required callback_group_name () property # Get callback group name. Returns: Type Description str callback group name defined in the architecture. callback_group_type () property # Get callback_group_type. Returns: Name Type Description CallbackGroupType CallbackGroupType REENTRANT / MUTUALLY_EXCLUSIVE callback_group_type_name () property # Get callback_group_type name. Returns: Type Description CallbackGroupType name 'reentrant' / 'mutually_exclusive' callbacks () property # Get callbacks. Returns: Type Description List [ CallbackBase ] callbacks which are contained in this callback group. get_callback ( callback_name ) # Get a callback that matches the condition. Parameters: Name Type Description Default callback_name str callback name to get. required Returns: Type Description CallbackBase callback that matches the condition. Raises: Type Description InvalidArgumentError Occurs when the given argument type is invalid. ItemNotFoundError Occurs when no items were found. MultipleItemFoundError Occurs when several items were found. get_callbacks ( * callback_names ) # Get callbacks that match the condition. Returns: Type Description List [ CallbackBase ] callbacks that match the condition. node_name () property # Get node name. Returns: Type Description str node name which is contained this callback group. summary () property # Get summary [override]. Returns: Type Description Summary summary info. Communication # Bases: PathBase , Summarizable Class that represents topic communication. __init__ ( node_publish , node_subscription , publisher , subscription , communication_value , records_provider , callbacks_publish , callback_subscription ) # Construct an instance. Parameters: Name Type Description Default node_publish Node publish node. required node_subscription Node subscribe node required publisher Publisher publisher required subscription Subscription subscription required communication_value CommunicationStructValue static info. required records_provider Union [ RecordsProvider , RuntimeDataProvider , None] provider to be evaluated. required callbacks_publish Optional [ List [ CallbackBase ]] required callback_subscription Optional [ CallbackBase ] required callback_publish () property # Get publisher callback. Returns: Type Description Optional [ List [ CallbackBase ]] callback which publishes this communication. callback_subscription () property # Get subscribe callback. Returns: Type Description Optional [ CallbackBase ] callback to which subscribe this communication. is_intra_proc_comm () property # Get whether this communication is intra-process-communication. Returns: Type Description Optional [ bool ] True when intra-process-communication. otherwise False. publish_node () property # Get publish node. Returns: Type Description Node A node that publishes this communication. publish_node_name () property # Get publish node name. Returns: Type Description str node name which publishes this communication. publisher () property # Get publisher. Returns: Type Description Publisher publisher to publish this communication. rmw_implementation () property # Get rmw implementation. Returns: Type Description Optional [ str ] rmw implementation. subscribe_node () property # Get subscribe node. Returns: Type Description Node node to which subscribes this communication. subscribe_node_name () property # Get subscribe node name. Returns: Type Description str node name which subscribes to this communication. subscription () property # Get subscription. Returns: Type Description Subscription subscription to subscribe to this communication. summary () property # Get summary [override]. Returns: Type Description Summary summary info. topic_name () property # Get a topic name. Returns: Type Description str topic name of this communication. verify () # Verify whether latency can be generated. Returns: Type Description bool True if valid. Otherwise False. Executor # Bases: Summarizable Class that represents executor. __init__ ( executor_value , callback_groups ) # Construct an instance. Parameters: Name Type Description Default executor_value ExecutorStructValue Static info. required callback_groups List [ CallbackGroup ] Callback groups added to the executor. required callback_group_names () property # Get callback group names. Returns: Type Description List [ str ] Callback group names added to the executor. callback_groups () property # Get callback groups. Returns: Type Description List [ CallbackGroup ] Callback groups added to the executor. callback_names () property # Get callback names. Returns: Type Description List [ str ] callback names added to the executor. callbacks () property # Get callbacks. Returns: Type Description List [ CallbackBase ] Callbacks added to the executor. executor_name () property # Get executor name. Returns: Type Description str executor name defined in the architecture. executor_type () property # Get executor type. Returns: Type Description ExecutorType executor type. get_callback ( callback_name ) # Get callback. Parameters: Name Type Description Default callback_name str callback name to get. required Returns: Type Description CallbackBase callback that matches the condition. Raises: Type Description InvalidArgumentError Occurs when the given argument type is invalid. ItemNotFoundError Occurs when no items were found. MultipleItemFoundError Occurs when several items were found. get_callback_group ( callback_group_name ) # Get callback group. Parameters: Name Type Description Default callback_group_name str callback group name to get. required Returns: Type Description CallbackGroup Callback group that matches the condition. Raises: Type Description InvalidArgumentError Occurs when the given argument type is invalid. ItemNotFoundError Occurs when no items were found. MultipleItemFoundError Occurs when several items were found. get_callbacks ( * callback_names ) # Get callbacks. Returns: Type Description List [ CallbackBase ] callbacks that match the condition. summary () property # Get summary [override]. Returns: Type Description Summary summary info. Node # Bases: Summarizable A class that represents a node. __init__ ( node , publishers , subscription , timers , node_paths , callback_groups , variable_passings ) # Construct an instance. Parameters: Name Type Description Default node NodeStructValue static info required publishers List [ Publisher ] publishers in the node. required subscription List [ Subscription ] subscriptions in the node. required timers List [ Timer ] timers in the node. required node_paths List [ NodePath ] node paths in the node. required callback_groups Optional [ List [ CallbackGroup ]] callback groups in the node. required variable_passings Optional [ List [ VariablePassing ]] variable passings in the node. required callback_group_names () property # Get callback group names. Returns: Type Description Optional [ List [ str ]] callback group names that the node contains. callback_groups () property # Get callback groups. Returns: Type Description Optional [ List [ CallbackGroup ]] callback groups that the node contains. callback_names () property # Get callback names. Returns: Type Description Optional [ List [ str ]] callback names that the node contains. callbacks () property # Get callbacks. Returns: Type Description Optional [ List [ CallbackBase ]] callbacks that the node contains. get_callback ( callback_name ) # Get callback. Parameters: Name Type Description Default callback_name str callback name to get. required Returns: Type Description CallbackBase callback that matches the condition. Raises: Type Description InvalidArgumentError Occurs when the given argument type is invalid. ItemNotFoundError Occurs when no items were found. MultipleItemFoundError Occurs when several items were found. get_callback_group ( callback_group_name ) # Get callback group. Parameters: Name Type Description Default callback_group_name str callback group name to get. required Returns: Type Description CallbackGroup callback group that matches the condition. Raises: Type Description InvalidArgumentError Occurs when the given argument type is invalid. ItemNotFoundError Occurs when no items were found. MultipleItemFoundError Occurs when several items were found. get_callbacks ( * callback_names ) # Get callbacks. Parameters: Name Type Description Default callback_names callback names to get. required Returns: Type Description List [ CallbackBase ] callbacks that match the condition. Raises: Type Description InvalidArgumentError Occurs when the given argument type is invalid. ItemNotFoundError Occurs when no items were found. get_path ( subscribe_topic_name , publish_topic_name ) # Get node path. Parameters: Name Type Description Default subscribe_topic_name Optional [ str ] topic name to which the node subscribes. required publish_topic_name Optional [ str ] topic name to which the node publishes. required Returns: Type Description NodePath node path that matches the condition. Raises: Type Description InvalidArgumentError Occurs when the given argument type is invalid. ItemNotFoundError Occurs when no items were found. MultipleItemFoundError Occurs when several items were found. get_publisher ( topic_name ) # Get publisher. Parameters: Name Type Description Default topic_name str publisher topic name to get. required Returns: Type Description Publisher A publisher that matches the condition. Raises: Type Description InvalidArgumentError Occurs when the given argument type is invalid. ItemNotFoundError Occurs when no items were found. MultipleItemFoundError Occurs when several items were found. get_subscription ( topic_name ) # Get subscription. Parameters: Name Type Description Default topic_name str topic name to get. required Returns: Type Description Subscription Subscription instance that matches the condition. Raises: Type Description InvalidArgumentError Occurs when the given argument type is invalid. ItemNotFoundError Occurs when no items were found. MultipleItemFoundError Occurs when several items were found. node_name () property # Get node name. Returns: Type Description str node name. paths () property # Get node paths. Node paths are defined by subscription and publisher pair. Returns: Type Description List [ NodePath ] node paths that the node contains. publish_topic_names () property # Get topic names the node publishes. Returns: Type Description List [ str ] topic names that the node publishes to. publishers () property # Get publishers. Returns: Type Description List [ Publisher ] publishers used by the node. subscribe_topic_names () property # Get subscribe topic names. Returns: Type Description List [ str ] topic names to which the node subscribes. subscriptions () property # Get subscriptions the node subscribes. Returns: Type Description List [ Subscription ] subscriptions that the node subscribes to. summary () property # Get summary [override]. Returns: Type Description Summary summary info. timers () property # Get timers. Returns: Type Description List [ Timer ] timers that the node contains. variable_passings () property # Get variable passings. Returns: Type Description Optional [ List [ VariablePassing ]] Variable passings that the node contains. NodePath # Bases: PathBase , Summarizable A class that represents a path inside a node. Node path is defined as subscription-publisher pair. subscribe-publish policies are defined as \"message context\" __init__ ( node_path_value , records_provider , subscription , publisher , callbacks ) # Construct an instance. Parameters: Name Type Description Default node_path_value NodePathStructValue static info. required records_provider RecordsProvider provider to be evaluated. required subscription Optional [ Subscription ] node path subscription required publisher Optional [ Publisher ] node path publisher required callbacks Optional [ List [ CallbackBase ]] Callbacks in node path. Needed only if message context is CallbackChain. required callbacks () property # Get callbacks. Returns: Type Description Optional [ List [ CallbackBase ]] Callbacks in node path. None except for message context is callback chain. message_context () property # Get message context. Returns: Type Description Optional [ MessageContext ] message context for this node path. node_name () property # Get node name. Returns: Type Description str Node name which contains this node path. publish_topic_name () property # Get a topic name to publish. Returns: Type Description Optional [ str ] topic name to publish. publisher () property # Get publisher. Returns: Type Description Optional [ Publisher ] node path publisher. subscribe_topic_name () property # Get a topic name to subscribe to. Returns: Type Description Optional [ str ] topic name to subscribe to. subscription () property # Get a subscription. Returns: Type Description Optional [ Subscription ] subscription to subscribe to. summary () property # Get summary [override]. Returns: Type Description Summary summary info. Path # Bases: PathBase , Summarizable A class that represents a path. A single path is composed of node paths and communications. __init__ ( path , child , callbacks ) # Construct an instance. Parameters: Name Type Description Default path PathStructValue static info required child List [ Union [ NodePath , Communication ]] path children's which compose path (node paths and communications). required callbacks Optional [ List [ CallbackBase ]] callbacks that compose the path. return None except for all of node paths are not callback-chain. required callback_chain () property # Get callback chain. Returns: Type Description Optional [ List [ CallbackBase ]] callbacks that compose the path. return None except for all of the node paths are callback chains. callbacks () property # Get callbacks. Returns: Type Description List [ CallbackBase ] callbacks in all nodes that comprise the node path. child () property # Get path children. Returns: Type Description List [ Union [ NodePath , Communication ]] node paths and communications in the target path. node paths and communications are alternately contained. child_names () property # Get path children's names. Returns: Type Description List [ str ] node names and topic names in the target path. clear_cache () # Clear to_records/to_dataframe cache. communications () property # Get communications. Returns: Type Description List [ Communication ] Communications in target path. node_names () property # Get node names. Returns: Type Description List [ str ] node names in the target path. node_paths () property # Get node-paths. Returns: Type Description List [ NodePath ] node paths in target path. path_name () property # Get path name. Returns: Type Description Optional [ str ] Path name defined in the architecture. summary () property # Get summary [override]. Returns: Type Description Summary summary info. topic_names () property # Get topic names. Returns: Type Description List [ str ] topic names in the target path. verify () # Verify whether the path can generate latencies. Returns: Type Description bool True if both architecture and measurement results are valid, otherwise false. PathBase # Base class for Latency. column_names () property # Get column names. Returns: Type Description List [ str ] column names to_dataframe ( remove_dropped = False , treat_drop_as_delay = False , lstrip_s = 0 , rstrip_s = 0 , * , shaper = None ) # Calculate dataframe. Parameters: Name Type Description Default remove_dropped If true, eliminate the records that caused the drop. False treat_drop_as_delay Convert dropped records as a delay. Valid only when remove_dropped=false. False lstrip Remove from beginning. [s] required rstrip Remove from end [s] required Returns: Type Description pandas . DataFrame Execution time of each operation. to_histogram ( binsize_ns = 1000000 , treat_drop_as_delay = False , lstrip_s = 0 , rstrip_s = 0 , * , shaper = None ) # Calculate histogram data. Parameters: Name Type Description Default binsize_ns int bin size for histogram. default 1ms. 1000000 treat_drop_as_delay bool Convert dropped records as a delay. False lstrip Remove from beginning. [s] required rstrip Remove from end [s] required Returns: Type Description Tuple [ np . ndarray , np . ndarray ] frequency, latency[ns] len(frequency)+1 == len(latency) See Also # https://numpy.org/doc/stable/reference/generated/numpy.histogram.html to_records () # Calculate records. Returns: Type Description RecordsInterface Execution time of each operation. to_timeseries ( remove_dropped = False , treat_drop_as_delay = False , lstrip_s = 0 , rstrip_s = 0 , * , shaper = None ) # Calculate timeseries data. Parameters: Name Type Description Default remove_dropped Optional [ bool ] If true, eliminate the records that caused the drop. default: False. False treat_drop_as_delay Optional [ bool ] Convert dropped records as a delay. Valid only when remove_dropped=false. default: False. False lstrip Remove from beginning. [s] default: 0 required rstrip Remove from end [s] default: 0 required Returns: Type Description Tuple [ np . ndarray , np . ndarray ] time[ns], latency[ns] len(time) == len(latency) Publisher # Bases: PathBase , Summarizable Class that represents publisher. __init__ ( publisher , provider ) # Construct an instance. Parameters: Name Type Description Default publisher PublisherStructValue static info. required provider Union [ RecordsProvider , RuntimeDataProvider ] provider to be evaluated. required callback_names () property # Get callback names. Returns: Type Description Optional [ List [ str ]] Callback names which uses the publisher to publish. node_name () property # Get node name. Returns: Type Description str node name which contains the publisher. qos () property # Get QoS. Returns: Type Description Optional [ Qos ] Publisher QoS summary () property # Get summary [override]. Returns: Type Description Summary summary info. topic_name () property # Get a topic name. Returns: Type Description str A topic name that the publisher publishes. Subscription # Bases: PathBase , Summarizable A class that represents subscription. __init__ ( val , data_provider ) # Construct an instance. Parameters: Name Type Description Default val SubscriptionStructValue static info. required data_provider Union [ RecordsProvider , RuntimeDataProvider ] provider to be evaluated. required callback_name () property # Get a subscription callback name. Returns: Type Description Optional [ str ] callback name to which the subscription is attached. node_name () property # Get node name. Returns: Type Description str node name to which the subscription subscribes. qos () property # Get QoS. Returns: Type Description Optional [ Qos ] Subscription QoS. summary () property # Get summary [override]. Returns: Type Description Summary summary info. topic_name () property # Get a topic name. Returns: Type Description str A topic name to which the subscription subscribes. SubscriptionCallback # Bases: CallbackBase A class that represents subscription callback. __init__ ( callback_info , records_provider , subscription , publishers = None ) # Construct an instance. Parameters: Name Type Description Default callback_info SubscriptionCallbackStructValue static info. required records_provider RecordsProvider provider to be evaluated. required subscription Subscription subscription to which callback subscribes. required publishers Optional [ List [ Publisher ]] publishers to which the callback publishers None Timer # Bases: PathBase , Summarizable A class that represents timer. __init__ ( val , data_provider ) # Construct an instance. Parameters: Name Type Description Default val TimerStructValue static info. required data_provider Union [ RecordsProvider , RuntimeDataProvider ] provider to be evaluated. required callback_name () property # Get callback name. Returns: Type Description Optional [ str ] callback name defined in the architecture. node_name () property # Get node name. Returns: Type Description str node name which defines the timer. period_ns () property # Get timer period. Returns: Type Description int timer period [ns]. summary () property # Get summary [override]. Returns: Type Description Summary summary info. TimerCallback # Bases: CallbackBase Class that represents timer callback. __init__ ( callback , records_provider , publishers , timer ) # Construct an instance. Parameters: Name Type Description Default callback TimerCallbackStructValue static info. required records_provider RecordsProvider provider to be evaluated. required publishers Optional [ List [ Publisher ]] publishers to which the callback publishers required timer Timer timer required period_ns () property # Get timer period. Returns: Type Description int timer period [ns]. VariablePassing # Bases: PathBase , Summarizable __init__ ( variable_passing , records_provider ) # Construct an instance. Parameters: Name Type Description Default variable_passing VariablePassingStructValue static info. required records_provider RecordsProvider provider to be evaluated. required callback_name_read () property # Get read side callback name. Returns: Type Description [ str ] read-side callback name. callback_name_write () property # Get write side callback name. Returns: Type Description [ str ] write-side callback name. node_name () property # Get node name. Returns: Type Description str node name which has the variable passing. summary () property # Get summary [override]. Returns: Type Description Summary summary info.","title":"runtime"},{"location":"runtime/#caret_analyze.runtime.Application","text":"Bases: Summarizable A class that represents the entire application to be measured.","title":"Application"},{"location":"runtime/#caret_analyze.runtime.application.Application.__init__","text":"Construct an instance. Parameters: Name Type Description Default architecture Architecture Application architecture to be evaluated. required infra InfraBase Measurement results. required Raises: Type Description UnsupportedTypeError Occurs when the invalid infra is given.","title":"__init__()"},{"location":"runtime/#caret_analyze.runtime.application.Application.callback_group_names","text":"Get callback group names. Returns: Type Description List [ str ] All callback group names defined in the architecture.","title":"callback_group_names()"},{"location":"runtime/#caret_analyze.runtime.application.Application.callback_groups","text":"Get callback groups. Returns: Type Description List [ CallbackGroup ] All callback groups defined in the architecture.","title":"callback_groups()"},{"location":"runtime/#caret_analyze.runtime.application.Application.callback_names","text":"Get callback names. Returns: Type Description List [ str ] All callback names defined in the architecture.","title":"callback_names()"},{"location":"runtime/#caret_analyze.runtime.application.Application.callbacks","text":"Get callbacks. Returns: Type Description List [ CallbackBase ] All callbacks defined in the architecture.","title":"callbacks()"},{"location":"runtime/#caret_analyze.runtime.application.Application.communications","text":"Get communications. Returns: Type Description List [ Communication ] All communications defined in the architecture.","title":"communications()"},{"location":"runtime/#caret_analyze.runtime.application.Application.executor_names","text":"Get executor names. Returns: Type Description List [ str ] All executor names defined in the architecture.","title":"executor_names()"},{"location":"runtime/#caret_analyze.runtime.application.Application.executors","text":"Get executors. Returns: Type Description List [ Executor ] All executors defined in the architecture.","title":"executors()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_callback","text":"Get a callback that matches the condition. Parameters: Name Type Description Default callback_name str callback name to get. required Returns: Type Description CallbackBase callback that matches the condition. Raises: Type Description InvalidArgumentError Occurs when the given argument type is invalid. ItemNotFoundError Occurs when no items were found. MultipleItemFoundError Occurs when several items were found.","title":"get_callback()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_callback_group","text":"Get a callback group that matches the condition. Parameters: Name Type Description Default callback_group_name str callback group name to get. required Returns: Type Description CallbackBase callback group that matches the condition. Raises: Type Description InvalidArgumentError Given argument type is invalid. ItemNotFoundError Failed to find an item that matches the condition. MultipleItemFoundError Failed to identify an item that matches the condition.","title":"get_callback_group()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_callbacks","text":"Get callbacks that match the condition. Parameters: Name Type Description Default callback_names Tuple [ str , ...] callback names to get. required Returns: Type Description List [ CallbackBase ] callbacks that match the condition. Raises: Type Description InvalidArgumentError Occurs when the given argument type is invalid. ItemNotFoundError Occurs when no items were found. MultipleItemFoundError Occurs when several items were found.","title":"get_callbacks()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_communication","text":"Get communication that matches the condition. Parameters: Name Type Description Default publisher_node_name str node name that publishes the topic. required subscription_node_name str node name that subscribes to the topic. required topic_name str topic name. required Returns: Type Description Communication communication that matches the condition. Raises: Type Description InvalidArgumentError Given argument type is invalid. ItemNotFoundError Failed to find an item that matches the condition. MultipleItemFoundError Failed to identify an item that matches the condition.","title":"get_communication()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_communications","text":"Get communication that matches the condition. Parameters: Name Type Description Default topic_name str topic name to get. required Returns: Type Description List [ Communication ] communications that match the condition. Raises: Type Description InvalidArgumentError Occurs when the given argument type is invalid. ItemNotFoundError Failed to find an item that matches the condition.","title":"get_communications()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_executor","text":"Get an executor that matches the condition. Parameters: Name Type Description Default executor_name str executor name to get. The name is defined in the architecture file (ex: executor_0). required Returns: Type Description Executor executor that matches the condition. Raises: Type Description InvalidArgumentError Given argument type is invalid. ItemNotFoundError Failed to find an item that matches the condition. MultipleItemFoundError Failed to identify an item that matches the condition.","title":"get_executor()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_node","text":"Get a node that matches the condition. Parameters: Name Type Description Default node_name str node name to get. required Returns: Type Description Node A node that matches the condition. Raises: Type Description InvalidArgumentError Occurs when the given argument type is invalid. ItemNotFoundError Occurs when no items were found. MultipleItemFoundError Occurs when several items were found.","title":"get_node()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_node_path","text":"Get a node path that matches the condition. Parameters: Name Type Description Default node_name str node name to get. required subscribe_topic_name Optional [ str ] topic name which the node subscribes. required publish_topic_name Optional [ str ] topic name which the node publishes. required Returns: Type Description NodePathStructValue node path that matches the condition. Raises: Type Description InvalidArgumentError Occurs when the given argument type is invalid. ItemNotFoundError Occurs when no items were found. MultipleItemFoundError Occurs when several items were found.","title":"get_node_path()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_node_paths","text":"Get node paths. Parameters: Name Type Description Default node_name str node name to get. required Returns: Type Description List [ NodePathStructValue ] node paths that match the condition. Raises: Type Description InvalidArgumentError Occurs when the given argument type is invalid.","title":"get_node_paths()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_path","text":"Get a path that matches the condition. Parameters: Name Type Description Default path_name str path name to get. paths and their names are defined in the architecture. required Returns: Type Description Path A path that matches the condition. Raises: Type Description InvalidArgumentError Occurs when the given argument type is invalid. ItemNotFoundError Occurs when no items were found. MultipleItemFoundError Occurs when several items were found.","title":"get_path()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_publishers","text":"Get publishers that match the condition. Parameters: Name Type Description Default topic_name str topic name to get. required Returns: Type Description List [ Publisher ] publishers that match the condition. Raises: Type Description InvalidArgumentError Occurs when the given argument type is invalid. ItemNotFoundError Failed to find an item that matches the condition.","title":"get_publishers()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_subscriptions","text":"Get subscriptions that match the condition. Parameters: Name Type Description Default topic_name str topic name to get. required Returns: Type Description List [ Publisher ] subscriptions that match the condition. Raises: Type Description InvalidArgumentError Occurs when the given argument type is invalid. ItemNotFoundError Failed to find an item that matches the condition.","title":"get_subscriptions()"},{"location":"runtime/#caret_analyze.runtime.application.Application.node_names","text":"Get node names. Returns: Type Description List [ str ] All node names defined in the architecture.","title":"node_names()"},{"location":"runtime/#caret_analyze.runtime.application.Application.node_paths","text":"Get paths. Returns: Type Description List [ NodePathStructValue ] app node paths defined in the entire application.","title":"node_paths()"},{"location":"runtime/#caret_analyze.runtime.application.Application.nodes","text":"Get nodes. Returns: Type Description List [ Node ] All nodes defined in the architecture.","title":"nodes()"},{"location":"runtime/#caret_analyze.runtime.application.Application.path_names","text":"Get path names. Returns: Type Description List [ str ] App path names defined in the architecture.","title":"path_names()"},{"location":"runtime/#caret_analyze.runtime.application.Application.paths","text":"Get paths. Returns: Type Description List [ Path ] All paths defined in the architecture.","title":"paths()"},{"location":"runtime/#caret_analyze.runtime.application.Application.summary","text":"Get summary [override]. Returns: Type Description Summary Summary info.","title":"summary()"},{"location":"runtime/#caret_analyze.runtime.application.Application.topic_names","text":"Get topic names. Returns: Type Description List [ str ] All topic names defined in architecture.","title":"topic_names()"},{"location":"runtime/#caret_analyze.runtime.CallbackBase","text":"Bases: PathBase , Summarizable A base class that represents callback.","title":"CallbackBase"},{"location":"runtime/#caret_analyze.runtime.callback.CallbackBase.__init__","text":"Construct an instance. Parameters: Name Type Description Default info CallbackStructValue static info. required records_provider RecordsProvider provider to be evaluated. required subscription Optional [ Subscription ] None except for subscription callbacks. required publishers Optional [ List [ Publisher ]] publishers to which the callback publishes. required timer Optional [ Timer ] None except for timer callbacks. required","title":"__init__()"},{"location":"runtime/#caret_analyze.runtime.callback.CallbackBase.callback_name","text":"Get callback name defined in the architecture. Returns: Type Description str callback name defined in architecture.","title":"callback_name()"},{"location":"runtime/#caret_analyze.runtime.callback.CallbackBase.callback_type","text":"Get callback type. Returns: Type Description CallbackType callback type.","title":"callback_type()"},{"location":"runtime/#caret_analyze.runtime.callback.CallbackBase.node_name","text":"Get node name. Returns: Type Description str node name containing this callback.","title":"node_name()"},{"location":"runtime/#caret_analyze.runtime.callback.CallbackBase.publish_topic_names","text":"Get publisher topic names. Returns: Type Description Optional [ List [ str ]] topic name list to be published by the callback.","title":"publish_topic_names()"},{"location":"runtime/#caret_analyze.runtime.callback.CallbackBase.publishers","text":"Get publishers. Returns: Type Description Optional [ List [ Publisher ]] publishers to which the callback publishes.","title":"publishers()"},{"location":"runtime/#caret_analyze.runtime.callback.CallbackBase.subscribe_topic_name","text":"Get subscription topic name. Returns: Type Description Optional [ str ] topic name to be subscribed by the callback. None except for subscription callback.","title":"subscribe_topic_name()"},{"location":"runtime/#caret_analyze.runtime.callback.CallbackBase.subscription","text":"Get subscription. Returns: Type Description Optional [ Subscription ] subscription which the callback is attached. None except for subscription callback.","title":"subscription()"},{"location":"runtime/#caret_analyze.runtime.callback.CallbackBase.summary","text":"Get summary [override]. Returns: Type Description Summary summary info.","title":"summary()"},{"location":"runtime/#caret_analyze.runtime.callback.CallbackBase.symbol","text":"Get callback symbol name. Returns: Type Description str callback function symbol name.","title":"symbol()"},{"location":"runtime/#caret_analyze.runtime.callback.CallbackBase.timer","text":"Get timer. Returns: Type Description Optional [ Timer ] timer which the callback is attached. None except for timer callback.","title":"timer()"},{"location":"runtime/#caret_analyze.runtime.CallbackGroup","text":"Bases: Summarizable A class that represents the callback group.","title":"CallbackGroup"},{"location":"runtime/#caret_analyze.runtime.callback_group.CallbackGroup.__init__","text":"Construct an instance. Parameters: Name Type Description Default callback_group_info CallbackGroupStructValue static information. required callbacks List [ CallbackBase ] callbacks to be added to the callback group. required","title":"__init__()"},{"location":"runtime/#caret_analyze.runtime.callback_group.CallbackGroup.callback_group_name","text":"Get callback group name. Returns: Type Description str callback group name defined in the architecture.","title":"callback_group_name()"},{"location":"runtime/#caret_analyze.runtime.callback_group.CallbackGroup.callback_group_type","text":"Get callback_group_type. Returns: Name Type Description CallbackGroupType CallbackGroupType REENTRANT / MUTUALLY_EXCLUSIVE","title":"callback_group_type()"},{"location":"runtime/#caret_analyze.runtime.callback_group.CallbackGroup.callback_group_type_name","text":"Get callback_group_type name. Returns: Type Description CallbackGroupType name 'reentrant' / 'mutually_exclusive'","title":"callback_group_type_name()"},{"location":"runtime/#caret_analyze.runtime.callback_group.CallbackGroup.callbacks","text":"Get callbacks. Returns: Type Description List [ CallbackBase ] callbacks which are contained in this callback group.","title":"callbacks()"},{"location":"runtime/#caret_analyze.runtime.callback_group.CallbackGroup.get_callback","text":"Get a callback that matches the condition. Parameters: Name Type Description Default callback_name str callback name to get. required Returns: Type Description CallbackBase callback that matches the condition. Raises: Type Description InvalidArgumentError Occurs when the given argument type is invalid. ItemNotFoundError Occurs when no items were found. MultipleItemFoundError Occurs when several items were found.","title":"get_callback()"},{"location":"runtime/#caret_analyze.runtime.callback_group.CallbackGroup.get_callbacks","text":"Get callbacks that match the condition. Returns: Type Description List [ CallbackBase ] callbacks that match the condition.","title":"get_callbacks()"},{"location":"runtime/#caret_analyze.runtime.callback_group.CallbackGroup.node_name","text":"Get node name. Returns: Type Description str node name which is contained this callback group.","title":"node_name()"},{"location":"runtime/#caret_analyze.runtime.callback_group.CallbackGroup.summary","text":"Get summary [override]. Returns: Type Description Summary summary info.","title":"summary()"},{"location":"runtime/#caret_analyze.runtime.Communication","text":"Bases: PathBase , Summarizable Class that represents topic communication.","title":"Communication"},{"location":"runtime/#caret_analyze.runtime.communication.Communication.__init__","text":"Construct an instance. Parameters: Name Type Description Default node_publish Node publish node. required node_subscription Node subscribe node required publisher Publisher publisher required subscription Subscription subscription required communication_value CommunicationStructValue static info. required records_provider Union [ RecordsProvider , RuntimeDataProvider , None] provider to be evaluated. required callbacks_publish Optional [ List [ CallbackBase ]] required callback_subscription Optional [ CallbackBase ] required","title":"__init__()"},{"location":"runtime/#caret_analyze.runtime.communication.Communication.callback_publish","text":"Get publisher callback. Returns: Type Description Optional [ List [ CallbackBase ]] callback which publishes this communication.","title":"callback_publish()"},{"location":"runtime/#caret_analyze.runtime.communication.Communication.callback_subscription","text":"Get subscribe callback. Returns: Type Description Optional [ CallbackBase ] callback to which subscribe this communication.","title":"callback_subscription()"},{"location":"runtime/#caret_analyze.runtime.communication.Communication.is_intra_proc_comm","text":"Get whether this communication is intra-process-communication. Returns: Type Description Optional [ bool ] True when intra-process-communication. otherwise False.","title":"is_intra_proc_comm()"},{"location":"runtime/#caret_analyze.runtime.communication.Communication.publish_node","text":"Get publish node. Returns: Type Description Node A node that publishes this communication.","title":"publish_node()"},{"location":"runtime/#caret_analyze.runtime.communication.Communication.publish_node_name","text":"Get publish node name. Returns: Type Description str node name which publishes this communication.","title":"publish_node_name()"},{"location":"runtime/#caret_analyze.runtime.communication.Communication.publisher","text":"Get publisher. Returns: Type Description Publisher publisher to publish this communication.","title":"publisher()"},{"location":"runtime/#caret_analyze.runtime.communication.Communication.rmw_implementation","text":"Get rmw implementation. Returns: Type Description Optional [ str ] rmw implementation.","title":"rmw_implementation()"},{"location":"runtime/#caret_analyze.runtime.communication.Communication.subscribe_node","text":"Get subscribe node. Returns: Type Description Node node to which subscribes this communication.","title":"subscribe_node()"},{"location":"runtime/#caret_analyze.runtime.communication.Communication.subscribe_node_name","text":"Get subscribe node name. Returns: Type Description str node name which subscribes to this communication.","title":"subscribe_node_name()"},{"location":"runtime/#caret_analyze.runtime.communication.Communication.subscription","text":"Get subscription. Returns: Type Description Subscription subscription to subscribe to this communication.","title":"subscription()"},{"location":"runtime/#caret_analyze.runtime.communication.Communication.summary","text":"Get summary [override]. Returns: Type Description Summary summary info.","title":"summary()"},{"location":"runtime/#caret_analyze.runtime.communication.Communication.topic_name","text":"Get a topic name. Returns: Type Description str topic name of this communication.","title":"topic_name()"},{"location":"runtime/#caret_analyze.runtime.communication.Communication.verify","text":"Verify whether latency can be generated. Returns: Type Description bool True if valid. Otherwise False.","title":"verify()"},{"location":"runtime/#caret_analyze.runtime.Executor","text":"Bases: Summarizable Class that represents executor.","title":"Executor"},{"location":"runtime/#caret_analyze.runtime.executor.Executor.__init__","text":"Construct an instance. Parameters: Name Type Description Default executor_value ExecutorStructValue Static info. required callback_groups List [ CallbackGroup ] Callback groups added to the executor. required","title":"__init__()"},{"location":"runtime/#caret_analyze.runtime.executor.Executor.callback_group_names","text":"Get callback group names. Returns: Type Description List [ str ] Callback group names added to the executor.","title":"callback_group_names()"},{"location":"runtime/#caret_analyze.runtime.executor.Executor.callback_groups","text":"Get callback groups. Returns: Type Description List [ CallbackGroup ] Callback groups added to the executor.","title":"callback_groups()"},{"location":"runtime/#caret_analyze.runtime.executor.Executor.callback_names","text":"Get callback names. Returns: Type Description List [ str ] callback names added to the executor.","title":"callback_names()"},{"location":"runtime/#caret_analyze.runtime.executor.Executor.callbacks","text":"Get callbacks. Returns: Type Description List [ CallbackBase ] Callbacks added to the executor.","title":"callbacks()"},{"location":"runtime/#caret_analyze.runtime.executor.Executor.executor_name","text":"Get executor name. Returns: Type Description str executor name defined in the architecture.","title":"executor_name()"},{"location":"runtime/#caret_analyze.runtime.executor.Executor.executor_type","text":"Get executor type. Returns: Type Description ExecutorType executor type.","title":"executor_type()"},{"location":"runtime/#caret_analyze.runtime.executor.Executor.get_callback","text":"Get callback. Parameters: Name Type Description Default callback_name str callback name to get. required Returns: Type Description CallbackBase callback that matches the condition. Raises: Type Description InvalidArgumentError Occurs when the given argument type is invalid. ItemNotFoundError Occurs when no items were found. MultipleItemFoundError Occurs when several items were found.","title":"get_callback()"},{"location":"runtime/#caret_analyze.runtime.executor.Executor.get_callback_group","text":"Get callback group. Parameters: Name Type Description Default callback_group_name str callback group name to get. required Returns: Type Description CallbackGroup Callback group that matches the condition. Raises: Type Description InvalidArgumentError Occurs when the given argument type is invalid. ItemNotFoundError Occurs when no items were found. MultipleItemFoundError Occurs when several items were found.","title":"get_callback_group()"},{"location":"runtime/#caret_analyze.runtime.executor.Executor.get_callbacks","text":"Get callbacks. Returns: Type Description List [ CallbackBase ] callbacks that match the condition.","title":"get_callbacks()"},{"location":"runtime/#caret_analyze.runtime.executor.Executor.summary","text":"Get summary [override]. Returns: Type Description Summary summary info.","title":"summary()"},{"location":"runtime/#caret_analyze.runtime.Node","text":"Bases: Summarizable A class that represents a node.","title":"Node"},{"location":"runtime/#caret_analyze.runtime.node.Node.__init__","text":"Construct an instance. Parameters: Name Type Description Default node NodeStructValue static info required publishers List [ Publisher ] publishers in the node. required subscription List [ Subscription ] subscriptions in the node. required timers List [ Timer ] timers in the node. required node_paths List [ NodePath ] node paths in the node. required callback_groups Optional [ List [ CallbackGroup ]] callback groups in the node. required variable_passings Optional [ List [ VariablePassing ]] variable passings in the node. required","title":"__init__()"},{"location":"runtime/#caret_analyze.runtime.node.Node.callback_group_names","text":"Get callback group names. Returns: Type Description Optional [ List [ str ]] callback group names that the node contains.","title":"callback_group_names()"},{"location":"runtime/#caret_analyze.runtime.node.Node.callback_groups","text":"Get callback groups. Returns: Type Description Optional [ List [ CallbackGroup ]] callback groups that the node contains.","title":"callback_groups()"},{"location":"runtime/#caret_analyze.runtime.node.Node.callback_names","text":"Get callback names. Returns: Type Description Optional [ List [ str ]] callback names that the node contains.","title":"callback_names()"},{"location":"runtime/#caret_analyze.runtime.node.Node.callbacks","text":"Get callbacks. Returns: Type Description Optional [ List [ CallbackBase ]] callbacks that the node contains.","title":"callbacks()"},{"location":"runtime/#caret_analyze.runtime.node.Node.get_callback","text":"Get callback. Parameters: Name Type Description Default callback_name str callback name to get. required Returns: Type Description CallbackBase callback that matches the condition. Raises: Type Description InvalidArgumentError Occurs when the given argument type is invalid. ItemNotFoundError Occurs when no items were found. MultipleItemFoundError Occurs when several items were found.","title":"get_callback()"},{"location":"runtime/#caret_analyze.runtime.node.Node.get_callback_group","text":"Get callback group. Parameters: Name Type Description Default callback_group_name str callback group name to get. required Returns: Type Description CallbackGroup callback group that matches the condition. Raises: Type Description InvalidArgumentError Occurs when the given argument type is invalid. ItemNotFoundError Occurs when no items were found. MultipleItemFoundError Occurs when several items were found.","title":"get_callback_group()"},{"location":"runtime/#caret_analyze.runtime.node.Node.get_callbacks","text":"Get callbacks. Parameters: Name Type Description Default callback_names callback names to get. required Returns: Type Description List [ CallbackBase ] callbacks that match the condition. Raises: Type Description InvalidArgumentError Occurs when the given argument type is invalid. ItemNotFoundError Occurs when no items were found.","title":"get_callbacks()"},{"location":"runtime/#caret_analyze.runtime.node.Node.get_path","text":"Get node path. Parameters: Name Type Description Default subscribe_topic_name Optional [ str ] topic name to which the node subscribes. required publish_topic_name Optional [ str ] topic name to which the node publishes. required Returns: Type Description NodePath node path that matches the condition. Raises: Type Description InvalidArgumentError Occurs when the given argument type is invalid. ItemNotFoundError Occurs when no items were found. MultipleItemFoundError Occurs when several items were found.","title":"get_path()"},{"location":"runtime/#caret_analyze.runtime.node.Node.get_publisher","text":"Get publisher. Parameters: Name Type Description Default topic_name str publisher topic name to get. required Returns: Type Description Publisher A publisher that matches the condition. Raises: Type Description InvalidArgumentError Occurs when the given argument type is invalid. ItemNotFoundError Occurs when no items were found. MultipleItemFoundError Occurs when several items were found.","title":"get_publisher()"},{"location":"runtime/#caret_analyze.runtime.node.Node.get_subscription","text":"Get subscription. Parameters: Name Type Description Default topic_name str topic name to get. required Returns: Type Description Subscription Subscription instance that matches the condition. Raises: Type Description InvalidArgumentError Occurs when the given argument type is invalid. ItemNotFoundError Occurs when no items were found. MultipleItemFoundError Occurs when several items were found.","title":"get_subscription()"},{"location":"runtime/#caret_analyze.runtime.node.Node.node_name","text":"Get node name. Returns: Type Description str node name.","title":"node_name()"},{"location":"runtime/#caret_analyze.runtime.node.Node.paths","text":"Get node paths. Node paths are defined by subscription and publisher pair. Returns: Type Description List [ NodePath ] node paths that the node contains.","title":"paths()"},{"location":"runtime/#caret_analyze.runtime.node.Node.publish_topic_names","text":"Get topic names the node publishes. Returns: Type Description List [ str ] topic names that the node publishes to.","title":"publish_topic_names()"},{"location":"runtime/#caret_analyze.runtime.node.Node.publishers","text":"Get publishers. Returns: Type Description List [ Publisher ] publishers used by the node.","title":"publishers()"},{"location":"runtime/#caret_analyze.runtime.node.Node.subscribe_topic_names","text":"Get subscribe topic names. Returns: Type Description List [ str ] topic names to which the node subscribes.","title":"subscribe_topic_names()"},{"location":"runtime/#caret_analyze.runtime.node.Node.subscriptions","text":"Get subscriptions the node subscribes. Returns: Type Description List [ Subscription ] subscriptions that the node subscribes to.","title":"subscriptions()"},{"location":"runtime/#caret_analyze.runtime.node.Node.summary","text":"Get summary [override]. Returns: Type Description Summary summary info.","title":"summary()"},{"location":"runtime/#caret_analyze.runtime.node.Node.timers","text":"Get timers. Returns: Type Description List [ Timer ] timers that the node contains.","title":"timers()"},{"location":"runtime/#caret_analyze.runtime.node.Node.variable_passings","text":"Get variable passings. Returns: Type Description Optional [ List [ VariablePassing ]] Variable passings that the node contains.","title":"variable_passings()"},{"location":"runtime/#caret_analyze.runtime.NodePath","text":"Bases: PathBase , Summarizable A class that represents a path inside a node. Node path is defined as subscription-publisher pair. subscribe-publish policies are defined as \"message context\"","title":"NodePath"},{"location":"runtime/#caret_analyze.runtime.node_path.NodePath.__init__","text":"Construct an instance. Parameters: Name Type Description Default node_path_value NodePathStructValue static info. required records_provider RecordsProvider provider to be evaluated. required subscription Optional [ Subscription ] node path subscription required publisher Optional [ Publisher ] node path publisher required callbacks Optional [ List [ CallbackBase ]] Callbacks in node path. Needed only if message context is CallbackChain. required","title":"__init__()"},{"location":"runtime/#caret_analyze.runtime.node_path.NodePath.callbacks","text":"Get callbacks. Returns: Type Description Optional [ List [ CallbackBase ]] Callbacks in node path. None except for message context is callback chain.","title":"callbacks()"},{"location":"runtime/#caret_analyze.runtime.node_path.NodePath.message_context","text":"Get message context. Returns: Type Description Optional [ MessageContext ] message context for this node path.","title":"message_context()"},{"location":"runtime/#caret_analyze.runtime.node_path.NodePath.node_name","text":"Get node name. Returns: Type Description str Node name which contains this node path.","title":"node_name()"},{"location":"runtime/#caret_analyze.runtime.node_path.NodePath.publish_topic_name","text":"Get a topic name to publish. Returns: Type Description Optional [ str ] topic name to publish.","title":"publish_topic_name()"},{"location":"runtime/#caret_analyze.runtime.node_path.NodePath.publisher","text":"Get publisher. Returns: Type Description Optional [ Publisher ] node path publisher.","title":"publisher()"},{"location":"runtime/#caret_analyze.runtime.node_path.NodePath.subscribe_topic_name","text":"Get a topic name to subscribe to. Returns: Type Description Optional [ str ] topic name to subscribe to.","title":"subscribe_topic_name()"},{"location":"runtime/#caret_analyze.runtime.node_path.NodePath.subscription","text":"Get a subscription. Returns: Type Description Optional [ Subscription ] subscription to subscribe to.","title":"subscription()"},{"location":"runtime/#caret_analyze.runtime.node_path.NodePath.summary","text":"Get summary [override]. Returns: Type Description Summary summary info.","title":"summary()"},{"location":"runtime/#caret_analyze.runtime.Path","text":"Bases: PathBase , Summarizable A class that represents a path. A single path is composed of node paths and communications.","title":"Path"},{"location":"runtime/#caret_analyze.runtime.path.Path.__init__","text":"Construct an instance. Parameters: Name Type Description Default path PathStructValue static info required child List [ Union [ NodePath , Communication ]] path children's which compose path (node paths and communications). required callbacks Optional [ List [ CallbackBase ]] callbacks that compose the path. return None except for all of node paths are not callback-chain. required","title":"__init__()"},{"location":"runtime/#caret_analyze.runtime.path.Path.callback_chain","text":"Get callback chain. Returns: Type Description Optional [ List [ CallbackBase ]] callbacks that compose the path. return None except for all of the node paths are callback chains.","title":"callback_chain()"},{"location":"runtime/#caret_analyze.runtime.path.Path.callbacks","text":"Get callbacks. Returns: Type Description List [ CallbackBase ] callbacks in all nodes that comprise the node path.","title":"callbacks()"},{"location":"runtime/#caret_analyze.runtime.path.Path.child","text":"Get path children. Returns: Type Description List [ Union [ NodePath , Communication ]] node paths and communications in the target path. node paths and communications are alternately contained.","title":"child()"},{"location":"runtime/#caret_analyze.runtime.path.Path.child_names","text":"Get path children's names. Returns: Type Description List [ str ] node names and topic names in the target path.","title":"child_names()"},{"location":"runtime/#caret_analyze.runtime.path.Path.clear_cache","text":"Clear to_records/to_dataframe cache.","title":"clear_cache()"},{"location":"runtime/#caret_analyze.runtime.path.Path.communications","text":"Get communications. Returns: Type Description List [ Communication ] Communications in target path.","title":"communications()"},{"location":"runtime/#caret_analyze.runtime.path.Path.node_names","text":"Get node names. Returns: Type Description List [ str ] node names in the target path.","title":"node_names()"},{"location":"runtime/#caret_analyze.runtime.path.Path.node_paths","text":"Get node-paths. Returns: Type Description List [ NodePath ] node paths in target path.","title":"node_paths()"},{"location":"runtime/#caret_analyze.runtime.path.Path.path_name","text":"Get path name. Returns: Type Description Optional [ str ] Path name defined in the architecture.","title":"path_name()"},{"location":"runtime/#caret_analyze.runtime.path.Path.summary","text":"Get summary [override]. Returns: Type Description Summary summary info.","title":"summary()"},{"location":"runtime/#caret_analyze.runtime.path.Path.topic_names","text":"Get topic names. Returns: Type Description List [ str ] topic names in the target path.","title":"topic_names()"},{"location":"runtime/#caret_analyze.runtime.path.Path.verify","text":"Verify whether the path can generate latencies. Returns: Type Description bool True if both architecture and measurement results are valid, otherwise false.","title":"verify()"},{"location":"runtime/#caret_analyze.runtime.PathBase","text":"Base class for Latency.","title":"PathBase"},{"location":"runtime/#caret_analyze.runtime.path_base.PathBase.column_names","text":"Get column names. Returns: Type Description List [ str ] column names","title":"column_names()"},{"location":"runtime/#caret_analyze.runtime.path_base.PathBase.to_dataframe","text":"Calculate dataframe. Parameters: Name Type Description Default remove_dropped If true, eliminate the records that caused the drop. False treat_drop_as_delay Convert dropped records as a delay. Valid only when remove_dropped=false. False lstrip Remove from beginning. [s] required rstrip Remove from end [s] required Returns: Type Description pandas . DataFrame Execution time of each operation.","title":"to_dataframe()"},{"location":"runtime/#caret_analyze.runtime.path_base.PathBase.to_histogram","text":"Calculate histogram data. Parameters: Name Type Description Default binsize_ns int bin size for histogram. default 1ms. 1000000 treat_drop_as_delay bool Convert dropped records as a delay. False lstrip Remove from beginning. [s] required rstrip Remove from end [s] required Returns: Type Description Tuple [ np . ndarray , np . ndarray ] frequency, latency[ns] len(frequency)+1 == len(latency)","title":"to_histogram()"},{"location":"runtime/#caret_analyze.runtime.path_base.PathBase.to_histogram--see-also","text":"https://numpy.org/doc/stable/reference/generated/numpy.histogram.html","title":"See Also"},{"location":"runtime/#caret_analyze.runtime.path_base.PathBase.to_records","text":"Calculate records. Returns: Type Description RecordsInterface Execution time of each operation.","title":"to_records()"},{"location":"runtime/#caret_analyze.runtime.path_base.PathBase.to_timeseries","text":"Calculate timeseries data. Parameters: Name Type Description Default remove_dropped Optional [ bool ] If true, eliminate the records that caused the drop. default: False. False treat_drop_as_delay Optional [ bool ] Convert dropped records as a delay. Valid only when remove_dropped=false. default: False. False lstrip Remove from beginning. [s] default: 0 required rstrip Remove from end [s] default: 0 required Returns: Type Description Tuple [ np . ndarray , np . ndarray ] time[ns], latency[ns] len(time) == len(latency)","title":"to_timeseries()"},{"location":"runtime/#caret_analyze.runtime.Publisher","text":"Bases: PathBase , Summarizable Class that represents publisher.","title":"Publisher"},{"location":"runtime/#caret_analyze.runtime.publisher.Publisher.__init__","text":"Construct an instance. Parameters: Name Type Description Default publisher PublisherStructValue static info. required provider Union [ RecordsProvider , RuntimeDataProvider ] provider to be evaluated. required","title":"__init__()"},{"location":"runtime/#caret_analyze.runtime.publisher.Publisher.callback_names","text":"Get callback names. Returns: Type Description Optional [ List [ str ]] Callback names which uses the publisher to publish.","title":"callback_names()"},{"location":"runtime/#caret_analyze.runtime.publisher.Publisher.node_name","text":"Get node name. Returns: Type Description str node name which contains the publisher.","title":"node_name()"},{"location":"runtime/#caret_analyze.runtime.publisher.Publisher.qos","text":"Get QoS. Returns: Type Description Optional [ Qos ] Publisher QoS","title":"qos()"},{"location":"runtime/#caret_analyze.runtime.publisher.Publisher.summary","text":"Get summary [override]. Returns: Type Description Summary summary info.","title":"summary()"},{"location":"runtime/#caret_analyze.runtime.publisher.Publisher.topic_name","text":"Get a topic name. Returns: Type Description str A topic name that the publisher publishes.","title":"topic_name()"},{"location":"runtime/#caret_analyze.runtime.Subscription","text":"Bases: PathBase , Summarizable A class that represents subscription.","title":"Subscription"},{"location":"runtime/#caret_analyze.runtime.subscription.Subscription.__init__","text":"Construct an instance. Parameters: Name Type Description Default val SubscriptionStructValue static info. required data_provider Union [ RecordsProvider , RuntimeDataProvider ] provider to be evaluated. required","title":"__init__()"},{"location":"runtime/#caret_analyze.runtime.subscription.Subscription.callback_name","text":"Get a subscription callback name. Returns: Type Description Optional [ str ] callback name to which the subscription is attached.","title":"callback_name()"},{"location":"runtime/#caret_analyze.runtime.subscription.Subscription.node_name","text":"Get node name. Returns: Type Description str node name to which the subscription subscribes.","title":"node_name()"},{"location":"runtime/#caret_analyze.runtime.subscription.Subscription.qos","text":"Get QoS. Returns: Type Description Optional [ Qos ] Subscription QoS.","title":"qos()"},{"location":"runtime/#caret_analyze.runtime.subscription.Subscription.summary","text":"Get summary [override]. Returns: Type Description Summary summary info.","title":"summary()"},{"location":"runtime/#caret_analyze.runtime.subscription.Subscription.topic_name","text":"Get a topic name. Returns: Type Description str A topic name to which the subscription subscribes.","title":"topic_name()"},{"location":"runtime/#caret_analyze.runtime.SubscriptionCallback","text":"Bases: CallbackBase A class that represents subscription callback.","title":"SubscriptionCallback"},{"location":"runtime/#caret_analyze.runtime.callback.SubscriptionCallback.__init__","text":"Construct an instance. Parameters: Name Type Description Default callback_info SubscriptionCallbackStructValue static info. required records_provider RecordsProvider provider to be evaluated. required subscription Subscription subscription to which callback subscribes. required publishers Optional [ List [ Publisher ]] publishers to which the callback publishers None","title":"__init__()"},{"location":"runtime/#caret_analyze.runtime.Timer","text":"Bases: PathBase , Summarizable A class that represents timer.","title":"Timer"},{"location":"runtime/#caret_analyze.runtime.timer.Timer.__init__","text":"Construct an instance. Parameters: Name Type Description Default val TimerStructValue static info. required data_provider Union [ RecordsProvider , RuntimeDataProvider ] provider to be evaluated. required","title":"__init__()"},{"location":"runtime/#caret_analyze.runtime.timer.Timer.callback_name","text":"Get callback name. Returns: Type Description Optional [ str ] callback name defined in the architecture.","title":"callback_name()"},{"location":"runtime/#caret_analyze.runtime.timer.Timer.node_name","text":"Get node name. Returns: Type Description str node name which defines the timer.","title":"node_name()"},{"location":"runtime/#caret_analyze.runtime.timer.Timer.period_ns","text":"Get timer period. Returns: Type Description int timer period [ns].","title":"period_ns()"},{"location":"runtime/#caret_analyze.runtime.timer.Timer.summary","text":"Get summary [override]. Returns: Type Description Summary summary info.","title":"summary()"},{"location":"runtime/#caret_analyze.runtime.TimerCallback","text":"Bases: CallbackBase Class that represents timer callback.","title":"TimerCallback"},{"location":"runtime/#caret_analyze.runtime.callback.TimerCallback.__init__","text":"Construct an instance. Parameters: Name Type Description Default callback TimerCallbackStructValue static info. required records_provider RecordsProvider provider to be evaluated. required publishers Optional [ List [ Publisher ]] publishers to which the callback publishers required timer Timer timer required","title":"__init__()"},{"location":"runtime/#caret_analyze.runtime.callback.TimerCallback.period_ns","text":"Get timer period. Returns: Type Description int timer period [ns].","title":"period_ns()"},{"location":"runtime/#caret_analyze.runtime.VariablePassing","text":"Bases: PathBase , Summarizable","title":"VariablePassing"},{"location":"runtime/#caret_analyze.runtime.variable_passing.VariablePassing.__init__","text":"Construct an instance. Parameters: Name Type Description Default variable_passing VariablePassingStructValue static info. required records_provider RecordsProvider provider to be evaluated. required","title":"__init__()"},{"location":"runtime/#caret_analyze.runtime.variable_passing.VariablePassing.callback_name_read","text":"Get read side callback name. Returns: Type Description [ str ] read-side callback name.","title":"callback_name_read()"},{"location":"runtime/#caret_analyze.runtime.variable_passing.VariablePassing.callback_name_write","text":"Get write side callback name. Returns: Type Description [ str ] write-side callback name.","title":"callback_name_write()"},{"location":"runtime/#caret_analyze.runtime.variable_passing.VariablePassing.node_name","text":"Get node name. Returns: Type Description str node name which has the variable passing.","title":"node_name()"},{"location":"runtime/#caret_analyze.runtime.variable_passing.VariablePassing.summary","text":"Get summary [override]. Returns: Type Description Summary summary info.","title":"summary()"},{"location":"value_objects/","text":"CallbackChain # Bases: MessageContext TYPE_NAME = 'callback_chain' class-attribute # Callback chain. Latency is calculated from callback durations in the node path. When a path within a node passes through multiple callbacks, it is assumed that messages are passed between callbacks by a buffer of queue size 1 (ex. a member variable that stores a single message). If the queue size is larger than 1, the node latency may be calculated to be small. CallbackGroupStructValue # Bases: ValueObject , Summarizable Callback group value object. __init__ ( callback_group_type , node_name , callback_values , callback_group_name ) # Construct callback group value object. Parameters: Name Type Description Default callback_group_type_name str required node_names List [ str ] required callback_group_type () property # Get callback_group_type. Returns: Type Description CallbackGroupType callback_group_type_name () property # Get callback_group_type name. Returns: Type Description CallbackGroupType name node_name () property # Get node name. Returns: Type Description str node name CallbackGroupType # Bases: ValueObject callback group type class. __init__ ( name ) # Construct CallbackGroupType. Parameters: Name Type Description Default name str type name ['mutually_exclusive', 'reentrant'] required type_name () property # Return callback group type name. Returns: Type Description str type name. CallbackGroupValue # Bases: ValueObject Callback group value object. __init__ ( callback_group_type_name , node_name , node_id , callback_ids , callback_group_id , * , callback_group_name = None ) # Construct callback value object. Parameters: Name Type Description Default callback_group_type_name str required node_names Tuple [ str ] required callback_group_type () property # Get callback_group_type. Returns: Type Description CallbackGroupType callback_ids () property # Get callback ids. Returns: Type Description Tuple [ str , ...] callback ids added to the callback group. CallbackStructValue # Bases: Summarizable Callback value base class. callback_name () property # Get callback name. Returns: Type Description str callback name callback_type () abstractmethod property # Get callback type name. Returns: Type Description CallbackType callback type node_name () property # Get node name. Returns: Type Description str node name symbol () property # Get callback symbol name. Returns: Type Description str callback symbol name CallbackType # Bases: ValueObject callback group type class. __init__ ( name ) # Construct callback type. Parameters: Name Type Description Default name str callback type name ['timer_callback', 'subscription_callback'] required type_name () property # Return callback type name. Returns: Type Description str type name. CallbackValue # Bases: ValueObject Callback value base class. callback_id () property # Get callback id. callback id is is used to bind. callback id should be the same if the node name and other properties are the same. If any properties is different, it should be a different callback id. Returns: Type Description str callback unique id. callback_name () property # Get callback name. Note that different architecture_readers return different values. Returns: Type Description str callback name callback_type () abstractmethod property # Get callback type name. Returns: Type Description CallbackType callback type node_id () property # Get node id. Returns: Type Description str node name node_name () property # Get node name. Returns: Type Description str node name symbol () property # Get callback symbol name. Returns: Type Description str callback symbol name ExecutorStructValue # Bases: ValueObject , Summarizable Executor info for architecture. ExecutorType # Bases: ValueObject executor type class. type_name () property # Return executor type name. Returns: Type Description str type name. ExecutorValue # Bases: ValueObject Executor info for architecture. InheritUniqueStamp # Bases: MessageContext TYPE_NAME = 'inherit_unique_stamp' class-attribute # Inherit header timestamp. Latency is calculated for pub/sub messages with the same timestamp value. If the input timestamp is not unique, it may calculate an incorrect value. MessageContext # Bases: ValueObject , Summarizable Structured message context value. MessageContextType # Bases: ValueObject Message context type. NodeStructValue # Bases: ValueObject , Summarizable Executor info for architecture. PathValue # Bases: ValueObject Path name alias. PublisherStructValue # Bases: ValueObject , Summarizable Structured publisher value. PublisherValue # Bases: ValueObject Publisher value. Qos # Bases: ValueObject , Summarizable qos info. SubscriptionCallbackStructValue # Bases: CallbackStructValue , ValueObject Structured subscription callback value. SubscriptionCallbackValue # Bases: CallbackValue Subscription callback value. SubscriptionStructValue # Bases: ValueObject , Summarizable Subscription info. SubscriptionValue # Bases: ValueObject Subscription info. Tilde # Bases: MessageContext TYPE_NAME = 'tilde' class-attribute # tilde. Latency is calculated from tilde. TimerCallbackStructValue # Bases: CallbackStructValue , ValueObject Structured timer callback value. TimerCallbackValue # Bases: CallbackValue Timer callback value. TimerStructValue # Bases: ValueObject , Summarizable Timer info. TimerValue # Bases: ValueObject Timer info. UseLatestMessage # Bases: MessageContext TYPE_NAME = 'use_latest_message' class-attribute # Use message context ValueObject # Value object base class. VariablePassingStructValue # Bases: ValueObject , Summarizable variable passing info. callback_name_read () property # Get read-side callback name. Returns: Type Description [ str ] read-side callback name. callback_name_write () property # Get write-side callback name. Returns: Type Description [ str ] write-side callback name. node_name () property # Get node name. Returns: Type Description str node name VariablePassingValue # Bases: ValueObject variable passing info. callback_id_read () property # Get read-side callback id. Returns: Type Description [ str ] read-side callback id. callback_id_write () property # Get write-side callback id. Returns: Type Description [ str ] write-side callback id. node_name () property # Get node name. Returns: Type Description str node name","title":"value_objects"},{"location":"value_objects/#caret_analyze.value_objects.CallbackChain","text":"Bases: MessageContext","title":"CallbackChain"},{"location":"value_objects/#caret_analyze.value_objects.message_context.CallbackChain.TYPE_NAME","text":"Callback chain. Latency is calculated from callback durations in the node path. When a path within a node passes through multiple callbacks, it is assumed that messages are passed between callbacks by a buffer of queue size 1 (ex. a member variable that stores a single message). If the queue size is larger than 1, the node latency may be calculated to be small.","title":"TYPE_NAME"},{"location":"value_objects/#caret_analyze.value_objects.CallbackGroupStructValue","text":"Bases: ValueObject , Summarizable Callback group value object.","title":"CallbackGroupStructValue"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupStructValue.__init__","text":"Construct callback group value object. Parameters: Name Type Description Default callback_group_type_name str required node_names List [ str ] required","title":"__init__()"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupStructValue.callback_group_type","text":"Get callback_group_type. Returns: Type Description CallbackGroupType","title":"callback_group_type()"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupStructValue.callback_group_type_name","text":"Get callback_group_type name. Returns: Type Description CallbackGroupType name","title":"callback_group_type_name()"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupStructValue.node_name","text":"Get node name. Returns: Type Description str node name","title":"node_name()"},{"location":"value_objects/#caret_analyze.value_objects.CallbackGroupType","text":"Bases: ValueObject callback group type class.","title":"CallbackGroupType"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupType.__init__","text":"Construct CallbackGroupType. Parameters: Name Type Description Default name str type name ['mutually_exclusive', 'reentrant'] required","title":"__init__()"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupType.type_name","text":"Return callback group type name. Returns: Type Description str type name.","title":"type_name()"},{"location":"value_objects/#caret_analyze.value_objects.CallbackGroupValue","text":"Bases: ValueObject Callback group value object.","title":"CallbackGroupValue"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupValue.__init__","text":"Construct callback value object. Parameters: Name Type Description Default callback_group_type_name str required node_names Tuple [ str ] required","title":"__init__()"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupValue.callback_group_type","text":"Get callback_group_type. Returns: Type Description CallbackGroupType","title":"callback_group_type()"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupValue.callback_ids","text":"Get callback ids. Returns: Type Description Tuple [ str , ...] callback ids added to the callback group.","title":"callback_ids()"},{"location":"value_objects/#caret_analyze.value_objects.CallbackStructValue","text":"Bases: Summarizable Callback value base class.","title":"CallbackStructValue"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackStructValue.callback_name","text":"Get callback name. Returns: Type Description str callback name","title":"callback_name()"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackStructValue.callback_type","text":"Get callback type name. Returns: Type Description CallbackType callback type","title":"callback_type()"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackStructValue.node_name","text":"Get node name. Returns: Type Description str node name","title":"node_name()"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackStructValue.symbol","text":"Get callback symbol name. Returns: Type Description str callback symbol name","title":"symbol()"},{"location":"value_objects/#caret_analyze.value_objects.CallbackType","text":"Bases: ValueObject callback group type class.","title":"CallbackType"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackType.__init__","text":"Construct callback type. Parameters: Name Type Description Default name str callback type name ['timer_callback', 'subscription_callback'] required","title":"__init__()"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackType.type_name","text":"Return callback type name. Returns: Type Description str type name.","title":"type_name()"},{"location":"value_objects/#caret_analyze.value_objects.CallbackValue","text":"Bases: ValueObject Callback value base class.","title":"CallbackValue"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackValue.callback_id","text":"Get callback id. callback id is is used to bind. callback id should be the same if the node name and other properties are the same. If any properties is different, it should be a different callback id. Returns: Type Description str callback unique id.","title":"callback_id()"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackValue.callback_name","text":"Get callback name. Note that different architecture_readers return different values. Returns: Type Description str callback name","title":"callback_name()"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackValue.callback_type","text":"Get callback type name. Returns: Type Description CallbackType callback type","title":"callback_type()"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackValue.node_id","text":"Get node id. Returns: Type Description str node name","title":"node_id()"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackValue.node_name","text":"Get node name. Returns: Type Description str node name","title":"node_name()"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackValue.symbol","text":"Get callback symbol name. Returns: Type Description str callback symbol name","title":"symbol()"},{"location":"value_objects/#caret_analyze.value_objects.ExecutorStructValue","text":"Bases: ValueObject , Summarizable Executor info for architecture.","title":"ExecutorStructValue"},{"location":"value_objects/#caret_analyze.value_objects.ExecutorType","text":"Bases: ValueObject executor type class.","title":"ExecutorType"},{"location":"value_objects/#caret_analyze.value_objects.executor.ExecutorType.type_name","text":"Return executor type name. Returns: Type Description str type name.","title":"type_name()"},{"location":"value_objects/#caret_analyze.value_objects.ExecutorValue","text":"Bases: ValueObject Executor info for architecture.","title":"ExecutorValue"},{"location":"value_objects/#caret_analyze.value_objects.InheritUniqueStamp","text":"Bases: MessageContext","title":"InheritUniqueStamp"},{"location":"value_objects/#caret_analyze.value_objects.message_context.InheritUniqueStamp.TYPE_NAME","text":"Inherit header timestamp. Latency is calculated for pub/sub messages with the same timestamp value. If the input timestamp is not unique, it may calculate an incorrect value.","title":"TYPE_NAME"},{"location":"value_objects/#caret_analyze.value_objects.MessageContext","text":"Bases: ValueObject , Summarizable Structured message context value.","title":"MessageContext"},{"location":"value_objects/#caret_analyze.value_objects.MessageContextType","text":"Bases: ValueObject Message context type.","title":"MessageContextType"},{"location":"value_objects/#caret_analyze.value_objects.NodeStructValue","text":"Bases: ValueObject , Summarizable Executor info for architecture.","title":"NodeStructValue"},{"location":"value_objects/#caret_analyze.value_objects.PathValue","text":"Bases: ValueObject Path name alias.","title":"PathValue"},{"location":"value_objects/#caret_analyze.value_objects.PublisherStructValue","text":"Bases: ValueObject , Summarizable Structured publisher value.","title":"PublisherStructValue"},{"location":"value_objects/#caret_analyze.value_objects.PublisherValue","text":"Bases: ValueObject Publisher value.","title":"PublisherValue"},{"location":"value_objects/#caret_analyze.value_objects.Qos","text":"Bases: ValueObject , Summarizable qos info.","title":"Qos"},{"location":"value_objects/#caret_analyze.value_objects.SubscriptionCallbackStructValue","text":"Bases: CallbackStructValue , ValueObject Structured subscription callback value.","title":"SubscriptionCallbackStructValue"},{"location":"value_objects/#caret_analyze.value_objects.SubscriptionCallbackValue","text":"Bases: CallbackValue Subscription callback value.","title":"SubscriptionCallbackValue"},{"location":"value_objects/#caret_analyze.value_objects.SubscriptionStructValue","text":"Bases: ValueObject , Summarizable Subscription info.","title":"SubscriptionStructValue"},{"location":"value_objects/#caret_analyze.value_objects.SubscriptionValue","text":"Bases: ValueObject Subscription info.","title":"SubscriptionValue"},{"location":"value_objects/#caret_analyze.value_objects.Tilde","text":"Bases: MessageContext","title":"Tilde"},{"location":"value_objects/#caret_analyze.value_objects.message_context.Tilde.TYPE_NAME","text":"tilde. Latency is calculated from tilde.","title":"TYPE_NAME"},{"location":"value_objects/#caret_analyze.value_objects.TimerCallbackStructValue","text":"Bases: CallbackStructValue , ValueObject Structured timer callback value.","title":"TimerCallbackStructValue"},{"location":"value_objects/#caret_analyze.value_objects.TimerCallbackValue","text":"Bases: CallbackValue Timer callback value.","title":"TimerCallbackValue"},{"location":"value_objects/#caret_analyze.value_objects.TimerStructValue","text":"Bases: ValueObject , Summarizable Timer info.","title":"TimerStructValue"},{"location":"value_objects/#caret_analyze.value_objects.TimerValue","text":"Bases: ValueObject Timer info.","title":"TimerValue"},{"location":"value_objects/#caret_analyze.value_objects.UseLatestMessage","text":"Bases: MessageContext","title":"UseLatestMessage"},{"location":"value_objects/#caret_analyze.value_objects.message_context.UseLatestMessage.TYPE_NAME","text":"Use message context","title":"TYPE_NAME"},{"location":"value_objects/#caret_analyze.value_objects.ValueObject","text":"Value object base class.","title":"ValueObject"},{"location":"value_objects/#caret_analyze.value_objects.VariablePassingStructValue","text":"Bases: ValueObject , Summarizable variable passing info.","title":"VariablePassingStructValue"},{"location":"value_objects/#caret_analyze.value_objects.variable_passing.VariablePassingStructValue.callback_name_read","text":"Get read-side callback name. Returns: Type Description [ str ] read-side callback name.","title":"callback_name_read()"},{"location":"value_objects/#caret_analyze.value_objects.variable_passing.VariablePassingStructValue.callback_name_write","text":"Get write-side callback name. Returns: Type Description [ str ] write-side callback name.","title":"callback_name_write()"},{"location":"value_objects/#caret_analyze.value_objects.variable_passing.VariablePassingStructValue.node_name","text":"Get node name. Returns: Type Description str node name","title":"node_name()"},{"location":"value_objects/#caret_analyze.value_objects.VariablePassingValue","text":"Bases: ValueObject variable passing info.","title":"VariablePassingValue"},{"location":"value_objects/#caret_analyze.value_objects.variable_passing.VariablePassingValue.callback_id_read","text":"Get read-side callback id. Returns: Type Description [ str ] read-side callback id.","title":"callback_id_read()"},{"location":"value_objects/#caret_analyze.value_objects.variable_passing.VariablePassingValue.callback_id_write","text":"Get write-side callback id. Returns: Type Description [ str ] write-side callback id.","title":"callback_id_write()"},{"location":"value_objects/#caret_analyze.value_objects.variable_passing.VariablePassingValue.node_name","text":"Get node name. Returns: Type Description str node name","title":"node_name()"}]}