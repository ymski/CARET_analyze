{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CARET analyze","text":""},{"location":"#api-for-user","title":"API for user","text":"<ul> <li>architecture</li> <li>infra</li> <li>plot</li> <li>runtime</li> <li>exceptions</li> </ul>"},{"location":"#api-for-developer","title":"API for developer","text":"<ul> <li>common</li> <li>record</li> <li>value_objects</li> </ul>"},{"location":"architecture/","title":"architecture","text":""},{"location":"architecture/#caret_analyze.architecture.Architecture","title":"<code>Architecture</code>","text":"<p>         Bases: <code>Summarizable</code></p>"},{"location":"architecture/#caret_analyze.architecture.architecture.Architecture.rename_callback","title":"<code>rename_callback(src, dst)</code>","text":"<p>Update callback name from \"src\" to \"dst\" in architecture.</p> <p>Parameters:</p> Name Type Description Default <code>src</code> <code>str</code> <p>current callback name</p> required <code>dst</code> <code>str</code> <p>updated callback name</p> required"},{"location":"architecture/#caret_analyze.architecture.architecture.Architecture.rename_executor","title":"<code>rename_executor(src, dst)</code>","text":"<p>Update executor name from \"src\" to \"dst\" in architecture.</p> <p>Parameters:</p> Name Type Description Default <code>src</code> <code>str</code> <p>current executor name</p> required <code>dst</code> <code>str</code> <p>updated executor name</p> required"},{"location":"architecture/#caret_analyze.architecture.architecture.Architecture.rename_node","title":"<code>rename_node(src, dst)</code>","text":"<p>Update node name from \"src\" to \"dst\" in architecture.</p> <p>Parameters:</p> Name Type Description Default <code>src</code> <code>str</code> <p>current node name</p> required <code>dst</code> <code>str</code> <p>updated node name</p> required"},{"location":"architecture/#caret_analyze.architecture.architecture.Architecture.rename_path","title":"<code>rename_path(src, dst)</code>","text":"<p>Update path name from \"src\" to \"dst\" in architecture.</p> <p>Parameters:</p> Name Type Description Default <code>src</code> <code>str</code> <p>current path name</p> required <code>dst</code> <code>str</code> <p>updated path name</p> required"},{"location":"architecture/#caret_analyze.architecture.architecture.Architecture.rename_topic","title":"<code>rename_topic(src, dst)</code>","text":"<p>Update topic name from \"src\" to \"dst\" in architecture.</p> <p>Parameters:</p> Name Type Description Default <code>src</code> <code>str</code> <p>current topic name</p> required <code>dst</code> <code>str</code> <p>updated topic name</p> required"},{"location":"common/","title":"common","text":"<p>Common package.</p> <p>This package defines common, generic functions and classes used by other packages. Common functions should be placed under the Util class.</p> <p>Note: Consider using ValueObject to avoid excessive size of the Util class.</p>"},{"location":"common/#caret_analyze.common.ClockConverter","title":"<code>ClockConverter</code>","text":"<p>Class for time conversion. Converts a time given in linear form (y=ax+b) to another time.</p> <p>TODO(hsgwa): Migrate into record.</p>"},{"location":"common/#caret_analyze.common.clock_converter.ClockConverter.__init__","title":"<code>__init__(a, b)</code>","text":"<p>Construct an instance.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>Slope.</p> required <code>b</code> <code>float</code> <p>Offset.</p> required"},{"location":"common/#caret_analyze.common.clock_converter.ClockConverter.convert","title":"<code>convert(time)</code>","text":"<p>Convert input time.</p> <p>Parameters:</p> Name Type Description Default <code>time</code> <code>float</code> <p>Time to convert.</p> required <p>Returns:</p> Type Description <code>float</code> <p>Time after conversion. Conversion are done with y=ax+b.</p>"},{"location":"common/#caret_analyze.common.clock_converter.ClockConverter.create_from_series","title":"<code>create_from_series(times_from, times_to)</code>  <code>staticmethod</code>","text":"<p>Construct an instance from time series data.</p> <p>Parameters:</p> Name Type Description Default <code>times_from</code> <code>Sequence[float]</code> <p>Time before conversion.</p> required <code>times_to</code> <code>Sequence[float]</code> <p>Time after conversion.</p> required <p>Returns:</p> Type Description <code>ClockConverter</code> <p>converter instance.</p> <p>Raises:</p> Type Description <code>InvalidArgumentError</code> <p>Occurs when calculation failed by the least-squares method.</p>"},{"location":"common/#caret_analyze.common.Progress","title":"<code>Progress</code>","text":"<p>Class that manages the progress bar.</p> <p>Set Progress.enable = True if to display progress bar.</p>"},{"location":"common/#caret_analyze.common.progress.Progress.records_label","title":"<code>records_label(label)</code>  <code>classmethod</code>","text":"<p>Progress bar for the iterator in Records.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>operation label.</p> required <p>Returns:</p> Type Description <code>str</code> <p>'' if Progress.enables == True, label otherwise. progress bar is enabled if Progress.enable == True, disabled otherwise.</p>"},{"location":"common/#caret_analyze.common.progress.Progress.tqdm","title":"<code>tqdm(it, *args)</code>  <code>classmethod</code>","text":"<p>Progress bar for python iterators.</p> <p>Parameters:</p> Name Type Description Default <code>it</code> <code>_type_</code> <p>iterator</p> required <p>Returns:</p> Type Description <code>Iterable[Any]</code> <p>iterator. progress bar is enabled if Progress.enable == True, disabled otherwise.</p>"},{"location":"common/#caret_analyze.common.Singleton","title":"<code>Singleton</code>","text":"<p>         Bases: <code>object</code></p> <p>Singleton class.</p> <p>Inherited classes become singleton.</p>"},{"location":"common/#caret_analyze.common.Singleton--note","title":"Note:","text":"<p>Basically, implementation should avoid the use of Singleton.</p>"},{"location":"common/#caret_analyze.common.Summarizable","title":"<code>Summarizable</code>","text":"<p>Abstract base class that have summary property.</p>"},{"location":"common/#caret_analyze.common.summary.Summarizable.summary","title":"<code>summary()</code>","text":"<p>Get summary.</p> <p>Returns:</p> Type Description <code>Summary</code> <p>summary info.</p>"},{"location":"common/#caret_analyze.common.Summary","title":"<code>Summary</code>","text":"<p>         Bases: <code>UserDict</code></p> <p>Summary about value objects and runtime data objects.</p>"},{"location":"common/#caret_analyze.common.Summary--note","title":"Note:","text":"<p>The class is used to get an overview of the instance without any effect to eq and  hash. Users can get an overview in dictionary form or check the overview in the standard output.</p>"},{"location":"common/#caret_analyze.common.summary.Summary.__eq__","title":"<code>__eq__(other)</code>","text":"<p>Return True to ignore [override].</p>"},{"location":"common/#caret_analyze.common.summary.Summary.__hash__","title":"<code>__hash__()</code>","text":"<p>Return zero to ignore [override].</p>"},{"location":"common/#caret_analyze.common.summary.Summary.__str__","title":"<code>__str__()</code>","text":"<p>Return yaml-format string.</p>"},{"location":"common/#caret_analyze.common.UniqueList","title":"<code>UniqueList</code>","text":"<p>         Bases: <code>UserList</code></p> <p>An ordered list without duplicate values.</p>"},{"location":"common/#caret_analyze.common.unique_list.UniqueList.__add__","title":"<code>__add__(other)</code>","text":"<p>Add other data.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Iterable[Any]</code> <p>Data to add.</p> required <p>Returns:</p> Type Description <code>UniqueList</code> <p>Updated list with added data.</p>"},{"location":"common/#caret_analyze.common.unique_list.UniqueList.__iadd__","title":"<code>__iadd__(other)</code>","text":"<p>Add other data.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Iterable[Any]</code> <p>Data to add.</p> required <p>Returns:</p> Type Description <code>UniqueList</code> <p>Updated list with added data.</p>"},{"location":"common/#caret_analyze.common.unique_list.UniqueList.__init__","title":"<code>__init__(init=None)</code>","text":"<p>Construct an instance.</p> <p>Parameters:</p> Name Type Description Default <code>init</code> <code>Any, optional</code> <p>initial value, by default None. If there are duplicate values, only the first value is inserted.</p> <code>None</code>"},{"location":"common/#caret_analyze.common.unique_list.UniqueList.append","title":"<code>append(i)</code>","text":"<p>Append new data.</p> <p>Parameters:</p> Name Type Description Default <code>i</code> <code>Any</code> <p>Data to append. If there are duplicate values, only the first value is inserted.</p> required"},{"location":"common/#caret_analyze.common.unique_list.UniqueList.as_list","title":"<code>as_list()</code>","text":"<p>Get data as Python list.</p> <p>Returns:</p> Type Description <code>List[Any]</code> <p>data</p>"},{"location":"common/#caret_analyze.common.Util","title":"<code>Util</code>","text":""},{"location":"common/#caret_analyze.common.util.Util.ext","title":"<code>ext(path)</code>  <code>staticmethod</code>","text":"<p>Get extension from path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>path name to get extension.</p> required <p>Returns:</p> Type Description <code>str</code> <p>extension.</p>"},{"location":"common/#caret_analyze.common.util.Util.ext--note","title":"Note","text":"<pre><code>This function is duplicated. see: get_ext in Util.\n</code></pre>"},{"location":"common/#caret_analyze.common.util.Util.filter_items","title":"<code>filter_items(f, x)</code>  <code>staticmethod</code>","text":"<p>Filter iterable.</p> <p>Parameters:</p> Name Type Description Default <code>f</code> <code>Callable[[Any], bool]</code> <p>Filtering condition. Items that return True remain.</p> required <code>x</code> <code>Optional[Iterable[Any]]</code> <p>Filtering target.</p> required <p>Returns:</p> Type Description <code>List[Any]</code> <p>Filtered list.</p>"},{"location":"common/#caret_analyze.common.util.Util.find_one","title":"<code>find_one(condition, items)</code>  <code>staticmethod</code>","text":"<p>Get a single item that matches the condition.</p> <p>Parameters:</p> Name Type Description Default <code>condition</code> <code>Callable[[Any], bool]</code> <p>condition</p> required <code>items</code> <code>Optional[Iterable[Any]]</code> <p>Items to be searched.</p> required <p>Returns:</p> Type Description <code>Any</code> <p>condition matched single item.</p> <p>Raises:</p> Type Description <code>ItemNotFoundError</code> <p>Failed to find an item that matches the condition.</p> <code>MultipleItemFoundError</code> <p>Failed to identify an item that matches the condition.</p>"},{"location":"common/#caret_analyze.common.util.Util.find_similar_one","title":"<code>find_similar_one(target_name, items, key=lambda x: x, th=0.6)</code>  <code>staticmethod</code>","text":"<p>Get a single item that matches the condition.</p> <p>Parameters:</p> Name Type Description Default <code>target_name</code> <code>str</code> <p>target_name</p> required <code>items</code> <code>Collection[Any]</code> <p>Items to be searched.</p> required <code>key</code> <code>Callable[[Any], str]</code> <p>key</p> <code>lambda x: x</code> <code>th</code> <code>float</code> <p>Similarity judgment threshold. A candidate is mentioned only if it is higher than the threshold.</p> <code>0.6</code> <p>Returns:</p> Type Description <code>Any</code> <p>condition matched single item.</p> <p>Raises:</p> Type Description <code>ItemNotFoundError</code> <p>Failed to find an item that matches the condition.</p> <code>MultipleItemFoundError</code> <p>Failed to identify an item that matches the condition.</p>"},{"location":"common/#caret_analyze.common.util.Util.find_similar_one_multi_keys","title":"<code>find_similar_one_multi_keys(target_names, items, keys=lambda x: x, th=0.6)</code>  <code>staticmethod</code>","text":"<p>Get a single item that matches the multi conditions.</p> <p>Parameters:</p> Name Type Description Default <code>target_names</code> <code>Dict[str, str]</code> <p>target_names</p> required <code>items</code> <code>Collection[Any]</code> <p>Items to be searched.</p> required <code>keys</code> <code>Callable[[Any], Dict[str, str]]</code> <p>key</p> <code>lambda x: x</code> <code>th</code> <code>float</code> <p>Similarity judgment threshold. A candidate is mentioned only if it is higher than the threshold.</p> <code>0.6</code> <p>Returns:</p> Type Description <code>Any</code> <p>conditions matched single item.</p> <p>Raises:</p> Type Description <code>ItemNotFoundError</code> <p>Failed to find an item that matches the conditions.</p> <code>MultipleItemFoundError</code> <p>Failed to identify an item that matches the conditions.</p>"},{"location":"common/#caret_analyze.common.util.Util.flatten","title":"<code>flatten(x)</code>  <code>staticmethod</code>","text":"<p>Expand double nested Iterable to List.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Iterable[Iterable[Any]]</code> <p>Target to flatten.</p> required <p>Returns:</p> Type Description <code>List[Any]</code> <p>Flattened list.</p>"},{"location":"common/#caret_analyze.common.util.Util.get_ext","title":"<code>get_ext(path)</code>  <code>staticmethod</code>","text":"<p>Get extension from path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>path name to get extension.</p> required <p>Returns:</p> Type Description <code>str</code> <p>extension.</p>"},{"location":"common/#caret_analyze.common.util.Util.get_ext--note","title":"Note","text":"<pre><code>This function is duplicated. see: ext in Util.\n</code></pre>"},{"location":"common/#caret_analyze.common.util.Util.ns_to_ms","title":"<code>ns_to_ms(x)</code>  <code>staticmethod</code>","text":"<p>Convert nanosecond to millisecond.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>time in nano-second.</p> required <p>Returns:</p> Type Description <code>float</code> <p>time in millisecond.</p>"},{"location":"common/#caret_analyze.common.util.Util.num_digit","title":"<code>num_digit(i)</code>  <code>staticmethod</code>","text":"<p>Get number of digits in decimal.</p> <p>Parameters:</p> Name Type Description Default <code>i</code> <code>int</code> <p>number.</p> required <p>Returns:</p> Type Description <code>int</code> <p>digits.</p>"},{"location":"common/#caret_analyze.common.util.Util.to_ns_and_name","title":"<code>to_ns_and_name(nodename)</code>  <code>staticmethod</code>","text":"<p>Convert fully qualified node name.</p> <p>Parameters:</p> Name Type Description Default <code>nodename</code> <code>str</code> <p>fully qualified node name.</p> required <p>Returns:</p> Type Description <code>Tuple[str, str]</code> <p>name space, node name.</p>"},{"location":"exceptions/","title":"exceptions","text":"<p>Exceptions package.</p> <p>This package defines exceptions raised by CARET.</p>"},{"location":"exceptions/#caret_analyze.exceptions.Error","title":"<code>Error</code>","text":"<p>         Bases: <code>Exception</code></p> <p>Base class for exception in this module.</p> <p>Use this class when catching CARET-related errors.</p>"},{"location":"exceptions/#caret_analyze.exceptions.Error--note","title":"Note:","text":"<p>The inherited class defines a constructor unnecessarily. Refactoring is needed.</p>"},{"location":"exceptions/#caret_analyze.exceptions.InvalidArgumentError","title":"<code>InvalidArgumentError</code>","text":"<p>         Bases: <code>Error</code></p> <p>Failed to process function.</p>"},{"location":"exceptions/#caret_analyze.exceptions.InvalidReaderError","title":"<code>InvalidReaderError</code>","text":"<p>         Bases: <code>Error</code></p> <p>Failed to load architecture.</p>"},{"location":"exceptions/#caret_analyze.exceptions.InvalidRecordsError","title":"<code>InvalidRecordsError</code>","text":"<p>         Bases: <code>Error</code></p> <p>Given Records does not have the necessary columns.</p>"},{"location":"exceptions/#caret_analyze.exceptions.InvalidTraceFormatError","title":"<code>InvalidTraceFormatError</code>","text":"<p>         Bases: <code>Error</code></p> <p>Failed to load trace data.</p>"},{"location":"exceptions/#caret_analyze.exceptions.InvalidYamlFormatError","title":"<code>InvalidYamlFormatError</code>","text":"<p>         Bases: <code>Error</code></p> <p>Failed to load yaml.</p>"},{"location":"exceptions/#caret_analyze.exceptions.ItemNotFoundError","title":"<code>ItemNotFoundError</code>","text":"<p>         Bases: <code>Error</code></p> <p>Failed to identify an item that matches the condition.</p>"},{"location":"exceptions/#caret_analyze.exceptions.MultipleItemFoundError","title":"<code>MultipleItemFoundError</code>","text":"<p>         Bases: <code>Error</code></p> <p>Failed to identify an item that matches the condition.</p>"},{"location":"exceptions/#caret_analyze.exceptions.TraceResultAnalyzeError","title":"<code>TraceResultAnalyzeError</code>","text":"<p>         Bases: <code>Error</code></p> <p>Failed to parse trace results.</p>"},{"location":"exceptions/#caret_analyze.exceptions.TraceResultAnalyzeError.__init__","title":"<code>__init__(*args)</code>","text":"<p>Construct exception instance.</p>"},{"location":"exceptions/#caret_analyze.exceptions.UnsupportedNodeRecordsError","title":"<code>UnsupportedNodeRecordsError</code>","text":"<p>         Bases: <code>Error</code></p> <p>Failed to calculate node path records.</p>"},{"location":"exceptions/#caret_analyze.exceptions.UnsupportedTypeError","title":"<code>UnsupportedTypeError</code>","text":"<p>         Bases: <code>Error</code></p> <p>Given type is unsupported.</p>"},{"location":"infra/","title":"infra","text":""},{"location":"infra/#caret_analyze.infra.InfraBase","title":"<code>InfraBase</code>","text":"<p>infrastructure base class.</p>"},{"location":"infra/#caret_analyze.infra.Lttng","title":"<code>Lttng</code>","text":"<p>         Bases: <code>InfraBase</code></p> <p>Lttng data container class.</p> <p>This class is a singleton in order to retain information. The main processing is done by LttngInfo and RecordsSource.</p>"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.compose_callback_records","title":"<code>compose_callback_records()</code>","text":"<p>Compose callback records of all communications in one records.</p> <p>Returns:</p> Type Description <code>RecordsInterface</code> <p>Columns</p> <ul> <li>callback_start_timestamp</li> <li>callback_end_timestamp</li> <li>is_intra_process</li> <li>callback_object</li> </ul>"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.compose_inter_proc_comm_records","title":"<code>compose_inter_proc_comm_records()</code>","text":"<p>Compose inter process communication records of all communications in one records.</p> <p>Returns:</p> Type Description <code>RecordsInterface</code> <p>Columns</p> <ul> <li>callback_object</li> <li>callback_start_timestamp</li> <li>publisher_handle</li> <li>rclcpp_publish_timestamp</li> <li>rcl_publish_timestamp (Optional)</li> <li>dds_write_timestamp (Optional)</li> </ul>"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.compose_intra_proc_comm_records","title":"<code>compose_intra_proc_comm_records()</code>","text":"<p>Compose intra process communication records of all communications in one records.</p> <p>Returns:</p> Type Description <code>RecordsInterface</code> <p>Columns</p> <ul> <li>callback_object</li> <li>callback_start_timestamp</li> <li>publisher_handle</li> <li>rclcpp_publish_timestamp</li> <li>message_timestamp</li> </ul>"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_callback_groups","title":"<code>get_callback_groups(node)</code>","text":"<p>Get callback group information.</p> <p>Returns:</p> Type Description <code>Sequence[CallbackGroupValue]</code>"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_executors","title":"<code>get_executors()</code>","text":"<p>Get executors information.</p> <p>Returns:</p> Type Description <code>Sequence[ExecutorInfo]</code>"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_node_names_and_cb_symbols","title":"<code>get_node_names_and_cb_symbols(callback_group_id)</code>","text":"<p>Get node names and callback symbols from callback group id.</p> <p>Returns:</p> Type Description <code>Sequence[Tuple[Optional[str], Optional[str]]]</code> <p>node names and callback symbols. tuple structure: (node_name, callback_symbol)</p>"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_nodes","title":"<code>get_nodes()</code>","text":"<p>Get nodes.</p> <p>Returns:</p> Type Description <code>Sequence[NodeValueWithId]</code> <p>nodes info.</p>"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_publisher_qos","title":"<code>get_publisher_qos(pub)</code>","text":"<p>Get publisher qos.</p> <p>Parameters:</p> Name Type Description Default <code>pub</code> <code>PublisherValueLttng</code> <p>target publisher</p> required <p>Returns:</p> Type Description <code>Qos</code>"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_publishers","title":"<code>get_publishers(node)</code>","text":"<p>Get publishers information.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>NodeValue</code> <p>target node.</p> required <p>Returns:</p> Type Description <code>Sequence[PublisherInfoLttng]</code>"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_rmw_impl","title":"<code>get_rmw_impl()</code>","text":"<p>Get rmw implementation.</p> <p>Returns:</p> Type Description <code>str</code> <p>rmw_implementation</p>"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_service_callbacks","title":"<code>get_service_callbacks(node)</code>","text":"<p>Get service callbacks information.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>NodeValue</code> <p>target node name.</p> required <p>Returns:</p> Type Description <code>Sequence[ServiceCallbackInfoLttng]</code>"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_subscription_callbacks","title":"<code>get_subscription_callbacks(node)</code>","text":"<p>Get subscription callbacks information.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>NodeValue</code> <p>target node name.</p> required <p>Returns:</p> Type Description <code>Sequence[SubscriptionCallbackInfoLttng]</code>"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_subscription_qos","title":"<code>get_subscription_qos(sub)</code>","text":"<p>Get subscription qos.</p> <p>Parameters:</p> Name Type Description Default <code>sub</code> <code>SubscriptionCallbackValueLttng</code> <p>target subscription</p> required <p>Returns:</p> Type Description <code>Qos</code>"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_timer_callbacks","title":"<code>get_timer_callbacks(node)</code>","text":"<p>Get timer callback values.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>NodeValue</code> <p>target node name.</p> required <p>Returns:</p> Type Description <code>Sequence[TimerCallbackInfoLttng]</code>"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_timers","title":"<code>get_timers(node)</code>","text":"<p>Get timers information.</p> <p>Returns:</p> Type Description <code>Sequence[TimerValue]</code>"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_trace_creation_datetime","title":"<code>get_trace_creation_datetime()</code>","text":"<p>Get trace creation datetime.</p> <p>Returns:</p> Name Type Description <code>trace_creation_datetime</code> <code>datetime</code> <p>Date and time the trace data was created.</p>"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_trace_range","title":"<code>get_trace_range()</code>","text":"<p>Get trace range.</p> <p>Returns:</p> Name Type Description <code>trace_range</code> <code>Tuple[datetime, datetime]</code> <p>Trace begin time and trace end time.</p>"},{"location":"infra/#caret_analyze.infra.RecordsProvider","title":"<code>RecordsProvider</code>","text":""},{"location":"infra/#caret_analyze.infra.interface.RecordsProvider.callback_records","title":"<code>callback_records(callback_info)</code>  <code>abstractmethod</code>","text":"<p>Compose callback records.</p> <p>Parameters:</p> Name Type Description Default <code>callback_info</code> <code>CallbackStructValue</code> <p>[description]</p> required <p>Returns:</p> Type Description <code>RecordsInterface</code> <p>[description]</p>"},{"location":"infra/#caret_analyze.infra.interface.RecordsProvider.variable_passing_records","title":"<code>variable_passing_records(variable_passing_info)</code>  <code>abstractmethod</code>","text":"<p>Compose variable passing records.</p> <p>Parameters:</p> Name Type Description Default <code>variable_passing_info</code> <code>VariablePassingStructValue</code> <p>variable passing information</p> required <p>Returns:</p> Type Description <code>RecordsInterface</code>"},{"location":"infra/#caret_analyze.infra.RecordsProviderLttng","title":"<code>RecordsProviderLttng</code>","text":"<p>         Bases: <code>RuntimeDataProvider</code></p> <p>Records are processed and measurement results are calculated.</p> <p>In addition to merging, filtering and other operations are performed here.</p>"},{"location":"infra/#caret_analyze.infra.lttng.records_provider_lttng.RecordsProviderLttng.callback_records","title":"<code>callback_records(callback)</code>","text":"<p>Return callback duration records.</p> <p>Parameters:</p> Name Type Description Default <code>callback</code> <code>CallbackStructValue</code> <p>target callback value.</p> required <p>Returns:</p> Type Description <code>RecordsInterface</code> <p>Columns</p> <ul> <li>[callback_name]/callback_start_timestamp</li> <li>[callback_name]/callback_end_timestamp</li> </ul>"},{"location":"infra/#caret_analyze.infra.lttng.records_provider_lttng.RecordsProviderLttng.communication_records","title":"<code>communication_records(comm_val)</code>","text":"<p>Provide communication records.</p> <p>Parameters:</p> Name Type Description Default <code>comm_val</code> <code>CommunicationStructValue</code> <p>communication value.</p> required <p>Returns:</p> Type Description <code>RecordsInterface</code> <p>Columns</p> <ul> <li>[topic_name]/rclcpp_publish_timestamp</li> <li>[topic_name]/rcl_publish_timestamp (Optional)</li> <li>[topic_name]/dds_publish_timestamp (Optional)</li> <li>[callback_name]/callback_start_timestamp</li> </ul>"},{"location":"infra/#caret_analyze.infra.lttng.records_provider_lttng.RecordsProviderLttng.publish_records","title":"<code>publish_records(publisher)</code>","text":"<p>Return publish records.</p> <p>Parameters:</p> Name Type Description Default <code>publisher</code> <code>PublisherStructValue</code> <p>target publisher</p> required <p>Returns:</p> Type Description <code>RecordsInterface</code> <p>Columns</p> <ul> <li>[topic_name]/rclcpp_publish_timestamp</li> <li>[topic_name]/rclcpp_intra_publish_timestamp (Optional)</li> <li>[topic_name]/rclcpp_inter_publish_timestamp (Optional)</li> <li>[topic_name]/rcl_publish_timestamp (Optional)</li> <li>[topic_name]/dds_write_timestamp (Optional)</li> <li>[topic_name]/message_timestamp</li> <li>[topic_name]/source_timestamp (Optional)</li> </ul> <ul> <li>[topic_name]/tilde_publish_timestamp (Optional)</li> <li>[topic_name]/tilde_message_id (Optional)</li> </ul>"},{"location":"infra/#caret_analyze.infra.lttng.records_provider_lttng.RecordsProviderLttng.subscribe_records","title":"<code>subscribe_records(subscription)</code>","text":"<p>Provide subscription records.</p> <p>Parameters:</p> Name Type Description Default <code>subscription</code> <code>SubscriptionStructValue</code> <p>Target subscription value.</p> required <p>Returns:</p> Type Description <code>RecordsInterface</code> <p>Columns</p> <ul> <li>[callback_name]/callback_start_timestamp</li> <li>[topic_name]/message_timestamp</li> <li>[topic_name]/source_timestamp</li> </ul> <p>Raises:</p> Type Description <code>InvalidArgumentError</code>"},{"location":"infra/#caret_analyze.infra.lttng.records_provider_lttng.RecordsProviderLttng.timer_records","title":"<code>timer_records(timer)</code>","text":"<p>Return timer records.</p> <p>Parameters:</p> Name Type Description Default <code>timer</code> <code>TimerStructValue</code> <p>[description]</p> required <p>Returns:</p> Type Description <code>RecordsInterface</code> <p>Columns</p> <ul> <li>[callback_name]/timer_event</li> <li>[callback_name]/callback_start</li> <li>[callback_name]/callback_end</li> </ul>"},{"location":"infra/#caret_analyze.infra.lttng.records_provider_lttng.RecordsProviderLttng.variable_passing_records","title":"<code>variable_passing_records(variable_passing_info)</code>","text":"<p>Return variable passing records.</p> <p>Parameters:</p> Name Type Description Default <code>variable_passing_info</code> <code>VariablePassingStructValue</code> <p>target variable passing info.</p> required <p>Returns:</p> Type Description <code>RecordsInterface</code> <p>Columns</p> <ul> <li>[callback_name]/callback_end_timestamp</li> <li>[callback_name]/callback_start_timestamp</li> </ul>"},{"location":"plot/","title":"plot","text":""},{"location":"plot/#caret_analyze.plot.Plot","title":"<code>Plot</code>","text":"<p>Facade class for plot.</p>"},{"location":"plot/#caret_analyze.plot.plot_facade.Plot.create_callback_frequency_plot","title":"<code>create_callback_frequency_plot(callbacks)</code>","text":"<p>Get callback frequency plot.</p> <p>Parameters:</p> Name Type Description Default <code>callbacks</code> <code>Collection[CallbackBase]</code> <p>Target callbacks. This also accepts multiple CallbackBase inputs by unpacking.</p> required <p>Returns:</p> Type Description <code>PlotBase</code>"},{"location":"plot/#caret_analyze.plot.plot_facade.Plot.create_callback_latency_plot","title":"<code>create_callback_latency_plot(callbacks)</code>","text":"<p>Get callback latency plot.</p> <p>Parameters:</p> Name Type Description Default <code>callbacks</code> <code>Collection[CallbackBase]</code> <p>Target callbacks. This also accepts multiple CallbackBase inputs by unpacking.</p> required <p>Returns:</p> Type Description <code>PlotBase</code>"},{"location":"plot/#caret_analyze.plot.plot_facade.Plot.create_callback_period_plot","title":"<code>create_callback_period_plot(callbacks)</code>","text":"<p>Get callback period plot.</p> <p>Parameters:</p> Name Type Description Default <code>callbacks</code> <code>Collection[CallbackBase]</code> <p>Target callbacks. This also accepts multiple CallbackBase inputs by unpacking.</p> required <p>Returns:</p> Type Description <code>PlotBase</code>"},{"location":"plot/#caret_analyze.plot.plot_facade.Plot.create_callback_scheduling_plot","title":"<code>create_callback_scheduling_plot(target_objects, lstrip_s=0, rstrip_s=0)</code>","text":"<p>Get CallbackSchedulingPlot instance.</p> <p>Parameters:</p> Name Type Description Default <code>lstrip_s</code> <code>float, optional</code> <p>Start time of cropping range, by default 0.</p> <code>0</code> <code>rstrip_s</code> <code>float</code> <p>End point of cropping range, by default 0.</p> <code>0</code> <p>Returns:</p> Type Description <code>CallbackSchedulingPlot</code>"},{"location":"plot/#caret_analyze.plot.plot_facade.Plot.create_frequency_timeseries_plot","title":"<code>create_frequency_timeseries_plot(target_objects)</code>","text":"<p>Get frequency timeseries plot instance.</p> <p>Parameters:</p> Name Type Description Default <code>target_object</code> <code>TimeSeriesTypes</code> <p>TimeSeriesPlotTypes = Union[ CallbackBase, Communication, Union[Publisher, Subscription] ] Instances that are the sources of the plotting. This also accepts multiple inputs by unpacking.</p> required <p>Returns:</p> Type Description <code>PlotBase</code>"},{"location":"plot/#caret_analyze.plot.plot_facade.Plot.create_latency_timeseries_plot","title":"<code>create_latency_timeseries_plot(target_objects)</code>","text":"<p>Get latency timeseries plot instance.</p> <p>Parameters:</p> Name Type Description Default <code>target_object</code> <code>TimeSeriesTypes</code> <p>TimeSeriesPlotTypes = Union[ CallbackBase, Communication, Union[Publisher, Subscription] ] Instances that are the sources of the plotting. This also accepts multiple inputs by unpacking.</p> required <p>Returns:</p> Type Description <code>PlotBase</code>"},{"location":"plot/#caret_analyze.plot.plot_facade.Plot.create_period_timeseries_plot","title":"<code>create_period_timeseries_plot(target_objects)</code>","text":"<p>Get period timeseries plot instance.</p> <p>Parameters:</p> Name Type Description Default <code>target_object</code> <code>TimeSeriesTypes</code> <p>TimeSeriesPlotTypes = Union[ CallbackBase, Communication, Union[Publisher, Subscription] ] Instances that are the sources of the plotting. This also accepts multiple inputs by unpacking.</p> required <p>Returns:</p> Type Description <code>PlotBase</code>"},{"location":"plot/#caret_analyze.plot.plot_facade.Plot.create_response_time_histogram_plot","title":"<code>create_response_time_histogram_plot(paths, case='best-to-worst', binsize_ns=10000000)</code>","text":"<p>Get ResponseTimePlot instance.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Collection[Path]</code> <p>Target path. This also accepts multiple path inputs by unpacking.</p> required <code>case</code> <code>str, optional</code> <p>response time calculation method, by default best-to-worst. supported case: [best-to-worst/best/worst].</p> <code>'best-to-worst'</code> <code>binsize_ns</code> <code>int, optional</code> <p>binsize [ns], by default 1000000.</p> <code>10000000</code> <p>Returns:</p> Type Description <code>ResponseTimePlot</code>"},{"location":"plot/#caret_analyze.plot.PlotBase","title":"<code>PlotBase</code>","text":"<p>Plot base class.</p>"},{"location":"plot/#caret_analyze.plot.plot_base.PlotBase.save","title":"<code>save(export_path, title='', xaxis_type=None, ywheel_zoom=None, full_legends=None)</code>","text":"<p>Export a graph using the bokeh library.</p> <p>Parameters:</p> Name Type Description Default <code>export_path</code> <code>str</code> <p>The graph will be saved as a file.</p> required <code>title</code> <code>str</code> <p>Title of the graph, by default ''.</p> <code>''</code> <code>xaxis_type</code> <code>str</code> <p>Type of x-axis of the graph to be plotted. \"system_time\", \"index\", or \"sim_time\" can be specified.</p> <code>None</code> <code>ywheel_zoom</code> <code>bool</code> <p>If True, the drawn graph can be expanded in the y-axis direction by the mouse wheel.</p> <code>None</code> <code>full_legends</code> <code>bool</code> <p>If True, all legends are drawn even if the number of legends exceeds the threshold.</p> <code>None</code> <p>Raises:</p> Type Description <code>UnsupportedTypeError</code> <p>Argument xaxis_type is not \"system_time\", \"index\", or \"sim_time\".</p>"},{"location":"plot/#caret_analyze.plot.plot_base.PlotBase.show","title":"<code>show(xaxis_type=None, ywheel_zoom=None, full_legends=None, export_path=None)</code>","text":"<p>Draw a graph using the bokeh library.</p> <p>Parameters:</p> Name Type Description Default <code>xaxis_type</code> <code>str</code> <p>Type of x-axis of the graph to be plotted. \"system_time\", \"index\", or \"sim_time\" can be specified.</p> <code>None</code> <code>ywheel_zoom</code> <code>bool</code> <p>If True, the drawn graph can be expanded in the y-axis direction by the mouse wheel.</p> <code>None</code> <code>full_legends</code> <code>bool</code> <p>If True, all legends are drawn even if the number of legends exceeds the threshold.</p> <code>None</code> <code>export_path</code> <code>str, optional</code> <p>The graph will be saved as a file. This option is deprecated, please use save method.</p> <code>None</code> <p>Returns:</p> Type Description <code>bokeh.plotting.Figure</code> <p>Raises:</p> Type Description <code>UnsupportedTypeError</code> <p>Argument xaxis_type is not \"system_time\", \"index\", or \"sim_time\".</p>"},{"location":"record/","title":"record","text":""},{"location":"record/#caret_analyze.record.Frequency","title":"<code>Frequency</code>","text":""},{"location":"record/#caret_analyze.record.records_service.frequency.Frequency.__init__","title":"<code>__init__(records, target_column=None)</code>","text":"<p>Construct an instance.</p> <p>Parameters:</p> Name Type Description Default <code>records</code> <code>RecordsInterface</code> <p>records to calculate frequency.</p> required <code>target_column</code> <code>Optional[str], optional</code> <p>Column name of timestamps used in the calculation, by default None If None, the first column of records is selected.</p> <code>None</code>"},{"location":"record/#caret_analyze.record.records_service.frequency.Frequency.to_records","title":"<code>to_records(interval_ns=1000000000, base_timestamp=None, until_timestamp=None)</code>","text":"<p>Calculate frequency records.</p> <p>Parameters:</p> Name Type Description Default <code>interval_ns</code> <code>int</code> <p>Interval used for frequency calculation, by default 1000000000 [ns]. The number of timestamps that exist in this time interval is counted.</p> <code>1000000000</code> <code>base_timestamp</code> <code>Optional[int], optional</code> <p>Initial timestamp used for frequency calculation, by default None. If None, earliest timestamp is used.</p> <code>None</code> <code>until_timestamp</code> <code>Optional[int], optional</code> <p>End time of measurement. If None, oldest timestamp is used.</p> <code>None</code> <p>Returns:</p> Type Description <code>RecordsInterface</code> <p>frequency records. Columns - {timestamp_column} - {frequency_column}</p>"},{"location":"record/#caret_analyze.record.Latency","title":"<code>Latency</code>","text":""},{"location":"record/#caret_analyze.record.records_service.latency.Latency.__init__","title":"<code>__init__(records, start_column=None, end_column=None)</code>","text":"<p>Construct an instance.</p> <p>Parameters:</p> Name Type Description Default <code>records</code> <code>RecordsInterface</code> <p>records to calculate latency.</p> required <code>start_column</code> <code>Optional[str], optional</code> <p>Column name of start timestamps used in the calculation, by default None If None, the first column of records is selected.</p> <code>None</code> <code>end_column</code> <code>Optional[str], optional</code> <p>Column name of end timestamps used in the calculation, by default None If None, the last column of records is selected.</p> <code>None</code>"},{"location":"record/#caret_analyze.record.records_service.latency.Latency.to_records","title":"<code>to_records()</code>","text":"<p>Calculate latency records.</p> <p>Returns:</p> Type Description <code>RecordsInterface</code> <p>latency records. Columns - {start_timestamp_column} - {latency_column}</p>"},{"location":"record/#caret_analyze.record.Period","title":"<code>Period</code>","text":""},{"location":"record/#caret_analyze.record.records_service.period.Period.__init__","title":"<code>__init__(records, target_column=None)</code>","text":"<p>Construct an instance.</p> <p>Parameters:</p> Name Type Description Default <code>records</code> <code>RecordsInterface</code> <p>records to calculate period.</p> required <code>target_column</code> <code>Optional[str], optional</code> <p>Column name of timestamps used in the calculation, by default None If None, the first column of records is selected.</p> <code>None</code>"},{"location":"record/#caret_analyze.record.records_service.period.Period.to_records","title":"<code>to_records()</code>","text":"<p>Calculate period records.</p> <p>Returns:</p> Type Description <code>RecordsInterface</code> <p>period records. Columns - {timestamp_column} - {period_column}</p>"},{"location":"record/#caret_analyze.record.Range","title":"<code>Range</code>","text":"<p>Class that calculates minimum/maximum timestamps from a list of records.</p>"},{"location":"record/#caret_analyze.record.records_service.range.Range.get_range","title":"<code>get_range()</code>","text":"<p>Get minimum and maximum timestamps.</p> <p>Returns:</p> Type Description <code>Tuple[int, int]</code> <p>Minimum and Maximum timestamps.</p>"},{"location":"record/#caret_analyze.record.records_service.range.Range.get_range--notes","title":"Notes","text":"<p>The first column is system time for now. The other columns could be other than system time. Only the system time is picked out here.</p>"},{"location":"record/#caret_analyze.record.RecordInterface","title":"<code>RecordInterface</code>","text":"<p>Interface for Record class.</p> <p>This behavior is similar to the dictionary type. To avoid conflicts with the pybind metaclass, ABC is not used.</p>"},{"location":"record/#caret_analyze.record.interface.RecordInterface.columns","title":"<code>columns: Set[str]</code>  <code>property</code> <code>abstractmethod</code>","text":"<p>Get column names.</p> <p>Returns:</p> Type Description <code>Set[str]</code> <p>Column names.</p>"},{"location":"record/#caret_analyze.record.interface.RecordInterface.data","title":"<code>data: Dict[str, int]</code>  <code>property</code> <code>abstractmethod</code>","text":"<p>Convert to dictionary.</p> <p>Returns:</p> Name Type Description <code>data</code> <code>Dict[str, int]</code> <p>dictionary data.</p>"},{"location":"record/#caret_analyze.record.interface.RecordInterface.add","title":"<code>add(key, stamp)</code>  <code>abstractmethod</code>","text":"<p>Add(Update) column value.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>key name to set.</p> required <code>stamp</code> <code>int</code> <p>key value to set.</p> required"},{"location":"record/#caret_analyze.record.interface.RecordInterface.change_dict_key","title":"<code>change_dict_key(old_key, new_key)</code>  <code>abstractmethod</code>","text":"<p>Change columns name.</p> <p>Parameters:</p> Name Type Description Default <code>old_key</code> <code>str</code> <p>column name to be changed.</p> required <code>new_key</code> <code>str</code> <p>new column name.</p> required"},{"location":"record/#caret_analyze.record.interface.RecordInterface.drop_columns","title":"<code>drop_columns(columns)</code>  <code>abstractmethod</code>","text":"<p>Drop columns method.</p> <p>Parameters:</p> Name Type Description Default <code>columns</code> <code>List[str]</code> <p>columns to be dropped.</p> required"},{"location":"record/#caret_analyze.record.interface.RecordInterface.equals","title":"<code>equals(other)</code>  <code>abstractmethod</code>","text":"<p>Compare record.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>RecordInterface</code> <p>comparison target.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if record data is same, otherwise false.</p>"},{"location":"record/#caret_analyze.record.interface.RecordInterface.get","title":"<code>get(key)</code>  <code>abstractmethod</code>","text":"<p>Get value for specific column.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>key name to get.</p> required <p>Returns:</p> Type Description <code>int</code> <p>Value for selected key.</p>"},{"location":"record/#caret_analyze.record.interface.RecordInterface.get_with_default","title":"<code>get_with_default(key, v)</code>  <code>abstractmethod</code>","text":"<p>Get value for specific column.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>key name to get.</p> required <code>v</code> <code>int</code> <p>default value.</p> required <p>Returns:</p> Type Description <code>int</code> <p>Value for selected key.</p>"},{"location":"record/#caret_analyze.record.interface.RecordInterface.merge","title":"<code>merge(other)</code>  <code>abstractmethod</code>","text":"<p>Merge record.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>RecordInterface</code> <p>merge target.</p> required <code>inplace</code> <code>bool</code> <p>inplace record if true, otherwise false.</p> required <p>Returns:</p> Type Description <code>Record</code> <p>Merged record class if inplace = false, otherwise None.</p>"},{"location":"record/#caret_analyze.record.RecordsInterface","title":"<code>RecordsInterface</code>","text":"<p>Interface for Record class.</p> <p>To avoid conflicts with the pybind metaclass, ABC is not used.</p>"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.columns","title":"<code>columns: List[str]</code>  <code>property</code> <code>abstractmethod</code>","text":"<p>Get column names.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>Columns.</p>"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.data","title":"<code>data: Sequence[RecordInterface]</code>  <code>property</code> <code>abstractmethod</code>","text":"<p>Get records list.</p> <p>Returns:</p> Type Description <code>Sequence[RecordInterface]</code> <p>Records list.</p>"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.append_column","title":"<code>append_column(column, values)</code>  <code>abstractmethod</code>","text":"<p>Append column to records.</p> <p>Parameters:</p> Name Type Description Default <code>column</code> <code>ColumnValue</code> <p>column</p> required <code>values</code> <code>List[int]</code> <p>values</p> required"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.bind_drop_as_delay","title":"<code>bind_drop_as_delay()</code>  <code>abstractmethod</code>","text":"<p>Convert the dropped points to records converted as delay.</p>"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.clone","title":"<code>clone()</code>  <code>abstractmethod</code>","text":"<p>Get duplicated records.</p> <p>Returns:</p> Type Description <code>RecordsInterface</code> <p>deep-copied records.</p>"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.concat","title":"<code>concat(other)</code>  <code>abstractmethod</code>","text":"<p>Concat records.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>RecordsInterface</code> <p>records to be concatenated.</p> required <p>Returns:</p> Type Description <code>RecordsInterface</code> <p>concatenated records if inplace=False, otherwise None.</p>"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.drop_columns","title":"<code>drop_columns(columns)</code>  <code>abstractmethod</code>","text":"<p>Drop columns.</p> <p>Parameters:</p> Name Type Description Default <code>columns</code> <code>List[str]</code> <p>columns to be dropped.</p> required"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.equals","title":"<code>equals(other)</code>  <code>abstractmethod</code>","text":"<p>Equals method.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>RecordsInterface</code> <p>comparison target.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>true if record data is same, otherwise false.</p>"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.filter_if","title":"<code>filter_if(f)</code>  <code>abstractmethod</code>","text":"<p>Get filtered records.</p> <p>Parameters:</p> Name Type Description Default <code>f</code> <code>Callable[[RecordInterface], bool]</code> <p>condition function.</p> required <code>inplace</code> <code>bool</code> <p>inplace original instance if true.</p> required"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.groupby","title":"<code>groupby(columns)</code>  <code>abstractmethod</code>","text":"<p>Split based on the value of the given column name.</p>"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.merge","title":"<code>merge(right_records, join_left_key, join_right_key, columns, how, *, progress_label=None)</code>  <code>abstractmethod</code>","text":"<p>Merge records by key match.</p> <p>Parameters:</p> Name Type Description Default <code>right_records</code> <code>RecordInterface</code> <p>merge target.</p> required <code>join_left_key</code> <code>str</code> <p>Key to use for matching.</p> required <code>join_right_key</code> <code>str</code> <p>Key to use for matching.</p> required <code>columns</code> <code>List[str]</code> <p>columns</p> required <code>how</code> <code>str</code> <p>merge type. [inner/right/left/outer]</p> required <code>progress_label</code> <code>str</code> <p>label for progress bar. cpp impl only.</p> <code>None</code> <p>Returns:</p> Type Description <code>RecordsInterface</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; left_records = Records([\n    Record({'join_key': 1, 'left_other': 1}),\n    Record({'join_key': 2, 'left_other': 2}),\n])\n&gt;&gt;&gt; right_records = Records([\n    Record({'join_key': 2, 'right_other': 3}),\n    Record({'join_key': 1, 'right_other': 4}),\n])\n&gt;&gt;&gt; expected = Records([\n    Record({'join_key': 1, 'left_other': 1, 'right_other': 4}),\n    Record({'join_key': 2, 'left_other': 2, 'right_other': 3}),\n])\n&gt;&gt;&gt; left_records.merge(right_records, 'join_key').equals(expected)\nTrue\n</code></pre>"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.merge_sequential","title":"<code>merge_sequential(right_records, left_stamp_key, right_stamp_key, join_left_key, join_right_key, columns, how, *, progress_label=None)</code>  <code>abstractmethod</code>","text":"<p>Merge chronologically contiguous records.</p> <p>Merge left_records[left_key] and the right_records[right_key] that occurred immediately after it. If join_key is set, left_records[join_key]==right_records[join_key] is added as condition.</p> <p>Parameters:</p> Name Type Description Default <code>right_records</code> <code>RecordsInterface</code> <p>merge target.</p> required <code>left_stamp_key</code> <code>str</code> <p>left records key name to use for comparison in time series merge.</p> required <code>right_stamp_key</code> <code>str</code> <p>right records key name to use for comparison in time series merge.</p> required <code>join_left_key</code> <code>str</code> <p>join key name to use equal condition.</p> required <code>join_right_key</code> <code>str</code> <p>join key name to use equal condition.</p> required <code>how</code> <code>str</code> <p>merge type. [inner/right/left/outer]</p> required <code>columns</code> <code>List[str]</code> <p>columns</p> required <code>progress_label</code> <code>str</code> <p>label for progress bar. cpp impl only.</p> <code>None</code>"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.merge_sequential--records","title":"Records","text":"<p>RecordsInterface     Merged records.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; left_records = Records([\n    Record({'join_key': 1, 'left_stamp_key': 0}),\n    Record({'join_key': 2, 'left_stamp_key': 3})\n])\n&gt;&gt;&gt; right_records = Records([\n    Record({'join_key': 2, 'right_stamp_key': 5}),\n    Record({'join_key': 1, 'right_stamp_key': 6})\n])\n&gt;&gt;&gt; expected = Records([\n    Record({'join_key': 1, 'left_stamp_key': 0, 'right_stamp_key': 6}),\n    Record({'join_key': 2, 'left_stamp_key': 3, 'right_stamp_key': 5}),\n])\n&gt;&gt;&gt; left_records.merge_sequential(\n    right_records, 'left_stamp_key', 'right_stamp_key', 'join_key', 'inner'\n).equals(expected)\nTrue\n</code></pre>"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.merge_sequential_for_addr_track","title":"<code>merge_sequential_for_addr_track(source_stamp_key, source_key, copy_records, copy_stamp_key, copy_from_key, copy_to_key, sink_records, sink_stamp_key, sink_from_key, columns, *, progress_label=None)</code>  <code>abstractmethod</code>","text":"<p>Merge for tracking addresses when copying occurs.</p> <p>Parameters:</p> Name Type Description Default <code>source_stamp_key</code> <code>str</code> <p>key name indicating time stamp for source records</p> required <code>source_key</code> <code>str</code> <p>Key name indicating the address of the copy source for source records.</p> required <code>copy_records</code> <code>Recordsinterface</code> <p>copy records</p> required <code>copy_stamp_key</code> <code>str</code> <p>key name indicating time stamp for copy records</p> required <code>copy_from_key</code> <code>str</code> <p>Key name indicating the address of the copy source for source records.</p> required <code>copy_to_key</code> <code>str</code> <p>Key name indicating the address of the copy destination</p> required <code>sink_records</code> <code>RecordsInterface</code> <p>sink-side records</p> required <code>sink_stamp_key</code> <code>str</code> <p>key_name indicating time stamp for copy records</p> required <code>sink_from_key</code> <code>str</code> <p>Key name indicating the address of the copy destination</p> required <code>columns</code> <code>List[str]</code> <p>columns</p> required <code>progress_label</code> <code>str</code> <p>label for progress bar. cpp impl only.</p> <code>None</code> <p>Returns:</p> Type Description <code>RecordsInterface</code> <p>Merged records.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; source_records = Records([\n    Record({'source_key': 1, 'source_stamp': 0}),\n])\n&gt;&gt;&gt; copy_records = Records([\n    Record({'copy_from_key': 1, 'copy_to_key': 11, 'copy_stamp_key': 1})\n])\n&gt;&gt;&gt; sink_records = Records([\n    Record({'sink_from_key': 11, 'sink_stamp': 2}),\n    Record({'sink_from_key': 1, 'sink_stamp': 3}),\n])\n&gt;&gt;&gt; expected = Records([\n    Record({'source_stamp':0, 'sink_stamp':3, 'source_key':1}),\n    Record({'source_stamp':0, 'sink_stamp':2, 'source_key':1}),\n])\n&gt;&gt;&gt; source_records.merge_sequential_for_addr_track(\n    'source_stamp', 'source_key', copy_records, 'copy_stamp_key', 'copy_from_key',\n    'copy_to_key', sink_records, 'sink_stamp', 'sink_from_key'\n).equals(expected)\nTrue\n</code></pre>"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.reindex","title":"<code>reindex(columns)</code>","text":"<p>Reindex columns.</p> <p>Parameters:</p> Name Type Description Default <code>columns</code> <code>List[str]</code> <p>columns</p> required"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.rename_columns","title":"<code>rename_columns(columns)</code>  <code>abstractmethod</code>","text":"<p>Rename columns.</p> <p>Parameters:</p> Name Type Description Default <code>columns</code> <code>Dict[str, str]</code> <p>rename params. same as dataframe rename.</p> required"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.sort","title":"<code>sort(key, sub_key=None, ascending=True)</code>  <code>abstractmethod</code>","text":"<p>Sort records.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>key name to used for sort.</p> required <code>sub_key</code> <code>str</code> <p>second key name to used for sort.</p> <code>None</code> <code>ascending</code> <code>bool</code> <p>ascending if True, descending if false.</p> <code>True</code>"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.sort_column_order","title":"<code>sort_column_order(ascending=True, put_none_at_top=True)</code>  <code>abstractmethod</code>","text":"<p>Sort records by ordered columns.</p> <p>Parameters:</p> Name Type Description Default <code>ascending</code> <code>bool</code> <p>ascending if True, descending if false.</p> <code>True</code> <code>put_none_at_top</code> <code>bool</code> <p>put none at top</p> <code>True</code>"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.to_dataframe","title":"<code>to_dataframe()</code>  <code>abstractmethod</code>","text":"<p>Convert to pandas dataframe.</p> <p>Returns:</p> Type Description <code>pandas.DataFrame</code> <p>Records data.</p>"},{"location":"record/#caret_analyze.record.ResponseTime","title":"<code>ResponseTime</code>","text":"<p>Class which calculates response time.</p> <p>Parameters:</p> Name Type Description Default <code>records</code> <code>RecordsInterface</code> <p>records to calculate response time.</p> required <code>input_column</code> <code>str</code> <p>column name for input time.</p> <code>None</code> <code>output_column</code> <code>str</code> <p>column name for output time.</p> <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from caret_analyze import Application, Architecture, Lttng\n&gt;&gt;&gt; from caret_analyze.experiment import ResponseTime\n</code></pre> <pre><code>&gt;&gt;&gt; # Load results\n&gt;&gt;&gt; arch = Architecture('yaml', '/path/to/yaml')\n&gt;&gt;&gt; lttng = Lttng('/path/to/ctf')\n&gt;&gt;&gt; app = Application(arch, lttng)\n</code></pre> <pre><code>&gt;&gt;&gt; # Select target instance\n&gt;&gt;&gt; node = app.get_node('node_name')\n&gt;&gt;&gt; callback = node.callbacks[0]\n&gt;&gt;&gt; callback.summary.pprint()\n</code></pre> <pre><code>&gt;&gt;&gt; # Calculate response time\n&gt;&gt;&gt; records = callback.to_records()\n&gt;&gt;&gt; response = ResponseTime(records)\n&gt;&gt;&gt; response_records = response.to_response_records()\n&gt;&gt;&gt; response_df = response_records.to_dataframe()\n</code></pre> <pre><code>&gt;&gt;&gt; path = app.get_path('path_name')\n&gt;&gt;&gt; records = path.to_records()\n&gt;&gt;&gt; response = ResponseTime(records)\n&gt;&gt;&gt; response_records = response.to_response_records()\n&gt;&gt;&gt; response_df = response_records.to_dataframe()\n</code></pre>"},{"location":"record/#caret_analyze.record.records_service.response_time.ResponseTime.__init__","title":"<code>__init__(records, *, input_column=None, output_column=None)</code>","text":"<p>Construct an instance.</p> <p>Parameters:</p> Name Type Description Default <code>records</code> <code>RecordsInterface</code> <p>records to calculate response time.</p> required <code>input_column</code> <code>Optional[str], optional</code> <p>column name which is input, by default None If None, the first column of records is selected.</p> <code>None</code> <code>output_column</code> <code>Optional[str], optional</code> <p>column name which is output, by default None If None, the last column of records is selected.</p> <code>None</code>"},{"location":"record/#caret_analyze.record.records_service.response_time.ResponseTime.to_best_case_histogram","title":"<code>to_best_case_histogram(binsize_ns=1000000, density=False)</code>","text":"<p>Calculate the best-case histogram for response time.</p> <p>The best case for response time are included message flow latency.</p> <p>Returns:</p> Type Description <code>Tuple[np.ndarray, np.ndarray]</code> <p>frequency, latencies[ns]. ref.  https://numpy.org/doc/stable/reference/generated/numpy.histogram.html</p>"},{"location":"record/#caret_analyze.record.records_service.response_time.ResponseTime.to_best_case_timeseries","title":"<code>to_best_case_timeseries()</code>","text":"<p>Calculate the best-case time series data for response time.</p> <p>The best case for response time are included message flow latency.</p> <p>Returns:</p> Type Description <code>Tuple[np.ndarray, np.ndarray]</code> <p>input time[ns], latency[ns]</p>"},{"location":"record/#caret_analyze.record.records_service.response_time.ResponseTime.to_histogram","title":"<code>to_histogram(binsize_ns=1000000, density=False)</code>","text":"<p>Calculate response time histogram.</p> <p>Parameters:</p> Name Type Description Default <code>binsize_ns</code> <code>int, optional</code> <p>binsize [ns], by default 1000000</p> <code>1000000</code> <code>density</code> <code>bool, optional</code> <p>If False, the result will contain the number of samples in each bin. If True, the result is the value of the probability density function at the bin, normalized such that the integral over the range is 1. Note that the sum of the histogram values will not be equal to 1 unless bins of unity width are chosen; it is not a probability mass function.</p> <code>False</code> <p>Returns:</p> Type Description <code>Tuple[np.ndarray, np.ndarray]</code> <p>frequency, latencies[ns]. ref.  https://numpy.org/doc/stable/reference/generated/numpy.histogram.html</p>"},{"location":"record/#caret_analyze.record.records_service.response_time.ResponseTime.to_records","title":"<code>to_records(*, all_pattern=False)</code>","text":"<p>Calculate response time records.</p> <p>Parameters:</p> Name Type Description Default <code>all_pattern</code> <code>bool, optional</code> <p>If True, get response times with time overlap, by default False. [for debug]</p> <code>False</code> <p>Returns:</p> Type Description <code>RecordsInterface</code> <p>response time records. The best and worst cases alternate line by line. Columns - {input_column} - {output_column}</p>"},{"location":"record/#caret_analyze.record.records_service.response_time.ResponseTime.to_response_records","title":"<code>to_response_records()</code>","text":"<p>Calculate response records.</p> <p>Returns:</p> Type Description <code>RecordsInterface</code> <p>The best and worst cases are separated into separate columns. Columns - {input_column}_min - {input_column}_max - {output_column}</p>"},{"location":"record/#caret_analyze.record.records_service.response_time.ResponseTime.to_worst_case_histogram","title":"<code>to_worst_case_histogram(binsize_ns=1000000, density=False)</code>","text":"<p>Calculate the worst-case histogram for response time.</p> <p>The worst case in response time includes message flow latencies as well as delays caused by various factors such as lost messages.</p> <p>Returns:</p> Type Description <code>Tuple[np.ndarray, np.ndarray]</code> <p>frequency, latencies[ns]. ref.  https://numpy.org/doc/stable/reference/generated/numpy.histogram.html</p>"},{"location":"record/#caret_analyze.record.records_service.response_time.ResponseTime.to_worst_case_timeseries","title":"<code>to_worst_case_timeseries()</code>","text":"<p>Calculate the worst-case time series data for response time.</p> <p>The worst case in response time includes message flow latencies as well as delays caused by various factors such as lost messages.</p> <p>Returns:</p> Type Description <code>Tuple[np.ndarray, np.ndarray]</code> <p>input time[ns], latency[ns]</p>"},{"location":"runtime/","title":"runtime","text":"<p>CARET runtime package.</p> <p>This package provides a set of classes with static (e.g., node names) and dynamic information (e.g., execution times). It has a ROS-friendly class structure that allows application developers to obtain the information they need for evaluation.</p>"},{"location":"runtime/#caret_analyze.runtime.Application","title":"<code>Application</code>","text":"<p>         Bases: <code>Summarizable</code></p> <p>A class that represents the entire application to be measured.</p>"},{"location":"runtime/#caret_analyze.runtime.application.Application.callback_group_names","title":"<code>callback_group_names: List[str]</code>  <code>property</code>","text":"<p>Get callback group names.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>All callback group names defined in the architecture.</p>"},{"location":"runtime/#caret_analyze.runtime.application.Application.callback_groups","title":"<code>callback_groups: List[CallbackGroup]</code>  <code>property</code>","text":"<p>Get callback groups.</p> <p>Returns:</p> Type Description <code>List[CallbackGroup]</code> <p>All callback groups defined in the architecture.</p>"},{"location":"runtime/#caret_analyze.runtime.application.Application.callback_names","title":"<code>callback_names: List[str]</code>  <code>property</code>","text":"<p>Get callback names.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>All callback names defined in the architecture.</p>"},{"location":"runtime/#caret_analyze.runtime.application.Application.callbacks","title":"<code>callbacks: List[CallbackBase]</code>  <code>property</code>","text":"<p>Get callbacks.</p> <p>Returns:</p> Type Description <code>List[CallbackBase]</code> <p>All callbacks defined in the architecture.</p>"},{"location":"runtime/#caret_analyze.runtime.application.Application.communications","title":"<code>communications: List[Communication]</code>  <code>property</code>","text":"<p>Get communications.</p> <p>Returns:</p> Type Description <code>List[Communication]</code> <p>All communications defined in the architecture.</p>"},{"location":"runtime/#caret_analyze.runtime.application.Application.executor_names","title":"<code>executor_names: List[str]</code>  <code>property</code>","text":"<p>Get executor names.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>All executor names defined in the architecture.</p>"},{"location":"runtime/#caret_analyze.runtime.application.Application.executors","title":"<code>executors: List[Executor]</code>  <code>property</code>","text":"<p>Get executors.</p> <p>Returns:</p> Type Description <code>List[Executor]</code> <p>All executors defined in the architecture.</p>"},{"location":"runtime/#caret_analyze.runtime.application.Application.node_names","title":"<code>node_names: List[str]</code>  <code>property</code>","text":"<p>Get node names.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>All node names defined in the architecture.</p>"},{"location":"runtime/#caret_analyze.runtime.application.Application.node_paths","title":"<code>node_paths: List[NodePathStructValue]</code>  <code>property</code>","text":"<p>Get paths.</p> <p>Returns:</p> Type Description <code>List[NodePathStructValue]</code> <p>app node paths defined in the entire application.</p>"},{"location":"runtime/#caret_analyze.runtime.application.Application.nodes","title":"<code>nodes: List[Node]</code>  <code>property</code>","text":"<p>Get nodes.</p> <p>Returns:</p> Type Description <code>List[Node]</code> <p>All nodes defined in the architecture.</p>"},{"location":"runtime/#caret_analyze.runtime.application.Application.path_names","title":"<code>path_names: List[str]</code>  <code>property</code>","text":"<p>Get path names.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>App path names defined in the architecture.</p>"},{"location":"runtime/#caret_analyze.runtime.application.Application.paths","title":"<code>paths: List[Path]</code>  <code>property</code>","text":"<p>Get paths.</p> <p>Returns:</p> Type Description <code>List[Path]</code> <p>All paths defined in the architecture.</p>"},{"location":"runtime/#caret_analyze.runtime.application.Application.publishers","title":"<code>publishers: List[Publisher]</code>  <code>property</code>","text":"<p>Get publishers.</p> <p>Returns:</p> Type Description <code>List[Publisher]</code> <p>All publishers defined in the architecture.</p>"},{"location":"runtime/#caret_analyze.runtime.application.Application.subscriptions","title":"<code>subscriptions: List[Subscription]</code>  <code>property</code>","text":"<p>Get subscriptions.</p> <p>Returns:</p> Type Description <code>List[Subscription]</code> <p>All subscriptions defined in the architecture.</p>"},{"location":"runtime/#caret_analyze.runtime.application.Application.summary","title":"<code>summary: Summary</code>  <code>property</code>","text":"<p>Get summary [override].</p> <p>Returns:</p> Type Description <code>Summary</code> <p>Summary info.</p>"},{"location":"runtime/#caret_analyze.runtime.application.Application.topic_names","title":"<code>topic_names: List[str]</code>  <code>property</code>","text":"<p>Get topic names.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>All topic names defined in architecture.</p>"},{"location":"runtime/#caret_analyze.runtime.application.Application.__init__","title":"<code>__init__(architecture, infra)</code>","text":"<p>Construct an instance.</p> <p>Parameters:</p> Name Type Description Default <code>architecture</code> <code>Architecture</code> <p>Application architecture to be evaluated.</p> required <code>infra</code> <code>InfraBase</code> <p>Measurement results.</p> required <p>Raises:</p> Type Description <code>UnsupportedTypeError</code> <p>Occurs when the invalid infra is given.</p>"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_callback","title":"<code>get_callback(callback_name)</code>","text":"<p>Get a callback that matches the condition.</p> <p>Parameters:</p> Name Type Description Default <code>callback_name</code> <code>str</code> <p>callback name to get.</p> required <p>Returns:</p> Type Description <code>CallbackBase</code> <p>callback that matches the condition.</p> <p>Raises:</p> Type Description <code>InvalidArgumentError</code> <p>Occurs when the given argument type is invalid.</p> <code>ItemNotFoundError</code> <p>Occurs when no items were found.</p> <code>MultipleItemFoundError</code> <p>Occurs when several items were found.</p>"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_callback_group","title":"<code>get_callback_group(callback_group_name)</code>","text":"<p>Get a callback group that matches the condition.</p> <p>Parameters:</p> Name Type Description Default <code>callback_group_name</code> <code>str</code> <p>callback group name to get.</p> required <p>Returns:</p> Type Description <code>CallbackBase</code> <p>callback group that matches the condition.</p> <p>Raises:</p> Type Description <code>InvalidArgumentError</code> <p>Given argument type is invalid.</p> <code>ItemNotFoundError</code> <p>Failed to find an item that matches the condition.</p> <code>MultipleItemFoundError</code> <p>Failed to identify an item that matches the condition.</p>"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_callbacks","title":"<code>get_callbacks(*callback_names)</code>","text":"<p>Get callbacks that match the condition.</p> <p>Parameters:</p> Name Type Description Default <code>callback_names</code> <code>Tuple[str, ...]</code> <p>callback names to get.</p> <code>()</code> <p>Returns:</p> Type Description <code>List[CallbackBase]</code> <p>callbacks that match the condition.</p> <p>Raises:</p> Type Description <code>InvalidArgumentError</code> <p>Occurs when the given argument type is invalid.</p> <code>ItemNotFoundError</code> <p>Occurs when no items were found.</p> <code>MultipleItemFoundError</code> <p>Occurs when several items were found.</p>"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_communication","title":"<code>get_communication(publisher_node_name, subscription_node_name, topic_name)</code>","text":"<p>Get communication that matches the condition.</p> <p>Parameters:</p> Name Type Description Default <code>publisher_node_name</code> <code>str</code> <p>node name that publishes the topic.</p> required <code>subscription_node_name</code> <code>str</code> <p>node name that subscribes to the topic.</p> required <code>topic_name</code> <code>str</code> <p>topic name.</p> required <p>Returns:</p> Type Description <code>Communication</code> <p>communication that matches the condition.</p> <p>Raises:</p> Type Description <code>InvalidArgumentError</code> <p>Given argument type is invalid.</p> <code>ItemNotFoundError</code> <p>Failed to find an item that matches the condition.</p> <code>MultipleItemFoundError</code> <p>Failed to identify an item that matches the condition.</p>"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_communications","title":"<code>get_communications(topic_name)</code>","text":"<p>Get communication that matches the condition.</p> <p>Parameters:</p> Name Type Description Default <code>topic_name</code> <code>str</code> <p>topic name to get.</p> required <p>Returns:</p> Type Description <code>List[Communication]</code> <p>communications that match the condition.</p> <p>Raises:</p> Type Description <code>InvalidArgumentError</code> <p>Occurs when the given argument type is invalid.</p> <code>ItemNotFoundError</code> <p>Failed to find an item that matches the condition.</p>"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_executor","title":"<code>get_executor(executor_name)</code>","text":"<p>Get an executor that matches the condition.</p> <p>Parameters:</p> Name Type Description Default <code>executor_name</code> <code>str</code> <p>executor name to get. The name is defined in the architecture file (ex: executor_0).</p> required <p>Returns:</p> Type Description <code>Executor</code> <p>executor that matches the condition.</p> <p>Raises:</p> Type Description <code>InvalidArgumentError</code> <p>Given argument type is invalid.</p> <code>ItemNotFoundError</code> <p>Failed to find an item that matches the condition.</p> <code>MultipleItemFoundError</code> <p>Failed to identify an item that matches the condition.</p>"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_node","title":"<code>get_node(node_name)</code>","text":"<p>Get a node that matches the condition.</p> <p>Parameters:</p> Name Type Description Default <code>node_name</code> <code>str</code> <p>node name to get.</p> required <p>Returns:</p> Type Description <code>Node</code> <p>A node that matches the condition.</p> <p>Raises:</p> Type Description <code>InvalidArgumentError</code> <p>Occurs when the given argument type is invalid.</p> <code>ItemNotFoundError</code> <p>Occurs when no items were found.</p> <code>MultipleItemFoundError</code> <p>Occurs when several items were found.</p>"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_node_path","title":"<code>get_node_path(node_name, subscribe_topic_name, publish_topic_name)</code>","text":"<p>Get a node path that matches the condition.</p> <p>Parameters:</p> Name Type Description Default <code>node_name</code> <code>str</code> <p>node name to get.</p> required <code>subscribe_topic_name</code> <code>Optional[str]</code> <p>topic name which the node subscribes.</p> required <code>publish_topic_name</code> <code>Optional[str]</code> <p>topic name which the node publishes.</p> required <p>Returns:</p> Type Description <code>NodePathStructValue</code> <p>node path that matches the condition.</p> <p>Raises:</p> Type Description <code>InvalidArgumentError</code> <p>Occurs when the given argument type is invalid.</p> <code>ItemNotFoundError</code> <p>Occurs when no items were found.</p> <code>MultipleItemFoundError</code> <p>Occurs when several items were found.</p>"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_node_paths","title":"<code>get_node_paths(node_name)</code>","text":"<p>Get node paths.</p> <p>Parameters:</p> Name Type Description Default <code>node_name</code> <code>str</code> <p>node name to get.</p> required <p>Returns:</p> Type Description <code>List[NodePathStructValue]</code> <p>node paths that match the condition.</p> <p>Raises:</p> Type Description <code>InvalidArgumentError</code> <p>Occurs when the given argument type is invalid.</p>"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_path","title":"<code>get_path(path_name)</code>","text":"<p>Get a path that matches the condition.</p> <p>Parameters:</p> Name Type Description Default <code>path_name</code> <code>str</code> <p>path name to get. paths and their names are defined in the architecture.</p> required <p>Returns:</p> Type Description <code>Path</code> <p>A path that matches the condition.</p> <p>Raises:</p> Type Description <code>InvalidArgumentError</code> <p>Occurs when the given argument type is invalid.</p> <code>ItemNotFoundError</code> <p>Occurs when no items were found.</p> <code>MultipleItemFoundError</code> <p>Occurs when several items were found.</p>"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_publishers","title":"<code>get_publishers(topic_name)</code>","text":"<p>Get publishers that match the condition.</p> <p>Parameters:</p> Name Type Description Default <code>topic_name</code> <code>str</code> <p>topic name to get.</p> required <p>Returns:</p> Type Description <code>List[Publisher]</code> <p>publishers that match the condition.</p> <p>Raises:</p> Type Description <code>InvalidArgumentError</code> <p>Occurs when the given argument type is invalid.</p> <code>ItemNotFoundError</code> <p>Failed to find an item that matches the condition.</p>"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_subscriptions","title":"<code>get_subscriptions(topic_name)</code>","text":"<p>Get subscriptions that match the condition.</p> <p>Parameters:</p> Name Type Description Default <code>topic_name</code> <code>str</code> <p>topic name to get.</p> required <p>Returns:</p> Type Description <code>List[Publisher]</code> <p>subscriptions that match the condition.</p> <p>Raises:</p> Type Description <code>InvalidArgumentError</code> <p>Occurs when the given argument type is invalid.</p> <code>ItemNotFoundError</code> <p>Failed to find an item that matches the condition.</p>"},{"location":"runtime/#caret_analyze.runtime.CallbackBase","title":"<code>CallbackBase</code>","text":"<p>         Bases: <code>PathBase</code>, <code>Summarizable</code></p> <p>A base class that represents callback.</p>"},{"location":"runtime/#caret_analyze.runtime.callback.CallbackBase.callback_name","title":"<code>callback_name: str</code>  <code>property</code>","text":"<p>Get callback name defined in the architecture.</p> <p>Returns:</p> Type Description <code>str</code> <p>callback name defined in architecture.</p>"},{"location":"runtime/#caret_analyze.runtime.callback.CallbackBase.callback_type","title":"<code>callback_type: CallbackType</code>  <code>property</code>","text":"<p>Get callback type.</p> <p>Returns:</p> Type Description <code>CallbackType</code> <p>callback type.</p>"},{"location":"runtime/#caret_analyze.runtime.callback.CallbackBase.node_name","title":"<code>node_name: str</code>  <code>property</code>","text":"<p>Get node name.</p> <p>Returns:</p> Type Description <code>str</code> <p>node name containing this callback.</p>"},{"location":"runtime/#caret_analyze.runtime.callback.CallbackBase.publish_topic_names","title":"<code>publish_topic_names: Optional[List[str]]</code>  <code>property</code>","text":"<p>Get publisher topic names.</p> <p>Returns:</p> Type Description <code>Optional[List[str]]</code> <p>topic name list to be published by the callback.</p>"},{"location":"runtime/#caret_analyze.runtime.callback.CallbackBase.publishers","title":"<code>publishers: Optional[List[Publisher]]</code>  <code>property</code>","text":"<p>Get publishers.</p> <p>Returns:</p> Type Description <code>Optional[List[Publisher]]</code> <p>publishers to which the callback publishes.</p>"},{"location":"runtime/#caret_analyze.runtime.callback.CallbackBase.subscribe_topic_name","title":"<code>subscribe_topic_name: Optional[str]</code>  <code>property</code>","text":"<p>Get subscription topic name.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>topic name to be subscribed by the callback. None except for subscription callback.</p>"},{"location":"runtime/#caret_analyze.runtime.callback.CallbackBase.subscription","title":"<code>subscription: Optional[Subscription]</code>  <code>property</code>","text":"<p>Get subscription.</p> <p>Returns:</p> Type Description <code>Optional[Subscription]</code> <p>subscription which the callback is attached. None except for subscription callback.</p>"},{"location":"runtime/#caret_analyze.runtime.callback.CallbackBase.summary","title":"<code>summary: Summary</code>  <code>property</code>","text":"<p>Get summary [override].</p> <p>Returns:</p> Type Description <code>Summary</code> <p>summary info.</p>"},{"location":"runtime/#caret_analyze.runtime.callback.CallbackBase.symbol","title":"<code>symbol: str</code>  <code>property</code>","text":"<p>Get callback symbol name.</p> <p>Returns:</p> Type Description <code>str</code> <p>callback function symbol name.</p>"},{"location":"runtime/#caret_analyze.runtime.callback.CallbackBase.timer","title":"<code>timer: Optional[Timer]</code>  <code>property</code>","text":"<p>Get timer.</p> <p>Returns:</p> Type Description <code>Optional[Timer]</code> <p>timer which the callback is attached. None except for timer callback.</p>"},{"location":"runtime/#caret_analyze.runtime.callback.CallbackBase.value","title":"<code>value: CallbackStructValue</code>  <code>property</code>","text":"<p>Get StructValue object.</p> <p>Returns:</p> Type Description <code>CallbackStructValue</code> <p>callback group value.</p>"},{"location":"runtime/#caret_analyze.runtime.callback.CallbackBase.value--notes","title":"Notes","text":"<p>This property is for CARET debugging purposes.</p>"},{"location":"runtime/#caret_analyze.runtime.callback.CallbackBase.__init__","title":"<code>__init__(info, records_provider, subscription, publishers, timer)</code>","text":"<p>Construct an instance.</p> <p>Parameters:</p> Name Type Description Default <code>info</code> <code>CallbackStructValue</code> <p>static info.</p> required <code>records_provider</code> <code>RecordsProvider</code> <p>provider to be evaluated.</p> required <code>subscription</code> <code>Optional[Subscription]</code> <p>None except for subscription callbacks.</p> required <code>publishers</code> <code>Optional[List[Publisher]]</code> <p>publishers to which the callback publishes.</p> required <code>timer</code> <code>Optional[Timer]</code> <p>None except for timer callbacks.</p> required"},{"location":"runtime/#caret_analyze.runtime.CallbackGroup","title":"<code>CallbackGroup</code>","text":"<p>         Bases: <code>Summarizable</code></p> <p>A class that represents the callback group.</p>"},{"location":"runtime/#caret_analyze.runtime.callback_group.CallbackGroup.callback_group_name","title":"<code>callback_group_name: str</code>  <code>property</code>","text":"<p>Get callback group name.</p> <p>Returns:</p> Type Description <code>str</code> <p>callback group name defined in the architecture.</p>"},{"location":"runtime/#caret_analyze.runtime.callback_group.CallbackGroup.callback_group_type","title":"<code>callback_group_type: CallbackGroupType</code>  <code>property</code>","text":"<p>Get callback_group_type.</p> <p>Returns:</p> Name Type Description <code>CallbackGroupType</code> <code>CallbackGroupType</code> <p>REENTRANT / MUTUALLY_EXCLUSIVE</p>"},{"location":"runtime/#caret_analyze.runtime.callback_group.CallbackGroup.callback_group_type_name","title":"<code>callback_group_type_name: str</code>  <code>property</code>","text":"<p>Get callback_group_type name.</p> <p>Returns:</p> Type Description <code>CallbackGroupType name</code> <p>'reentrant' / 'mutually_exclusive'</p>"},{"location":"runtime/#caret_analyze.runtime.callback_group.CallbackGroup.callbacks","title":"<code>callbacks: List[CallbackBase]</code>  <code>property</code>","text":"<p>Get callbacks.</p> <p>Returns:</p> Type Description <code>List[CallbackBase]</code> <p>callbacks which are contained in this callback group.</p>"},{"location":"runtime/#caret_analyze.runtime.callback_group.CallbackGroup.node_name","title":"<code>node_name: str</code>  <code>property</code>","text":"<p>Get node name.</p> <p>Returns:</p> Type Description <code>str</code> <p>node name which is contained this callback group.</p>"},{"location":"runtime/#caret_analyze.runtime.callback_group.CallbackGroup.summary","title":"<code>summary: Summary</code>  <code>property</code>","text":"<p>Get summary [override].</p> <p>Returns:</p> Type Description <code>Summary</code> <p>summary info.</p>"},{"location":"runtime/#caret_analyze.runtime.callback_group.CallbackGroup.value","title":"<code>value: CallbackGroupStructValue</code>  <code>property</code>","text":"<p>Get StructValue object.</p> <p>Returns:</p> Type Description <code>CallbackGroupStructValue</code> <p>callback group value.</p>"},{"location":"runtime/#caret_analyze.runtime.callback_group.CallbackGroup.value--notes","title":"Notes","text":"<p>This property is for CARET debugging purposes.</p>"},{"location":"runtime/#caret_analyze.runtime.callback_group.CallbackGroup.__init__","title":"<code>__init__(callback_group_info, callbacks)</code>","text":"<p>Construct an instance.</p> <p>Parameters:</p> Name Type Description Default <code>callback_group_info</code> <code>CallbackGroupStructValue</code> <p>static information.</p> required <code>callbacks</code> <code>List[CallbackBase]</code> <p>callbacks to be added to the callback group.</p> required"},{"location":"runtime/#caret_analyze.runtime.callback_group.CallbackGroup.get_callback","title":"<code>get_callback(callback_name)</code>","text":"<p>Get a callback that matches the condition.</p> <p>Parameters:</p> Name Type Description Default <code>callback_name</code> <code>str</code> <p>callback name to get.</p> required <p>Returns:</p> Type Description <code>CallbackBase</code> <p>callback that matches the condition.</p> <p>Raises:</p> Type Description <code>InvalidArgumentError</code> <p>Occurs when the given argument type is invalid.</p> <code>ItemNotFoundError</code> <p>Occurs when no items were found.</p> <code>MultipleItemFoundError</code> <p>Occurs when several items were found.</p>"},{"location":"runtime/#caret_analyze.runtime.callback_group.CallbackGroup.get_callbacks","title":"<code>get_callbacks(*callback_names)</code>","text":"<p>Get callbacks that match the condition.</p> <p>Returns:</p> Type Description <code>List[CallbackBase]</code> <p>callbacks that match the condition.</p>"},{"location":"runtime/#caret_analyze.runtime.Communication","title":"<code>Communication</code>","text":"<p>         Bases: <code>PathBase</code>, <code>Summarizable</code></p> <p>Class that represents topic communication.</p>"},{"location":"runtime/#caret_analyze.runtime.communication.Communication.callback_publish","title":"<code>callback_publish: Optional[List[CallbackBase]]</code>  <code>property</code>","text":"<p>Get publisher callback.</p> <p>Returns:</p> Type Description <code>Optional[List[CallbackBase]]</code> <p>callback which publishes this communication.</p>"},{"location":"runtime/#caret_analyze.runtime.communication.Communication.callback_subscription","title":"<code>callback_subscription: Optional[CallbackBase]</code>  <code>property</code>","text":"<p>Get subscribe callback.</p> <p>Returns:</p> Type Description <code>Optional[CallbackBase]</code> <p>callback to which subscribe this communication.</p>"},{"location":"runtime/#caret_analyze.runtime.communication.Communication.is_intra_proc_comm","title":"<code>is_intra_proc_comm: Optional[bool]</code>  <code>property</code>","text":"<p>Get whether this communication is intra-process-communication.</p> <p>Returns:</p> Type Description <code>Optional[bool]</code> <p>True when intra-process-communication. otherwise False.</p>"},{"location":"runtime/#caret_analyze.runtime.communication.Communication.publish_node","title":"<code>publish_node: Node</code>  <code>property</code>","text":"<p>Get publish node.</p> <p>Returns:</p> Type Description <code>Node</code> <p>A node that publishes this communication.</p>"},{"location":"runtime/#caret_analyze.runtime.communication.Communication.publish_node_name","title":"<code>publish_node_name: str</code>  <code>property</code>","text":"<p>Get publish node name.</p> <p>Returns:</p> Type Description <code>str</code> <p>node name which publishes this communication.</p>"},{"location":"runtime/#caret_analyze.runtime.communication.Communication.publisher","title":"<code>publisher: Publisher</code>  <code>property</code>","text":"<p>Get publisher.</p> <p>Returns:</p> Type Description <code>Publisher</code> <p>publisher to publish this communication.</p>"},{"location":"runtime/#caret_analyze.runtime.communication.Communication.rmw_implementation","title":"<code>rmw_implementation: Optional[str]</code>  <code>property</code>","text":"<p>Get rmw implementation.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>rmw implementation.</p>"},{"location":"runtime/#caret_analyze.runtime.communication.Communication.subscribe_node","title":"<code>subscribe_node: Node</code>  <code>property</code>","text":"<p>Get subscribe node.</p> <p>Returns:</p> Type Description <code>Node</code> <p>node to which subscribes this communication.</p>"},{"location":"runtime/#caret_analyze.runtime.communication.Communication.subscribe_node_name","title":"<code>subscribe_node_name: str</code>  <code>property</code>","text":"<p>Get subscribe node name.</p> <p>Returns:</p> Type Description <code>str</code> <p>node name which subscribes to this communication.</p>"},{"location":"runtime/#caret_analyze.runtime.communication.Communication.subscription","title":"<code>subscription: Subscription</code>  <code>property</code>","text":"<p>Get subscription.</p> <p>Returns:</p> Type Description <code>Subscription</code> <p>subscription to subscribe to this communication.</p>"},{"location":"runtime/#caret_analyze.runtime.communication.Communication.summary","title":"<code>summary: Summary</code>  <code>property</code>","text":"<p>Get summary [override].</p> <p>Returns:</p> Type Description <code>Summary</code> <p>summary info.</p>"},{"location":"runtime/#caret_analyze.runtime.communication.Communication.topic_name","title":"<code>topic_name: str</code>  <code>property</code>","text":"<p>Get a topic name.</p> <p>Returns:</p> Type Description <code>str</code> <p>topic name of this communication.</p>"},{"location":"runtime/#caret_analyze.runtime.communication.Communication.value","title":"<code>value: CommunicationStructValue</code>  <code>property</code>","text":"<p>Get StructValue object.</p> <p>Returns:</p> Type Description <code>CommunicationStructValue</code> <p>communication value.</p>"},{"location":"runtime/#caret_analyze.runtime.communication.Communication.value--notes","title":"Notes","text":"<p>This property is for CARET debugging purposes.</p>"},{"location":"runtime/#caret_analyze.runtime.communication.Communication.__init__","title":"<code>__init__(node_publish, node_subscription, publisher, subscription, communication_value, records_provider, callbacks_publish, callback_subscription)</code>","text":"<p>Construct an instance.</p> <p>Parameters:</p> Name Type Description Default <code>node_publish</code> <code>Node</code> <p>publish node.</p> required <code>node_subscription</code> <code>Node</code> <p>subscribe node</p> required <code>publisher</code> <code>Publisher</code> <p>publisher</p> required <code>subscription</code> <code>Subscription</code> <p>subscription</p> required <code>communication_value</code> <code>CommunicationStructValue</code> <p>static info.</p> required <code>records_provider</code> <code>Union[RecordsProvider, RuntimeDataProvider, None]</code> <p>provider to be evaluated.</p> required <code>callbacks_publish</code> <code>Optional[List[CallbackBase]]</code> <p>callbacks publish</p> required <code>callback_subscription</code> <code>Optional[CallbackBase]</code> <p>callback subscription</p> required"},{"location":"runtime/#caret_analyze.runtime.communication.Communication.verify","title":"<code>verify()</code>","text":"<p>Verify whether latency can be generated.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if valid. Otherwise False.</p>"},{"location":"runtime/#caret_analyze.runtime.Executor","title":"<code>Executor</code>","text":"<p>         Bases: <code>Summarizable</code></p> <p>Class that represents executor.</p>"},{"location":"runtime/#caret_analyze.runtime.executor.Executor.callback_group_names","title":"<code>callback_group_names: List[str]</code>  <code>property</code>","text":"<p>Get callback group names.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>Callback group names added to the executor.</p>"},{"location":"runtime/#caret_analyze.runtime.executor.Executor.callback_groups","title":"<code>callback_groups: List[CallbackGroup]</code>  <code>property</code>","text":"<p>Get callback groups.</p> <p>Returns:</p> Type Description <code>List[CallbackGroup]</code> <p>Callback groups added to the executor.</p>"},{"location":"runtime/#caret_analyze.runtime.executor.Executor.callback_names","title":"<code>callback_names: List[str]</code>  <code>property</code>","text":"<p>Get callback names.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>callback names added to the executor.</p>"},{"location":"runtime/#caret_analyze.runtime.executor.Executor.callbacks","title":"<code>callbacks: List[CallbackBase]</code>  <code>property</code>","text":"<p>Get callbacks.</p> <p>Returns:</p> Type Description <code>List[CallbackBase]</code> <p>Callbacks added to the executor.</p>"},{"location":"runtime/#caret_analyze.runtime.executor.Executor.executor_name","title":"<code>executor_name: str</code>  <code>property</code>","text":"<p>Get executor name.</p> <p>Returns:</p> Type Description <code>str</code> <p>executor name defined in the architecture.</p>"},{"location":"runtime/#caret_analyze.runtime.executor.Executor.executor_type","title":"<code>executor_type: ExecutorType</code>  <code>property</code>","text":"<p>Get executor type.</p> <p>Returns:</p> Type Description <code>ExecutorType</code> <p>executor type.</p>"},{"location":"runtime/#caret_analyze.runtime.executor.Executor.summary","title":"<code>summary: Summary</code>  <code>property</code>","text":"<p>Get summary [override].</p> <p>Returns:</p> Type Description <code>Summary</code> <p>summary info.</p>"},{"location":"runtime/#caret_analyze.runtime.executor.Executor.value","title":"<code>value: ExecutorStructValue</code>  <code>property</code>","text":"<p>Get StructValue object.</p> <p>Returns:</p> Type Description <code>ExecutorStructValue</code> <p>executor value.</p>"},{"location":"runtime/#caret_analyze.runtime.executor.Executor.value--notes","title":"Notes","text":"<p>This property is for CARET debugging purposes.</p>"},{"location":"runtime/#caret_analyze.runtime.executor.Executor.__init__","title":"<code>__init__(executor_value, callback_groups)</code>","text":"<p>Construct an instance.</p> <p>Parameters:</p> Name Type Description Default <code>executor_value</code> <code>ExecutorStructValue</code> <p>Static info.</p> required <code>callback_groups</code> <code>List[CallbackGroup]</code> <p>Callback groups added to the executor.</p> required"},{"location":"runtime/#caret_analyze.runtime.executor.Executor.get_callback","title":"<code>get_callback(callback_name)</code>","text":"<p>Get callback.</p> <p>Parameters:</p> Name Type Description Default <code>callback_name</code> <code>str</code> <p>callback name to get.</p> required <p>Returns:</p> Type Description <code>CallbackBase</code> <p>callback that matches the condition.</p> <p>Raises:</p> Type Description <code>InvalidArgumentError</code> <p>Occurs when the given argument type is invalid.</p> <code>ItemNotFoundError</code> <p>Occurs when no items were found.</p> <code>MultipleItemFoundError</code> <p>Occurs when several items were found.</p>"},{"location":"runtime/#caret_analyze.runtime.executor.Executor.get_callback_group","title":"<code>get_callback_group(callback_group_name)</code>","text":"<p>Get callback group.</p> <p>Parameters:</p> Name Type Description Default <code>callback_group_name</code> <code>str</code> <p>callback group name to get.</p> required <p>Returns:</p> Type Description <code>CallbackGroup</code> <p>Callback group that matches the condition.</p> <p>Raises:</p> Type Description <code>InvalidArgumentError</code> <p>Occurs when the given argument type is invalid.</p> <code>ItemNotFoundError</code> <p>Occurs when no items were found.</p> <code>MultipleItemFoundError</code> <p>Occurs when several items were found.</p>"},{"location":"runtime/#caret_analyze.runtime.executor.Executor.get_callbacks","title":"<code>get_callbacks(*callback_names)</code>","text":"<p>Get callbacks.</p> <p>Returns:</p> Type Description <code>List[CallbackBase]</code> <p>callbacks that match the condition.</p>"},{"location":"runtime/#caret_analyze.runtime.Node","title":"<code>Node</code>","text":"<p>         Bases: <code>Summarizable</code></p> <p>A class that represents a node.</p>"},{"location":"runtime/#caret_analyze.runtime.node.Node.callback_group_names","title":"<code>callback_group_names: Optional[List[str]]</code>  <code>property</code>","text":"<p>Get callback group names.</p> <p>Returns:</p> Type Description <code>Optional[List[str]]</code> <p>callback group names that the node contains.</p>"},{"location":"runtime/#caret_analyze.runtime.node.Node.callback_groups","title":"<code>callback_groups: Optional[List[CallbackGroup]]</code>  <code>property</code>","text":"<p>Get callback groups.</p> <p>Returns:</p> Type Description <code>Optional[List[CallbackGroup]]</code> <p>callback groups that the node contains.</p>"},{"location":"runtime/#caret_analyze.runtime.node.Node.callback_names","title":"<code>callback_names: Optional[List[str]]</code>  <code>property</code>","text":"<p>Get callback names.</p> <p>Returns:</p> Type Description <code>Optional[List[str]]</code> <p>callback names that the node contains.</p>"},{"location":"runtime/#caret_analyze.runtime.node.Node.callbacks","title":"<code>callbacks: Optional[List[CallbackBase]]</code>  <code>property</code>","text":"<p>Get callbacks.</p> <p>Returns:</p> Type Description <code>Optional[List[CallbackBase]]</code> <p>callbacks that the node contains.</p>"},{"location":"runtime/#caret_analyze.runtime.node.Node.node_name","title":"<code>node_name: str</code>  <code>property</code>","text":"<p>Get node name.</p> <p>Returns:</p> Type Description <code>str</code> <p>node name.</p>"},{"location":"runtime/#caret_analyze.runtime.node.Node.paths","title":"<code>paths: List[NodePath]</code>  <code>property</code>","text":"<p>Get node paths.</p> <p>Node paths are defined by subscription and publisher pair.</p> <p>Returns:</p> Type Description <code>List[NodePath]</code> <p>node paths that the node contains.</p>"},{"location":"runtime/#caret_analyze.runtime.node.Node.publish_topic_names","title":"<code>publish_topic_names: List[str]</code>  <code>property</code>","text":"<p>Get topic names the node publishes.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>topic names that the node publishes to.</p>"},{"location":"runtime/#caret_analyze.runtime.node.Node.publishers","title":"<code>publishers: List[Publisher]</code>  <code>property</code>","text":"<p>Get publishers.</p> <p>Returns:</p> Type Description <code>List[Publisher]</code> <p>publishers used by the node.</p>"},{"location":"runtime/#caret_analyze.runtime.node.Node.subscribe_topic_names","title":"<code>subscribe_topic_names: List[str]</code>  <code>property</code>","text":"<p>Get subscribe topic names.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>topic names to which the node subscribes.</p>"},{"location":"runtime/#caret_analyze.runtime.node.Node.subscriptions","title":"<code>subscriptions: List[Subscription]</code>  <code>property</code>","text":"<p>Get subscriptions the node subscribes.</p> <p>Returns:</p> Type Description <code>List[Subscription]</code> <p>subscriptions that the node subscribes to.</p>"},{"location":"runtime/#caret_analyze.runtime.node.Node.summary","title":"<code>summary: Summary</code>  <code>property</code>","text":"<p>Get summary [override].</p> <p>Returns:</p> Type Description <code>Summary</code> <p>summary info.</p>"},{"location":"runtime/#caret_analyze.runtime.node.Node.timers","title":"<code>timers: List[Timer]</code>  <code>property</code>","text":"<p>Get timers.</p> <p>Returns:</p> Type Description <code>List[Timer]</code> <p>timers that the node contains.</p>"},{"location":"runtime/#caret_analyze.runtime.node.Node.value","title":"<code>value: NodeStructValue</code>  <code>property</code>","text":"<p>Get StructValue object.</p> <p>Returns:</p> Type Description <code>NodeStructValue</code> <p>node value.</p>"},{"location":"runtime/#caret_analyze.runtime.node.Node.value--notes","title":"Notes","text":"<p>This property is for CARET debugging purposes.</p>"},{"location":"runtime/#caret_analyze.runtime.node.Node.variable_passings","title":"<code>variable_passings: Optional[List[VariablePassing]]</code>  <code>property</code>","text":"<p>Get variable passings.</p> <p>Returns:</p> Type Description <code>Optional[List[VariablePassing]]</code> <p>Variable passings that the node contains.</p>"},{"location":"runtime/#caret_analyze.runtime.node.Node.__init__","title":"<code>__init__(node, publishers, subscription, timers, node_paths, callback_groups, variable_passings)</code>","text":"<p>Construct an instance.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>NodeStructValue</code> <p>static info</p> required <code>publishers</code> <code>List[Publisher]</code> <p>publishers in the node.</p> required <code>subscription</code> <code>List[Subscription]</code> <p>subscriptions in the node.</p> required <code>timers</code> <code>List[Timer]</code> <p>timers in the node.</p> required <code>node_paths</code> <code>List[NodePath]</code> <p>node paths in the node.</p> required <code>callback_groups</code> <code>Optional[List[CallbackGroup]]</code> <p>callback groups in the node.</p> required <code>variable_passings</code> <code>Optional[List[VariablePassing]]</code> <p>variable passings in the node.</p> required"},{"location":"runtime/#caret_analyze.runtime.node.Node.get_callback","title":"<code>get_callback(callback_name)</code>","text":"<p>Get callback.</p> <p>Parameters:</p> Name Type Description Default <code>callback_name</code> <code>str</code> <p>callback name to get.</p> required <p>Returns:</p> Type Description <code>CallbackBase</code> <p>callback that matches the condition.</p> <p>Raises:</p> Type Description <code>InvalidArgumentError</code> <p>Occurs when the given argument type is invalid.</p> <code>ItemNotFoundError</code> <p>Occurs when no items were found.</p> <code>MultipleItemFoundError</code> <p>Occurs when several items were found.</p>"},{"location":"runtime/#caret_analyze.runtime.node.Node.get_callback_group","title":"<code>get_callback_group(callback_group_name)</code>","text":"<p>Get callback group.</p> <p>Parameters:</p> Name Type Description Default <code>callback_group_name</code> <code>str</code> <p>callback group name to get.</p> required <p>Returns:</p> Type Description <code>CallbackGroup</code> <p>callback group that matches the condition.</p> <p>Raises:</p> Type Description <code>InvalidArgumentError</code> <p>Occurs when the given argument type is invalid.</p> <code>ItemNotFoundError</code> <p>Occurs when no items were found.</p> <code>MultipleItemFoundError</code> <p>Occurs when several items were found.</p>"},{"location":"runtime/#caret_analyze.runtime.node.Node.get_callbacks","title":"<code>get_callbacks(*callback_names)</code>","text":"<p>Get callbacks.</p> <p>Parameters:</p> Name Type Description Default <code>callback_names</code> <code>str</code> <p>callback names to get.</p> <code>()</code> <p>Returns:</p> Type Description <code>List[CallbackBase]</code> <p>callbacks that match the condition.</p> <p>Raises:</p> Type Description <code>InvalidArgumentError</code> <p>Occurs when the given argument type is invalid.</p> <code>ItemNotFoundError</code> <p>Occurs when no items were found.</p>"},{"location":"runtime/#caret_analyze.runtime.node.Node.get_path","title":"<code>get_path(subscribe_topic_name, publish_topic_name)</code>","text":"<p>Get node path.</p> <p>Parameters:</p> Name Type Description Default <code>subscribe_topic_name</code> <code>Optional[str]</code> <p>topic name to which the node subscribes.</p> required <code>publish_topic_name</code> <code>Optional[str]</code> <p>topic name to which the node publishes.</p> required <p>Returns:</p> Type Description <code>NodePath</code> <p>node path that matches the condition.</p> <p>Raises:</p> Type Description <code>InvalidArgumentError</code> <p>Occurs when the given argument type is invalid.</p> <code>ItemNotFoundError</code> <p>Occurs when no items were found.</p> <code>MultipleItemFoundError</code> <p>Occurs when several items were found.</p>"},{"location":"runtime/#caret_analyze.runtime.node.Node.get_publisher","title":"<code>get_publisher(topic_name)</code>","text":"<p>Get publisher.</p> <p>Parameters:</p> Name Type Description Default <code>topic_name</code> <code>str</code> <p>publisher topic name to get.</p> required <p>Returns:</p> Type Description <code>Publisher</code> <p>A publisher that matches the condition.</p> <p>Raises:</p> Type Description <code>InvalidArgumentError</code> <p>Occurs when the given argument type is invalid.</p> <code>ItemNotFoundError</code> <p>Occurs when no items were found.</p> <code>MultipleItemFoundError</code> <p>Occurs when several items were found.</p>"},{"location":"runtime/#caret_analyze.runtime.node.Node.get_subscription","title":"<code>get_subscription(topic_name)</code>","text":"<p>Get subscription.</p> <p>Parameters:</p> Name Type Description Default <code>topic_name</code> <code>str</code> <p>topic name to get.</p> required <p>Returns:</p> Type Description <code>Subscription</code> <p>Subscription instance that matches the condition.</p> <p>Raises:</p> Type Description <code>InvalidArgumentError</code> <p>Occurs when the given argument type is invalid.</p> <code>ItemNotFoundError</code> <p>Occurs when no items were found.</p> <code>MultipleItemFoundError</code> <p>Occurs when several items were found.</p>"},{"location":"runtime/#caret_analyze.runtime.NodePath","title":"<code>NodePath</code>","text":"<p>         Bases: <code>PathBase</code>, <code>Summarizable</code></p> <p>A class that represents a path inside a node.</p> <p>Node path is defined as subscription-publisher pair. subscribe-publish policies are defined as \"message context\"</p>"},{"location":"runtime/#caret_analyze.runtime.node_path.NodePath.callbacks","title":"<code>callbacks: Optional[List[CallbackBase]]</code>  <code>property</code>","text":"<p>Get callbacks.</p> <p>Returns:</p> Type Description <code>Optional[List[CallbackBase]]</code> <p>Callbacks in node path. None except for message context is callback chain.</p>"},{"location":"runtime/#caret_analyze.runtime.node_path.NodePath.message_context","title":"<code>message_context: Optional[MessageContext]</code>  <code>property</code>","text":"<p>Get message context.</p> <p>Returns:</p> Type Description <code>Optional[MessageContext]</code> <p>message context for this node path.</p>"},{"location":"runtime/#caret_analyze.runtime.node_path.NodePath.node_name","title":"<code>node_name: str</code>  <code>property</code>","text":"<p>Get node name.</p> <p>Returns:</p> Type Description <code>str</code> <p>Node name which contains this node path.</p>"},{"location":"runtime/#caret_analyze.runtime.node_path.NodePath.publish_topic_name","title":"<code>publish_topic_name: Optional[str]</code>  <code>property</code>","text":"<p>Get a topic name to publish.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>topic name to publish.</p>"},{"location":"runtime/#caret_analyze.runtime.node_path.NodePath.publisher","title":"<code>publisher: Optional[Publisher]</code>  <code>property</code>","text":"<p>Get publisher.</p> <p>Returns:</p> Type Description <code>Optional[Publisher]</code> <p>node path publisher.</p>"},{"location":"runtime/#caret_analyze.runtime.node_path.NodePath.subscribe_topic_name","title":"<code>subscribe_topic_name: Optional[str]</code>  <code>property</code>","text":"<p>Get a topic name to subscribe to.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>topic name to subscribe to.</p>"},{"location":"runtime/#caret_analyze.runtime.node_path.NodePath.subscription","title":"<code>subscription: Optional[Subscription]</code>  <code>property</code>","text":"<p>Get a subscription.</p> <p>Returns:</p> Type Description <code>Optional[Subscription]</code> <p>subscription to subscribe to.</p>"},{"location":"runtime/#caret_analyze.runtime.node_path.NodePath.summary","title":"<code>summary: Summary</code>  <code>property</code>","text":"<p>Get summary [override].</p> <p>Returns:</p> Type Description <code>Summary</code> <p>summary info.</p>"},{"location":"runtime/#caret_analyze.runtime.node_path.NodePath.value","title":"<code>value: NodePathStructValue</code>  <code>property</code>","text":"<p>Get StructValue object.</p> <p>Returns:</p> Type Description <code>NodePathStructValue</code> <p>node path value.</p>"},{"location":"runtime/#caret_analyze.runtime.node_path.NodePath.value--notes","title":"Notes","text":"<p>This property is for CARET debugging purposes.</p>"},{"location":"runtime/#caret_analyze.runtime.node_path.NodePath.__init__","title":"<code>__init__(node_path_value, records_provider, subscription, publisher, callbacks)</code>","text":"<p>Construct an instance.</p> <p>Parameters:</p> Name Type Description Default <code>node_path_value</code> <code>NodePathStructValue</code> <p>static info.</p> required <code>records_provider</code> <code>RecordsProvider</code> <p>provider to be evaluated.</p> required <code>subscription</code> <code>Optional[Subscription]</code> <p>node path subscription</p> required <code>publisher</code> <code>Optional[Publisher]</code> <p>node path publisher</p> required <code>callbacks</code> <code>Optional[List[CallbackBase]]</code> <p>Callbacks in node path. Needed only if message context is CallbackChain.</p> required"},{"location":"runtime/#caret_analyze.runtime.Path","title":"<code>Path</code>","text":"<p>         Bases: <code>PathBase</code>, <code>Summarizable</code></p> <p>A class that represents a path.</p> <p>A single path is composed of node paths and communications.</p>"},{"location":"runtime/#caret_analyze.runtime.path.Path.callback_chain","title":"<code>callback_chain: Optional[List[CallbackBase]]</code>  <code>property</code>","text":"<p>Get callback chain.</p> <p>Returns:</p> Type Description <code>Optional[List[CallbackBase]]</code> <p>callbacks that compose the path. return None except for all of the node paths are callback chains.</p>"},{"location":"runtime/#caret_analyze.runtime.path.Path.callbacks","title":"<code>callbacks: List[CallbackBase]</code>  <code>property</code>","text":"<p>Get callbacks.</p> <p>Returns:</p> Type Description <code>List[CallbackBase]</code> <p>callbacks in all nodes that comprise the node path.</p>"},{"location":"runtime/#caret_analyze.runtime.path.Path.child","title":"<code>child: List[Union[NodePath, Communication]]</code>  <code>property</code>","text":"<p>Get path children.</p> <p>Returns:</p> Type Description <code>List[Union[NodePath, Communication]]</code> <p>node paths and communications in the target path. node paths and communications are alternately contained.</p>"},{"location":"runtime/#caret_analyze.runtime.path.Path.child_names","title":"<code>child_names: List[str]</code>  <code>property</code>","text":"<p>Get path children's names.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>node names and topic names in the target path.</p>"},{"location":"runtime/#caret_analyze.runtime.path.Path.communications","title":"<code>communications: List[Communication]</code>  <code>property</code>","text":"<p>Get communications.</p> <p>Returns:</p> Type Description <code>List[Communication]</code> <p>Communications in target path.</p>"},{"location":"runtime/#caret_analyze.runtime.path.Path.node_names","title":"<code>node_names: List[str]</code>  <code>property</code>","text":"<p>Get node names.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>node names in the target path.</p>"},{"location":"runtime/#caret_analyze.runtime.path.Path.node_paths","title":"<code>node_paths: List[NodePath]</code>  <code>property</code>","text":"<p>Get node-paths.</p> <p>Returns:</p> Type Description <code>List[NodePath]</code> <p>node paths in target path.</p>"},{"location":"runtime/#caret_analyze.runtime.path.Path.path_name","title":"<code>path_name: Optional[str]</code>  <code>property</code>","text":"<p>Get path name.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Path name defined in the architecture.</p>"},{"location":"runtime/#caret_analyze.runtime.path.Path.summary","title":"<code>summary: Summary</code>  <code>property</code>","text":"<p>Get summary [override].</p> <p>Returns:</p> Type Description <code>Summary</code> <p>summary info.</p>"},{"location":"runtime/#caret_analyze.runtime.path.Path.topic_names","title":"<code>topic_names: List[str]</code>  <code>property</code>","text":"<p>Get topic names.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>topic names in the target path.</p>"},{"location":"runtime/#caret_analyze.runtime.path.Path.value","title":"<code>value: PathStructValue</code>  <code>property</code>","text":"<p>Get StructValue object.</p> <p>Returns:</p> Type Description <code>PathStructValue</code> <p>path value.</p>"},{"location":"runtime/#caret_analyze.runtime.path.Path.value--notes","title":"Notes","text":"<p>This property is for CARET debugging purposes.</p>"},{"location":"runtime/#caret_analyze.runtime.path.Path.__init__","title":"<code>__init__(path, child, callbacks)</code>","text":"<p>Construct an instance.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>PathStructValue</code> <p>static info</p> required <code>child</code> <code>List[Union[NodePath, Communication]]</code> <p>path children's which compose path (node paths and communications).</p> required <code>callbacks</code> <code>Optional[List[CallbackBase]]</code> <p>callbacks that compose the path. return None except for all of node paths are not callback-chain.</p> required"},{"location":"runtime/#caret_analyze.runtime.path.Path.clear_cache","title":"<code>clear_cache()</code>","text":"<p>Clear to_records/to_dataframe cache.</p>"},{"location":"runtime/#caret_analyze.runtime.path.Path.verify","title":"<code>verify()</code>","text":"<p>Verify whether the path can generate latencies.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if both architecture and measurement results are valid, otherwise false.</p>"},{"location":"runtime/#caret_analyze.runtime.PathBase","title":"<code>PathBase</code>","text":"<p>Base class for Latency.</p>"},{"location":"runtime/#caret_analyze.runtime.path_base.PathBase.column_names","title":"<code>column_names: List[str]</code>  <code>property</code>","text":"<p>Get column names.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>column names</p>"},{"location":"runtime/#caret_analyze.runtime.path_base.PathBase.to_dataframe","title":"<code>to_dataframe(remove_dropped=False, treat_drop_as_delay=False, lstrip_s=0, rstrip_s=0, *, shaper=None)</code>","text":"<p>Calculate dataframe.</p> <p>Parameters:</p> Name Type Description Default <code>remove_dropped</code> <p>If true, eliminate the records that caused the drop.</p> <code>False</code> <code>treat_drop_as_delay</code> <p>Convert dropped records as a delay. Valid only when remove_dropped=false.</p> <code>False</code> <code>lstrip_s</code> <code>float</code> <p>Remove from beginning. [s]</p> <code>0</code> <code>rstrip_s</code> <code>float</code> <p>Remove from end [s]</p> <code>0</code> <code>shaper</code> <code>Optional[DataFrameShaper]</code> <p>shaper</p> <code>None</code> <p>Returns:</p> Type Description <code>pandas.DataFrame</code> <p>Execution time of each operation.</p>"},{"location":"runtime/#caret_analyze.runtime.path_base.PathBase.to_histogram","title":"<code>to_histogram(binsize_ns=1000000, treat_drop_as_delay=False, lstrip_s=0, rstrip_s=0, *, shaper=None)</code>","text":"<p>Calculate histogram data.</p> <p>Parameters:</p> Name Type Description Default <code>binsize_ns</code> <code>int</code> <p>bin size for histogram. default 1ms.</p> <code>1000000</code> <code>treat_drop_as_delay</code> <code>bool</code> <p>Convert dropped records as a delay.</p> <code>False</code> <code>lstrip_s</code> <code>float</code> <p>Remove from beginning. [s]</p> <code>0</code> <code>rstrip_s</code> <code>float</code> <p>Remove from end [s]</p> <code>0</code> <code>shaper</code> <code>Optional[DataFrameShaper]</code> <p>shaper</p> <code>None</code> <p>Returns:</p> Type Description <code>Tuple[np.ndarray, np.ndarray]</code> <p>frequency, latency[ns]</p> <p>len(frequency)+1 == len(latency)</p>"},{"location":"runtime/#caret_analyze.runtime.path_base.PathBase.to_histogram--see-also","title":"See Also","text":"<pre><code>https://numpy.org/doc/stable/reference/generated/numpy.histogram.html\n</code></pre>"},{"location":"runtime/#caret_analyze.runtime.path_base.PathBase.to_records","title":"<code>to_records()</code>","text":"<p>Calculate records.</p> <p>Returns:</p> Type Description <code>RecordsInterface</code> <p>Execution time of each operation.</p>"},{"location":"runtime/#caret_analyze.runtime.path_base.PathBase.to_timeseries","title":"<code>to_timeseries(remove_dropped=False, treat_drop_as_delay=False, lstrip_s=0, rstrip_s=0, *, shaper=None)</code>","text":"<p>Calculate timeseries data.</p> <p>Parameters:</p> Name Type Description Default <code>remove_dropped</code> <code>Optional[bool]</code> <p>If true, eliminate the records that caused the drop. default: False.</p> <code>False</code> <code>treat_drop_as_delay</code> <code>Optional[bool]</code> <p>Convert dropped records as a delay. Valid only when remove_dropped=false. default: False.</p> <code>False</code> <code>lstrip_s</code> <code>float</code> <p>Remove from beginning. [s] default: 0</p> <code>0</code> <code>rstrip_s</code> <code>float</code> <p>Remove from end [s] default: 0</p> <code>0</code> <code>shaper</code> <code>Optional[DataFrameShaper]</code> <p>shaper</p> <code>None</code> <p>Returns:</p> Type Description <code>Tuple[np.ndarray, np.ndarray]</code> <p>time[ns], latency[ns] len(time) == len(latency)</p>"},{"location":"runtime/#caret_analyze.runtime.Publisher","title":"<code>Publisher</code>","text":"<p>         Bases: <code>PathBase</code>, <code>Summarizable</code></p> <p>Class that represents publisher.</p>"},{"location":"runtime/#caret_analyze.runtime.publisher.Publisher.callback_names","title":"<code>callback_names: Optional[List[str]]</code>  <code>property</code>","text":"<p>Get callback names.</p> <p>Returns:</p> Type Description <code>Optional[List[str]]</code> <p>Callback names which uses the publisher to publish.</p>"},{"location":"runtime/#caret_analyze.runtime.publisher.Publisher.node_name","title":"<code>node_name: str</code>  <code>property</code>","text":"<p>Get node name.</p> <p>Returns:</p> Type Description <code>str</code> <p>node name which contains the publisher.</p>"},{"location":"runtime/#caret_analyze.runtime.publisher.Publisher.qos","title":"<code>qos: Optional[Qos]</code>  <code>property</code>","text":"<p>Get QoS.</p> <p>Returns:</p> Type Description <code>Optional[Qos]</code> <p>Publisher QoS</p>"},{"location":"runtime/#caret_analyze.runtime.publisher.Publisher.summary","title":"<code>summary: Summary</code>  <code>property</code>","text":"<p>Get summary [override].</p> <p>Returns:</p> Type Description <code>Summary</code> <p>summary info.</p>"},{"location":"runtime/#caret_analyze.runtime.publisher.Publisher.topic_name","title":"<code>topic_name: str</code>  <code>property</code>","text":"<p>Get a topic name.</p> <p>Returns:</p> Type Description <code>str</code> <p>A topic name that the publisher publishes.</p>"},{"location":"runtime/#caret_analyze.runtime.publisher.Publisher.value","title":"<code>value: PublisherStructValue</code>  <code>property</code>","text":"<p>Get StructValue object.</p> <p>Returns:</p> Type Description <code>PublisherStructValue</code> <p>publisher value.</p>"},{"location":"runtime/#caret_analyze.runtime.publisher.Publisher.value--notes","title":"Notes","text":"<p>This property is for CARET debugging purposes.</p>"},{"location":"runtime/#caret_analyze.runtime.publisher.Publisher.__init__","title":"<code>__init__(publisher, provider)</code>","text":"<p>Construct an instance.</p> <p>Parameters:</p> Name Type Description Default <code>publisher</code> <code>PublisherStructValue</code> <p>static info.</p> required <code>provider</code> <code>Union[RecordsProvider, RuntimeDataProvider]</code> <p>provider to be evaluated.</p> required"},{"location":"runtime/#caret_analyze.runtime.Subscription","title":"<code>Subscription</code>","text":"<p>         Bases: <code>PathBase</code>, <code>Summarizable</code></p> <p>A class that represents subscription.</p>"},{"location":"runtime/#caret_analyze.runtime.subscription.Subscription.callback_name","title":"<code>callback_name: Optional[str]</code>  <code>property</code>","text":"<p>Get a subscription callback name.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>callback name to which the subscription is attached.</p>"},{"location":"runtime/#caret_analyze.runtime.subscription.Subscription.node_name","title":"<code>node_name: str</code>  <code>property</code>","text":"<p>Get node name.</p> <p>Returns:</p> Type Description <code>str</code> <p>node name to which the subscription subscribes.</p>"},{"location":"runtime/#caret_analyze.runtime.subscription.Subscription.qos","title":"<code>qos: Optional[Qos]</code>  <code>property</code>","text":"<p>Get QoS.</p> <p>Returns:</p> Type Description <code>Optional[Qos]</code> <p>Subscription QoS.</p>"},{"location":"runtime/#caret_analyze.runtime.subscription.Subscription.summary","title":"<code>summary: Summary</code>  <code>property</code>","text":"<p>Get summary [override].</p> <p>Returns:</p> Type Description <code>Summary</code> <p>summary info.</p>"},{"location":"runtime/#caret_analyze.runtime.subscription.Subscription.topic_name","title":"<code>topic_name: str</code>  <code>property</code>","text":"<p>Get a topic name.</p> <p>Returns:</p> Type Description <code>str</code> <p>A topic name to which the subscription subscribes.</p>"},{"location":"runtime/#caret_analyze.runtime.subscription.Subscription.value","title":"<code>value: SubscriptionStructValue</code>  <code>property</code>","text":"<p>Get StructValue object.</p> <p>Returns:</p> Type Description <code>SubscriptionStructValue</code> <p>subscription value.</p>"},{"location":"runtime/#caret_analyze.runtime.subscription.Subscription.value--notes","title":"Notes","text":"<p>This property is for CARET debugging purposes.</p>"},{"location":"runtime/#caret_analyze.runtime.subscription.Subscription.__init__","title":"<code>__init__(val, data_provider)</code>","text":"<p>Construct an instance.</p> <p>Parameters:</p> Name Type Description Default <code>val</code> <code>SubscriptionStructValue</code> <p>static info.</p> required <code>data_provider</code> <code>Union[RecordsProvider, RuntimeDataProvider]</code> <p>provider to be evaluated.</p> required"},{"location":"runtime/#caret_analyze.runtime.SubscriptionCallback","title":"<code>SubscriptionCallback</code>","text":"<p>         Bases: <code>CallbackBase</code></p> <p>A class that represents subscription callback.</p>"},{"location":"runtime/#caret_analyze.runtime.callback.SubscriptionCallback.__init__","title":"<code>__init__(callback_info, records_provider, subscription, publishers=None)</code>","text":"<p>Construct an instance.</p> <p>Parameters:</p> Name Type Description Default <code>callback_info</code> <code>SubscriptionCallbackStructValue</code> <p>static info.</p> required <code>records_provider</code> <code>RecordsProvider</code> <p>provider to be evaluated.</p> required <code>subscription</code> <code>Subscription</code> <p>subscription to which callback subscribes.</p> required <code>publishers</code> <code>Optional[List[Publisher]]</code> <p>publishers to which the callback publishers</p> <code>None</code>"},{"location":"runtime/#caret_analyze.runtime.Timer","title":"<code>Timer</code>","text":"<p>         Bases: <code>PathBase</code>, <code>Summarizable</code></p> <p>A class that represents timer.</p>"},{"location":"runtime/#caret_analyze.runtime.timer.Timer.callback_name","title":"<code>callback_name: Optional[str]</code>  <code>property</code>","text":"<p>Get callback name.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>callback name defined in the architecture.</p>"},{"location":"runtime/#caret_analyze.runtime.timer.Timer.node_name","title":"<code>node_name: str</code>  <code>property</code>","text":"<p>Get node name.</p> <p>Returns:</p> Type Description <code>str</code> <p>node name which defines the timer.</p>"},{"location":"runtime/#caret_analyze.runtime.timer.Timer.period_ns","title":"<code>period_ns: int</code>  <code>property</code>","text":"<p>Get timer period.</p> <p>Returns:</p> Type Description <code>int</code> <p>timer period [ns].</p>"},{"location":"runtime/#caret_analyze.runtime.timer.Timer.summary","title":"<code>summary: Summary</code>  <code>property</code>","text":"<p>Get summary [override].</p> <p>Returns:</p> Type Description <code>Summary</code> <p>summary info.</p>"},{"location":"runtime/#caret_analyze.runtime.timer.Timer.value","title":"<code>value: TimerStructValue</code>  <code>property</code>","text":"<p>Get StructValue object.</p> <p>Returns:</p> Type Description <code>TimerStructValue</code> <p>timer value.</p>"},{"location":"runtime/#caret_analyze.runtime.timer.Timer.value--notes","title":"Notes","text":"<p>This property is for CARET debugging purposes.</p>"},{"location":"runtime/#caret_analyze.runtime.timer.Timer.__init__","title":"<code>__init__(val, data_provider)</code>","text":"<p>Construct an instance.</p> <p>Parameters:</p> Name Type Description Default <code>val</code> <code>TimerStructValue</code> <p>static info.</p> required <code>data_provider</code> <code>Union[RecordsProvider, RuntimeDataProvider]</code> <p>provider to be evaluated.</p> required"},{"location":"runtime/#caret_analyze.runtime.TimerCallback","title":"<code>TimerCallback</code>","text":"<p>         Bases: <code>CallbackBase</code></p> <p>Class that represents timer callback.</p>"},{"location":"runtime/#caret_analyze.runtime.callback.TimerCallback.period_ns","title":"<code>period_ns: int</code>  <code>property</code>","text":"<p>Get timer period.</p> <p>Returns:</p> Type Description <code>int</code> <p>timer period [ns].</p>"},{"location":"runtime/#caret_analyze.runtime.callback.TimerCallback.__init__","title":"<code>__init__(callback, records_provider, publishers, timer)</code>","text":"<p>Construct an instance.</p> <p>Parameters:</p> Name Type Description Default <code>callback</code> <code>TimerCallbackStructValue</code> <p>static info.</p> required <code>records_provider</code> <code>RecordsProvider</code> <p>provider to be evaluated.</p> required <code>publishers</code> <code>Optional[List[Publisher]]</code> <p>publishers to which the callback publishers</p> required <code>timer</code> <code>Timer</code> <p>timer</p> required"},{"location":"runtime/#caret_analyze.runtime.VariablePassing","title":"<code>VariablePassing</code>","text":"<p>         Bases: <code>PathBase</code>, <code>Summarizable</code></p>"},{"location":"runtime/#caret_analyze.runtime.variable_passing.VariablePassing.callback_name_read","title":"<code>callback_name_read</code>  <code>property</code>","text":"<p>Get read side callback name.</p> <p>Returns:</p> Type Description <code>[str]</code> <p>read-side callback name.</p>"},{"location":"runtime/#caret_analyze.runtime.variable_passing.VariablePassing.callback_name_write","title":"<code>callback_name_write: str</code>  <code>property</code>","text":"<p>Get write side callback name.</p> <p>Returns:</p> Type Description <code>[str]</code> <p>write-side callback name.</p>"},{"location":"runtime/#caret_analyze.runtime.variable_passing.VariablePassing.node_name","title":"<code>node_name: str</code>  <code>property</code>","text":"<p>Get node name.</p> <p>Returns:</p> Type Description <code>str</code> <p>node name which has the variable passing.</p>"},{"location":"runtime/#caret_analyze.runtime.variable_passing.VariablePassing.summary","title":"<code>summary: Summary</code>  <code>property</code>","text":"<p>Get summary [override].</p> <p>Returns:</p> Type Description <code>Summary</code> <p>summary info.</p>"},{"location":"runtime/#caret_analyze.runtime.variable_passing.VariablePassing.value","title":"<code>value: VariablePassingStructValue</code>  <code>property</code>","text":"<p>Get StructValue object.</p> <p>Returns:</p> Type Description <code>VariablePassingStructValue</code> <p>variable passing value.</p>"},{"location":"runtime/#caret_analyze.runtime.variable_passing.VariablePassing.value--notes","title":"Notes","text":"<p>This property is for CARET debugging purposes.</p>"},{"location":"runtime/#caret_analyze.runtime.variable_passing.VariablePassing.__init__","title":"<code>__init__(variable_passing, records_provider)</code>","text":"<p>Construct an instance.</p> <p>Parameters:</p> Name Type Description Default <code>variable_passing</code> <code>VariablePassingStructValue</code> <p>static info.</p> required <code>records_provider</code> <code>RecordsProvider</code> <p>provider to be evaluated.</p> required"},{"location":"value_objects/","title":"value_objects","text":"<p>Package defining the value object class.</p> <p>Defined classes are used as an interface across multiple packages: architecture, infra, and runtime. CARET uses value objects to avoid unexpectedly overwritten.</p>"},{"location":"value_objects/#caret_analyze.value_objects.CallbackChain","title":"<code>CallbackChain</code>","text":"<p>         Bases: <code>MessageContext</code></p>"},{"location":"value_objects/#caret_analyze.value_objects.message_context.CallbackChain.TYPE_NAME","title":"<code>TYPE_NAME = 'callback_chain'</code>  <code>class-attribute</code>","text":"<p>Callback chain.</p> <p>Latency is calculated from callback durations in the node path. When a path within a node passes through multiple callbacks, it is assumed that messages are passed between callbacks by a buffer of queue size 1 (ex. a member variable that stores a single message). If the queue size is larger than 1, the node latency may be calculated to be small.</p>"},{"location":"value_objects/#caret_analyze.value_objects.CallbackGroupStructValue","title":"<code>CallbackGroupStructValue</code>","text":"<p>         Bases: <code>ValueObject</code>, <code>Summarizable</code></p> <p>Callback group value object.</p>"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupStructValue.callback_group_name","title":"<code>callback_group_name: str</code>  <code>property</code>","text":"<p>Get callback group name.</p> <p>Returns:</p> Type Description <code>str</code> <p>Callback group name.</p>"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupStructValue.callback_group_type","title":"<code>callback_group_type: CallbackGroupType</code>  <code>property</code>","text":"<p>Get callback_group_type.</p> <p>Returns:</p> Type Description <code>CallbackGroupType</code>"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupStructValue.callback_group_type_name","title":"<code>callback_group_type_name: str</code>  <code>property</code>","text":"<p>Get callback_group_type name.</p> <p>Returns:</p> Type Description <code>CallbackGroupType name</code>"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupStructValue.callback_names","title":"<code>callback_names: Tuple[str, ...]</code>  <code>property</code>","text":"<p>Get callback names.</p> <p>Returns:</p> Type Description <code>Tuple[str, ...]</code> <p>Callback names which are added to the callback group.</p>"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupStructValue.callbacks","title":"<code>callbacks: Tuple[CallbackStructValue, ...]</code>  <code>property</code>","text":"<p>Get callbacks.</p> <p>Returns:</p> Type Description <code>Tuple[CallbackStructValue, ...]</code> <p>Callbacks which are added to the callback group.</p>"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupStructValue.node_name","title":"<code>node_name: str</code>  <code>property</code>","text":"<p>Get node name.</p> <p>Returns:</p> Type Description <code>str</code> <p>node name</p>"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupStructValue.__init__","title":"<code>__init__(callback_group_type, node_name, callback_values, callback_group_name)</code>","text":"<p>Construct callback group value object.</p> <p>Parameters:</p> Name Type Description Default <code>callback_group_type</code> <code>str</code> <p>callback group type</p> required <code>node_name</code> <code>List[str]</code> <p>node name</p> required <code>callback_values</code> <code>Tuple[CallbackStructValue, ...]</code> <p>callback values</p> required <code>callback_group_name</code> <code>str</code> <p>callback group name</p> required"},{"location":"value_objects/#caret_analyze.value_objects.CallbackGroupType","title":"<code>CallbackGroupType</code>","text":"<p>         Bases: <code>ValueObject</code></p> <p>Callback group type class.</p> <p>The types of callback groups are as follows:</p> <ul> <li>MUTUALLY_EXCLUSIVE</li> <li>REENTRANT</li> </ul>"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupType.type_name","title":"<code>type_name: str</code>  <code>property</code>","text":"<p>Return callback group type name.</p> <p>Returns:</p> Type Description <code>str</code> <p>type name.</p>"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupType.__init__","title":"<code>__init__(name)</code>","text":"<p>Construct CallbackGroupType.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>type name ['mutually_exclusive', 'reentrant']</p> required"},{"location":"value_objects/#caret_analyze.value_objects.CallbackGroupValue","title":"<code>CallbackGroupValue</code>","text":"<p>         Bases: <code>ValueObject</code></p> <p>Callback group value object.</p>"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupValue.callback_group_id","title":"<code>callback_group_id: str</code>  <code>property</code>","text":"<p>Get callback group id.</p> <p>Returns:</p> Type Description <code>str</code> <p>Callback group id.</p>"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupValue.callback_group_name","title":"<code>callback_group_name: Optional[str]</code>  <code>property</code>","text":"<p>Get callback group name.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Callback group name.</p>"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupValue.callback_group_type","title":"<code>callback_group_type: CallbackGroupType</code>  <code>property</code>","text":"<p>Get callback_group_type.</p> <p>Returns:</p> Type Description <code>CallbackGroupType</code>"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupValue.callback_ids","title":"<code>callback_ids: Tuple[str, ...]</code>  <code>property</code>","text":"<p>Get callback ids.</p> <p>Returns:</p> Type Description <code>Tuple[str, ...]</code> <p>callback ids added to the callback group.</p>"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupValue.node_id","title":"<code>node_id: str</code>  <code>property</code>","text":"<p>Get node id.</p> <p>Returns:</p> Type Description <code>str</code> <p>Node id.</p>"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupValue.node_name","title":"<code>node_name: str</code>  <code>property</code>","text":"<p>Get node name.</p> <p>Returns:</p> Type Description <code>str</code> <p>Node name which includes the callback group.</p>"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupValue.__init__","title":"<code>__init__(callback_group_type_name, node_name, node_id, callback_ids, callback_group_id, *, callback_group_name=None)</code>","text":"<p>Construct an instance.</p> <p>Parameters:</p> Name Type Description Default <code>callback_group_type_name</code> <code>str</code> <p>callback group type name: ['mutually_exclusive' / 'reentrant']</p> required <code>node_name</code> <code>str</code> <p>node name.</p> required <code>node_id</code> <code>str</code> <p>Identification of the node, a value that can be identified when retrieved from the Architecture reader.</p> required <code>callback_ids</code> <code>Tuple[str, ...]</code> <p>Identification of the callback, a value that can be identified when retrieved from the Architecture reader.</p> required <code>callback_group_id</code> <code>str</code> <p>Identification of the callback group, a value that can be identified when retrieved from the Architecture reader.</p> required <code>callback_group_name</code> <code>Optional[str], optional</code> <p>callback group name, by default None. If None, it is generated automatically.</p> <code>None</code>"},{"location":"value_objects/#caret_analyze.value_objects.CallbackStructValue","title":"<code>CallbackStructValue</code>","text":"<p>         Bases: <code>Summarizable</code></p> <p>Callback value base class.</p>"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackStructValue.callback_name","title":"<code>callback_name: str</code>  <code>property</code>","text":"<p>Get callback name.</p> <p>Returns:</p> Type Description <code>str</code> <p>callback name</p>"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackStructValue.callback_type","title":"<code>callback_type: CallbackType</code>  <code>property</code> <code>abstractmethod</code>","text":"<p>Get callback type name.</p> <p>Returns:</p> Type Description <code>CallbackType</code> <p>callback type</p>"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackStructValue.construction_order","title":"<code>construction_order: int</code>  <code>property</code>","text":"<p>Get construction order.</p> <p>Returns:</p> Type Description <code>int</code> <p>construction order</p>"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackStructValue.node_name","title":"<code>node_name: str</code>  <code>property</code>","text":"<p>Get node name.</p> <p>Returns:</p> Type Description <code>str</code> <p>node name</p>"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackStructValue.symbol","title":"<code>symbol: str</code>  <code>property</code>","text":"<p>Get callback symbol name.</p> <p>Returns:</p> Type Description <code>str</code> <p>callback symbol name</p>"},{"location":"value_objects/#caret_analyze.value_objects.CallbackType","title":"<code>CallbackType</code>","text":"<p>         Bases: <code>ValueObject</code></p> <p>callback group type class.</p>"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackType.type_name","title":"<code>type_name: str</code>  <code>property</code>","text":"<p>Return callback type name.</p> <p>Returns:</p> Type Description <code>str</code> <p>type name.</p>"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackType.__init__","title":"<code>__init__(name)</code>","text":"<p>Construct callback type.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>callback type name ['timer_callback', 'subscription_callback', 'service_callback']</p> required"},{"location":"value_objects/#caret_analyze.value_objects.CallbackValue","title":"<code>CallbackValue</code>","text":"<p>         Bases: <code>ValueObject</code></p> <p>Value object class for representing a callback.</p> <p>This class has minimal information and no structure. It's used as the return value of ArchitectureReader.</p>"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackValue.callback_id","title":"<code>callback_id: str</code>  <code>property</code>","text":"<p>Get callback id.</p> <p>Callback id is is used to bind. Callback id should be the same if the node name and other properties are the same. If any properties is different, it should be a different callback id.</p> <p>Returns:</p> Type Description <code>str</code> <p>Callback unique id.</p>"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackValue.callback_name","title":"<code>callback_name: Optional[str]</code>  <code>property</code>","text":"<p>Get callback name.</p> <p>Returns:</p> Type Description <code>str</code> <p>Callback name.</p>"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackValue.callback_name--note","title":"Note:","text":"<p>Different architecture_readers may return different values.</p>"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackValue.callback_type","title":"<code>callback_type: CallbackType</code>  <code>property</code> <code>abstractmethod</code>","text":"<p>Get callback type name.</p> <p>Returns:</p> Type Description <code>CallbackType</code> <p>callback type</p>"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackValue.construction_order","title":"<code>construction_order: int</code>  <code>property</code>","text":"<p>Get construction order.</p> <p>Returns:</p> Type Description <code>int</code> <p>construction order</p>"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackValue.node_id","title":"<code>node_id: str</code>  <code>property</code>","text":"<p>Get node id.</p> <p>Returns:</p> Type Description <code>str</code> <p>Node id.</p>"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackValue.node_name","title":"<code>node_name: str</code>  <code>property</code>","text":"<p>Get node name.</p> <p>Returns:</p> Type Description <code>str</code> <p>Node name.</p>"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackValue.publish_topic_names","title":"<code>publish_topic_names: Optional[Tuple[str, ...]]</code>  <code>property</code>","text":"<p>Get publisher topic names.</p> <p>Returns:</p> Type Description <code>Optional[Tuple[str, ...]]</code> <p>Topic names which the callback publishes.</p>"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackValue.publish_topic_names--note","title":"Note:","text":"<p>Since callback publishes multiple topics, there are multiple publish topic names.</p>"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackValue.subscribe_topic_name","title":"<code>subscribe_topic_name: Optional[str]</code>  <code>property</code>","text":"<p>Get subscription topic name.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Topic name which the callback subscribes.</p>"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackValue.subscribe_topic_name--note","title":"Note:","text":"<p>Only one subscription callback have a single subscribe topic name.</p>"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackValue.symbol","title":"<code>symbol: str</code>  <code>property</code>","text":"<p>Get callback symbol name.</p> <p>Returns:</p> Type Description <code>str</code> <p>Callback symbol name.</p>"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackValue.__init__","title":"<code>__init__(callback_id, node_name, node_id, symbol, subscribe_topic_name, service_name, publish_topic_names, construction_order, *, callback_name=None)</code>","text":"<p>Construct an instance.</p> <p>Parameters:</p> Name Type Description Default <code>callback_id</code> <code>str</code> <p>Callback unique id, a value that can be identified when retrieved from the Architecture reader.</p> required <code>node_name</code> <code>str</code> <p>Node name.</p> required <code>node_id</code> <code>str</code> <p>Node unique id, a value that can be identified when retrieved from the Architecture reader.</p> required <code>symbol</code> <code>str</code> <p>Symbol name of the callback.</p> required <code>subscribe_topic_name</code> <code>Optional[str]</code> <p>Topic name which the callback subscribes.</p> required <code>service_name</code> <code>Optional[str]</code> <p>Service name which the callback service.</p> required <code>publish_topic_names</code> <code>Optional[Tuple[str, ...]]</code> <p>Topic name which the callback publishes.</p> required <code>construction_order</code> <code>int</code> <p>Order of instance creation within the identical node.</p> required <code>callback_name</code> <code>Optional[str]</code> <p>Callback name, by default None. This argument is used by ArchitectureReaderYaml.</p> <code>None</code>"},{"location":"value_objects/#caret_analyze.value_objects.ExecutorStructValue","title":"<code>ExecutorStructValue</code>","text":"<p>         Bases: <code>ValueObject</code>, <code>Summarizable</code></p> <p>Executor info for architecture.</p>"},{"location":"value_objects/#caret_analyze.value_objects.ExecutorType","title":"<code>ExecutorType</code>","text":"<p>         Bases: <code>ValueObject</code></p> <p>executor type class.</p>"},{"location":"value_objects/#caret_analyze.value_objects.executor.ExecutorType.type_name","title":"<code>type_name: str</code>  <code>property</code>","text":"<p>Return executor type name.</p> <p>Returns:</p> Type Description <code>str</code> <p>type name.</p>"},{"location":"value_objects/#caret_analyze.value_objects.ExecutorValue","title":"<code>ExecutorValue</code>","text":"<p>         Bases: <code>ValueObject</code></p> <p>Executor info for architecture.</p>"},{"location":"value_objects/#caret_analyze.value_objects.InheritUniqueStamp","title":"<code>InheritUniqueStamp</code>","text":"<p>         Bases: <code>MessageContext</code></p>"},{"location":"value_objects/#caret_analyze.value_objects.message_context.InheritUniqueStamp.TYPE_NAME","title":"<code>TYPE_NAME = 'inherit_unique_stamp'</code>  <code>class-attribute</code>","text":"<p>Inherit header timestamp.</p> <p>Latency is calculated for pub/sub messages with the same timestamp value. If the input timestamp is not unique, it may calculate an incorrect value.</p>"},{"location":"value_objects/#caret_analyze.value_objects.MessageContext","title":"<code>MessageContext</code>","text":"<p>         Bases: <code>ValueObject</code>, <code>Summarizable</code></p> <p>Structured message context value.</p>"},{"location":"value_objects/#caret_analyze.value_objects.MessageContextType","title":"<code>MessageContextType</code>","text":"<p>         Bases: <code>ValueObject</code></p> <p>Message context type.</p>"},{"location":"value_objects/#caret_analyze.value_objects.NodePathStructValue","title":"<code>NodePathStructValue</code>","text":"<p>         Bases: <code>ValueObject</code>, <code>Summarizable</code></p> <p>StructValue object class for representing a node path.</p> <p>This class is a structure that includes other related StructValue classes, such as callbacks, and used as the return value of Architecture object. In CARET, the node path is defined as from subscribe to publish.</p>"},{"location":"value_objects/#caret_analyze.value_objects.node_path.NodePathStructValue.__init__","title":"<code>__init__(node_name, subscription, publisher, child, message_context)</code>","text":"<p>Construct an instance.</p> <p>Parameters:</p> Name Type Description Default <code>node_name</code> <code>str</code> <p>Node name</p> required <code>subscription</code> <code>Optional[SubscriptionStructValue]</code> <p>Subscription which the node path subscribes.</p> required <code>publisher</code> <code>Optional[PublisherStructValue]</code> <p>Publisher which the node path publishes.</p> required <code>child</code> <code>Optional[Tuple[Union[CallbackStructValue, VariablePassingStructValue], ...]]</code> <p>Child elements of a node path. Required only when message_context is callback_chain.</p> required <code>message_context</code> <code>Optional[MessageContext]</code> <p>Message Context. Used to define node latency.</p> required"},{"location":"value_objects/#caret_analyze.value_objects.NodePathValue","title":"<code>NodePathValue</code>","text":"<p>         Bases: <code>ValueObject</code></p> <p>Value object class for representing a node path.</p> <p>This class has minimal information and no structure, and used as the return value of ArchitectureReader. In CARET, the node path is defined as from subscribe to publish.</p>"},{"location":"value_objects/#caret_analyze.value_objects.node_path.NodePathValue.__init__","title":"<code>__init__(node_name, subscribe_topic_name, publish_topic_name)</code>","text":"<p>Construct an instance.</p> <p>Parameters:</p> Name Type Description Default <code>node_name</code> <code>str</code> <p>Node name.</p> required <code>subscribe_topic_name</code> <code>Optional[str]</code> <p>Topic name which the node-path subscribes.</p> required <code>publish_topic_name</code> <code>Optional[str]</code> <p>Topic name which the node-path publishes.</p> required"},{"location":"value_objects/#caret_analyze.value_objects.NodeStructValue","title":"<code>NodeStructValue</code>","text":"<p>         Bases: <code>ValueObject</code>, <code>Summarizable</code></p> <p>StructValue object class for representing a node.</p> <p>This class is a structure that includes other related StructValue classes, such as callbacks, and used as the return value of Architecture object.</p>"},{"location":"value_objects/#caret_analyze.value_objects.NodeValue","title":"<code>NodeValue</code>","text":"<p>         Bases: <code>ValueObject</code></p> <p>Value object class for representing a node.</p> <p>This class has minimal information and no structure, and used as the return value of ArchitectureReader.</p>"},{"location":"value_objects/#caret_analyze.value_objects.node.NodeValue.__init__","title":"<code>__init__(node_name, node_id)</code>","text":"<p>Construct an instance.</p> <p>Parameters:</p> Name Type Description Default <code>node_name</code> <code>str</code> <p>Node name.</p> required <code>node_id</code> <code>Optional[str]</code> <p>Identification of the node, a value that can be identified when retrieved from the Architecture reader.</p> required"},{"location":"value_objects/#caret_analyze.value_objects.NodeValueWithId","title":"<code>NodeValueWithId</code>","text":"<p>         Bases: <code>NodeValue</code></p> <p>Value object class for representing a node path.</p> <p>This class has minimal information and no structure, and used as the return value of ArchitectureReader.</p>"},{"location":"value_objects/#caret_analyze.value_objects.node.NodeValueWithId.__init__","title":"<code>__init__(node_name, node_id)</code>","text":"<p>Construct an instance.</p> <p>Parameters:</p> Name Type Description Default <code>node_name</code> <code>str</code> <p>Node name.</p> required <code>node_id</code> <code>Optional[str]</code> <p>Identification of the node, a value that can be identified when retrieved from the Architecture reader.</p> required"},{"location":"value_objects/#caret_analyze.value_objects.PathValue","title":"<code>PathValue</code>","text":"<p>         Bases: <code>ValueObject</code></p> <p>Path name alias.</p>"},{"location":"value_objects/#caret_analyze.value_objects.PublisherStructValue","title":"<code>PublisherStructValue</code>","text":"<p>         Bases: <code>ValueObject</code>, <code>Summarizable</code></p> <p>Structured publisher value.</p>"},{"location":"value_objects/#caret_analyze.value_objects.PublisherValue","title":"<code>PublisherValue</code>","text":"<p>         Bases: <code>ValueObject</code></p> <p>Publisher value.</p>"},{"location":"value_objects/#caret_analyze.value_objects.Qos","title":"<code>Qos</code>","text":"<p>         Bases: <code>ValueObject</code>, <code>Summarizable</code></p> <p>Qos info.</p>"},{"location":"value_objects/#caret_analyze.value_objects.Qos--note","title":"Note:","text":"<p>Currently, only DEPTH is supported, but it is desirable to support other QoS by adding trace points.</p>"},{"location":"value_objects/#caret_analyze.value_objects.ServiceCallbackStructValue","title":"<code>ServiceCallbackStructValue</code>","text":"<p>         Bases: <code>CallbackStructValue</code>, <code>ValueObject</code></p> <p>Structured service callback value.</p>"},{"location":"value_objects/#caret_analyze.value_objects.ServiceCallbackValue","title":"<code>ServiceCallbackValue</code>","text":"<p>         Bases: <code>CallbackValue</code></p> <p>Service callback value.</p>"},{"location":"value_objects/#caret_analyze.value_objects.ServiceStructValue","title":"<code>ServiceStructValue</code>","text":"<p>         Bases: <code>ValueObject</code>, <code>Summarizable</code></p> <p>Service info.</p>"},{"location":"value_objects/#caret_analyze.value_objects.ServiceValue","title":"<code>ServiceValue</code>","text":"<p>         Bases: <code>ValueObject</code></p> <p>Service info.</p>"},{"location":"value_objects/#caret_analyze.value_objects.SubscriptionCallbackStructValue","title":"<code>SubscriptionCallbackStructValue</code>","text":"<p>         Bases: <code>CallbackStructValue</code>, <code>ValueObject</code></p> <p>Structured subscription callback value.</p>"},{"location":"value_objects/#caret_analyze.value_objects.SubscriptionCallbackValue","title":"<code>SubscriptionCallbackValue</code>","text":"<p>         Bases: <code>CallbackValue</code></p> <p>Subscription callback value.</p>"},{"location":"value_objects/#caret_analyze.value_objects.SubscriptionStructValue","title":"<code>SubscriptionStructValue</code>","text":"<p>         Bases: <code>ValueObject</code>, <code>Summarizable</code></p> <p>Subscription info.</p>"},{"location":"value_objects/#caret_analyze.value_objects.SubscriptionValue","title":"<code>SubscriptionValue</code>","text":"<p>         Bases: <code>ValueObject</code></p> <p>Subscription info.</p>"},{"location":"value_objects/#caret_analyze.value_objects.Tilde","title":"<code>Tilde</code>","text":"<p>         Bases: <code>MessageContext</code></p>"},{"location":"value_objects/#caret_analyze.value_objects.message_context.Tilde.TYPE_NAME","title":"<code>TYPE_NAME = 'tilde'</code>  <code>class-attribute</code>","text":"<p>tilde.</p> <p>Latency is calculated from tilde.</p>"},{"location":"value_objects/#caret_analyze.value_objects.TimerCallbackStructValue","title":"<code>TimerCallbackStructValue</code>","text":"<p>         Bases: <code>CallbackStructValue</code>, <code>ValueObject</code></p> <p>Structured timer callback value.</p>"},{"location":"value_objects/#caret_analyze.value_objects.TimerCallbackValue","title":"<code>TimerCallbackValue</code>","text":"<p>         Bases: <code>CallbackValue</code></p> <p>Value object class for representing a timer.</p> <p>This class has minimal information and no structure, and used as the return value of ArchitectureReader.</p>"},{"location":"value_objects/#caret_analyze.value_objects.TimerStructValue","title":"<code>TimerStructValue</code>","text":"<p>         Bases: <code>ValueObject</code>, <code>Summarizable</code></p> <p>Timer info.</p>"},{"location":"value_objects/#caret_analyze.value_objects.TimerValue","title":"<code>TimerValue</code>","text":"<p>         Bases: <code>ValueObject</code></p> <p>Timer info.</p>"},{"location":"value_objects/#caret_analyze.value_objects.UseLatestMessage","title":"<code>UseLatestMessage</code>","text":"<p>         Bases: <code>MessageContext</code></p>"},{"location":"value_objects/#caret_analyze.value_objects.message_context.UseLatestMessage.TYPE_NAME","title":"<code>TYPE_NAME = 'use_latest_message'</code>  <code>class-attribute</code>","text":"<p>Use message context</p>"},{"location":"value_objects/#caret_analyze.value_objects.ValueObject","title":"<code>ValueObject</code>","text":"<p>Value object base class.</p> <p>Classes that inherit from this class will become immutable ValueObjects, and eq and hash will be calculated based on public properties.</p>"},{"location":"value_objects/#caret_analyze.value_objects.ValueObject--note","title":"Note:","text":"<p>Since the hash value is immutable, inherited classes can be used as a dictionary type key. It is also suitable for cache use and does not unintentionally change properties.</p>"},{"location":"value_objects/#caret_analyze.value_objects.value_object.ValueObject.__eq__","title":"<code>__eq__(right)</code>","text":"<p>Check whether self object equals to given instance [override].</p> <p>Parameters:</p> Name Type Description Default <code>right</code> <code>Any</code> <p>Comparison target.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>Recursively compares the values of the published properties and returns True only if they all match. False otherwise.</p>"},{"location":"value_objects/#caret_analyze.value_objects.value_object.ValueObject.__hash__","title":"<code>__hash__()</code>","text":"<p>Calculate hash value.</p> <p>Returns:</p> Type Description <code>int</code> <p>A hash value calculated from all of the publicly available property values by recursively referencing them.</p>"},{"location":"value_objects/#caret_analyze.value_objects.value_object.ValueObject.__hash__--references","title":"References","text":"<pre><code>https://www.baeldung.com/java-hashcode\n</code></pre>"},{"location":"value_objects/#caret_analyze.value_objects.value_object.ValueObject.__str__","title":"<code>__str__()</code>","text":"<p>Convert to string.</p> <p>Returns:</p> Type Description <code>str</code> <p>Yaml format strings created by recursively access properties.</p>"},{"location":"value_objects/#caret_analyze.value_objects.VariablePassingStructValue","title":"<code>VariablePassingStructValue</code>","text":"<p>         Bases: <code>ValueObject</code>, <code>Summarizable</code></p> <p>variable passing info.</p>"},{"location":"value_objects/#caret_analyze.value_objects.variable_passing.VariablePassingStructValue.callback_name_read","title":"<code>callback_name_read</code>  <code>property</code>","text":"<p>Get read-side callback name.</p> <p>Returns:</p> Type Description <code>[str]</code> <p>read-side callback name.</p>"},{"location":"value_objects/#caret_analyze.value_objects.variable_passing.VariablePassingStructValue.callback_name_write","title":"<code>callback_name_write: str</code>  <code>property</code>","text":"<p>Get write-side callback name.</p> <p>Returns:</p> Type Description <code>[str]</code> <p>write-side callback name.</p>"},{"location":"value_objects/#caret_analyze.value_objects.variable_passing.VariablePassingStructValue.node_name","title":"<code>node_name: str</code>  <code>property</code>","text":"<p>Get node name.</p> <p>Returns:</p> Type Description <code>str</code> <p>node name</p>"},{"location":"value_objects/#caret_analyze.value_objects.VariablePassingValue","title":"<code>VariablePassingValue</code>","text":"<p>         Bases: <code>ValueObject</code></p> <p>variable passing info.</p>"},{"location":"value_objects/#caret_analyze.value_objects.variable_passing.VariablePassingValue.callback_id_read","title":"<code>callback_id_read: str</code>  <code>property</code>","text":"<p>Get read-side callback id.</p> <p>Returns:</p> Type Description <code>[str]</code> <p>read-side callback id.</p>"},{"location":"value_objects/#caret_analyze.value_objects.variable_passing.VariablePassingValue.callback_id_write","title":"<code>callback_id_write: str</code>  <code>property</code>","text":"<p>Get write-side callback id.</p> <p>Returns:</p> Type Description <code>[str]</code> <p>write-side callback id.</p>"},{"location":"value_objects/#caret_analyze.value_objects.variable_passing.VariablePassingValue.node_name","title":"<code>node_name: str</code>  <code>property</code>","text":"<p>Get node name.</p> <p>Returns:</p> Type Description <code>str</code> <p>node name</p>"}]}